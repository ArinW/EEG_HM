{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["dPyQvA3d9Cqn","sCvlTL6N9QO_","eH5eSZ58-nMC","rWfzCo3i9osr"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Ma1h3Y1DoSl2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879312581,"user_tz":240,"elapsed":23650,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"54c73a27-3cad-425a-8df9-ea91c1f276aa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["\n","import pandas as pd\n","import numpy as np"],"metadata":{"id":"r4AOB6Zvoaug","executionInfo":{"status":"ok","timestamp":1713879315422,"user_tz":240,"elapsed":2846,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# Time Domain EEG Feature"],"metadata":{"id":"5TfBr573x27p"}},{"cell_type":"markdown","source":["## Load Data"],"metadata":{"id":"dPyQvA3d9Cqn"}},{"cell_type":"code","source":["df_time=pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/time_domain_features\")"],"metadata":{"id":"X55kdfKYpdmA","executionInfo":{"status":"ok","timestamp":1713879315762,"user_tz":240,"elapsed":1043,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df_time"],"metadata":{"id":"obmgOg6aqkRn","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879316037,"user_tz":240,"elapsed":277,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"7dbc1e1e-20d7-4c00-f0d7-c57add77037c"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0     AF3_mean    AF3_std      AF3_var   AF3_median  \\\n","0             0  4233.422687  43.471805  1889.797801  4231.794922   \n","1             1  4231.008787  44.189663  1952.726344  4229.743652   \n","2             2  4235.494381  25.175706   633.816192  4233.846191   \n","3             3  4237.481215  86.477155  7478.298389  4236.922852   \n","4             4  4233.419821  34.626376  1198.985906  4230.769043   \n","..          ...          ...        ...          ...          ...   \n","211         211  4239.671983  97.882280  9580.940701  4237.948730   \n","212         212  4229.912101  50.426474  2542.829266  4228.205078   \n","213         213  4234.076193  32.293637  1042.878960  4234.871582   \n","214         214  4236.514296  21.179939   448.589826  4236.410156   \n","215         215  4237.631749  19.933718   397.353096  4237.436035   \n","\n","         AF3_min      AF3_max  AF3_activity  AF3_mobility  AF3_complexity  \\\n","0    3241.025635  4429.230469   1889.797801      0.212561        5.546035   \n","1    3387.692139  5505.127930   1952.726344      0.269354        4.519996   \n","2    3968.205078  4438.974121    633.816192      0.379098        3.379011   \n","3    3529.743408  5739.486816   7478.298389      0.111843       11.086097   \n","4    3809.230713  4543.589844   1198.985906      0.264964        4.459335   \n","..           ...          ...           ...           ...             ...   \n","211   759.487183  4835.384277   9580.940701      0.106721       10.789804   \n","212  3890.256348  4543.076660   2542.829266      0.105597       11.185909   \n","213  4091.281982  4401.025391   1042.878960      0.171739        7.219231   \n","214  4070.769043  4437.435547    448.589826      0.276163        4.529806   \n","215  4154.871582  4365.641113    397.353096      0.257500        4.828735   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4          Test  \n","0          0.414635   EEG_Test0_1  \n","1          0.421499   EEG_Test0_2  \n","2          0.406884   EEG_Test0_3  \n","3          0.373620   EEG_Test0_4  \n","4          0.299771   EEG_Test0_5  \n","..              ...           ...  \n","211        0.378527  EEG_Test26_4  \n","212        0.257632  EEG_Test26_5  \n","213        0.374842  EEG_Test26_6  \n","214        0.310306  EEG_Test26_7  \n","215        0.370687  EEG_Test26_8  \n","\n","[216 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-179facbf-b8b3-48a4-83cf-a16b409beaea\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>211</td>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>EEG_Test26_4</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>212</td>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>EEG_Test26_5</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>213</td>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>EEG_Test26_6</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>214</td>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>EEG_Test26_7</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>215</td>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>EEG_Test26_8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>216 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-179facbf-b8b3-48a4-83cf-a16b409beaea')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-179facbf-b8b3-48a4-83cf-a16b409beaea button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-179facbf-b8b3-48a4-83cf-a16b409beaea');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2eb5549f-e904-49c2-88f9-8f1c183e2490\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2eb5549f-e904-49c2-88f9-8f1c183e2490')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2eb5549f-e904-49c2-88f9-8f1c183e2490 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_3ae873c9-687b-4919-98de-3d3b0cdfcb7e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3ae873c9-687b-4919-98de-3d3b0cdfcb7e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["rows_to_drop = ['Test20', 'Test21', 'Test27']\n","df_time_filtered = df_time[~df_time['Test'].str.contains('|'.join(rows_to_drop))]\n","df_time_filtered"],"metadata":{"id":"n9vteu-dujn5","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879316037,"user_tz":240,"elapsed":6,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"6e85a9de-9d33-4316-b5d7-86b0586005b6"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0     AF3_mean    AF3_std      AF3_var   AF3_median  \\\n","0             0  4233.422687  43.471805  1889.797801  4231.794922   \n","1             1  4231.008787  44.189663  1952.726344  4229.743652   \n","2             2  4235.494381  25.175706   633.816192  4233.846191   \n","3             3  4237.481215  86.477155  7478.298389  4236.922852   \n","4             4  4233.419821  34.626376  1198.985906  4230.769043   \n","..          ...          ...        ...          ...          ...   \n","211         211  4239.671983  97.882280  9580.940701  4237.948730   \n","212         212  4229.912101  50.426474  2542.829266  4228.205078   \n","213         213  4234.076193  32.293637  1042.878960  4234.871582   \n","214         214  4236.514296  21.179939   448.589826  4236.410156   \n","215         215  4237.631749  19.933718   397.353096  4237.436035   \n","\n","         AF3_min      AF3_max  AF3_activity  AF3_mobility  AF3_complexity  \\\n","0    3241.025635  4429.230469   1889.797801      0.212561        5.546035   \n","1    3387.692139  5505.127930   1952.726344      0.269354        4.519996   \n","2    3968.205078  4438.974121    633.816192      0.379098        3.379011   \n","3    3529.743408  5739.486816   7478.298389      0.111843       11.086097   \n","4    3809.230713  4543.589844   1198.985906      0.264964        4.459335   \n","..           ...          ...           ...           ...             ...   \n","211   759.487183  4835.384277   9580.940701      0.106721       10.789804   \n","212  3890.256348  4543.076660   2542.829266      0.105597       11.185909   \n","213  4091.281982  4401.025391   1042.878960      0.171739        7.219231   \n","214  4070.769043  4437.435547    448.589826      0.276163        4.529806   \n","215  4154.871582  4365.641113    397.353096      0.257500        4.828735   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4          Test  \n","0          0.414635   EEG_Test0_1  \n","1          0.421499   EEG_Test0_2  \n","2          0.406884   EEG_Test0_3  \n","3          0.373620   EEG_Test0_4  \n","4          0.299771   EEG_Test0_5  \n","..              ...           ...  \n","211        0.378527  EEG_Test26_4  \n","212        0.257632  EEG_Test26_5  \n","213        0.374842  EEG_Test26_6  \n","214        0.310306  EEG_Test26_7  \n","215        0.370687  EEG_Test26_8  \n","\n","[200 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-8a271ff1-a70a-4309-b658-38d50ed87674\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>211</td>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>EEG_Test26_4</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>212</td>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>EEG_Test26_5</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>213</td>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>EEG_Test26_6</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>214</td>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>EEG_Test26_7</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>215</td>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>EEG_Test26_8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a271ff1-a70a-4309-b658-38d50ed87674')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8a271ff1-a70a-4309-b658-38d50ed87674 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8a271ff1-a70a-4309-b658-38d50ed87674');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6d1887d0-6dad-4b81-ad20-31692f1649b4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d1887d0-6dad-4b81-ad20-31692f1649b4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6d1887d0-6dad-4b81-ad20-31692f1649b4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4afdf459-cbf9-4cc0-b39b-d342cc4efc32\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4afdf459-cbf9-4cc0-b39b-d342cc4efc32 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["metadata=pd.read_excel(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv-based-Data/Demographic Details of Participants.xlsx\")\n","metadata.columns=[\n","    \"User ID\", \"Age\", \"Gender\", \"Dominant Hand\", \"Date / Time\",\n","    \"Video ID 1\", \"Video ID 2\", \"Date / Time\", \"Video ID 3\", \"Video ID 4\"]\n","metadata.head()"],"metadata":{"id":"1KBh-AYiq5J6","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879318307,"user_tz":240,"elapsed":2275,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"d21edcfa-4391-4e9e-d739-313b436b2f9e"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Age  Gender Dominant Hand            Date / Time  Video ID 1  \\\n","0   Test0   27    Male         Right  08/18/2019/2:00:00 PM          15   \n","1   Test1   24    Male         Right  08/18/2019/3:20:00 PM           5   \n","2   test2   30  Female         Right  08/19/2019/4:20:00 PM           8   \n","3   test3   25    Male         Right  08/20/2019/1:28:00 PM          14   \n","4   test4   24    Male          Left  08/21/2019/3:20:00 PM          12   \n","\n","   Video ID 2            Date / Time  Video ID 3  Video ID 4  \n","0           8  08/23/2019/3:40:00 PM         2.0        11.0  \n","1           5  08/22/2019/4:30:00 PM         9.0         5.0  \n","2          11  08/20/2019/4:40:00 PM         5.0         2.0  \n","3           7  08/28/2019/3:15:00 PM        15.0         1.0  \n","4           6  08/30/2019/5:10:00 PM        15.0        19.0  "],"text/html":["\n","  <div id=\"df-4d4f6123-6943-4312-bf51-2ba78a70af81\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Dominant Hand</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>27</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/2:00:00 PM</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>08/23/2019/3:40:00 PM</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/3:20:00 PM</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>08/22/2019/4:30:00 PM</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>30</td>\n","      <td>Female</td>\n","      <td>Right</td>\n","      <td>08/19/2019/4:20:00 PM</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>08/20/2019/4:40:00 PM</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>25</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/20/2019/1:28:00 PM</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>08/28/2019/3:15:00 PM</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Left</td>\n","      <td>08/21/2019/3:20:00 PM</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>08/30/2019/5:10:00 PM</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d4f6123-6943-4312-bf51-2ba78a70af81')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4d4f6123-6943-4312-bf51-2ba78a70af81 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4d4f6123-6943-4312-bf51-2ba78a70af81');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-72fe7eca-0cf7-4b38-83be-6a94ca93892d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72fe7eca-0cf7-4b38-83be-6a94ca93892d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-72fe7eca-0cf7-4b38-83be-6a94ca93892d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata","summary":"{\n  \"name\": \"metadata\",\n  \"rows\": 28,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"test9\",\n          \"test25\",\n          \"test8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 19,\n        \"max\": 31,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          19,\n          27,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dominant Hand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Left\",\n          \"Right\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"08/28/2019/2:00:00 PM\",\n          \"09/25/2019/3:35:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          3,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"09.25/2019/4:45:00 PM\",\n          \"09/17/2019/8:05:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["metadata_video_id=metadata[[\"User ID\",\"Video ID 1\", \"Video ID 2\", \"Video ID 3\", \"Video ID 4\"]]\n","metadata_video_id=metadata_video_id.dropna()\n","metadata_video_id.head()"],"metadata":{"id":"yYFBOP20rO_M","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879318307,"user_tz":240,"elapsed":6,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"3b25d887-9b31-44c3-92b1-6e35c16e16b7"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Video ID 1  Video ID 2  Video ID 3  Video ID 4\n","0   Test0          15           8         2.0        11.0\n","1   Test1           5           5         9.0         5.0\n","2   test2           8          11         5.0         2.0\n","3   test3          14           7        15.0         1.0\n","4   test4          12           6        15.0        19.0"],"text/html":["\n","  <div id=\"df-44bee1e7-3c81-44db-b2f0-33216acae93f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44bee1e7-3c81-44db-b2f0-33216acae93f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-44bee1e7-3c81-44db-b2f0-33216acae93f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-44bee1e7-3c81-44db-b2f0-33216acae93f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e96957c6-2cd4-4dcc-ad39-bcaf805b8905\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e96957c6-2cd4-4dcc-ad39-bcaf805b8905')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e96957c6-2cd4-4dcc-ad39-bcaf805b8905 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata_video_id","summary":"{\n  \"name\": \"metadata_video_id\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"test8\",\n          \"test16\",\n          \"Test0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          13,\n          10,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# add Emotion column\n","metadata_video_id_list = metadata_video_id.drop('User ID', axis=1).values.flatten().tolist()\n","metadata_video_id_list = [int(item) for item in metadata_video_id_list for _ in range(2)] #to int and double the time\n","metadata_video_id_list = [1 if item in [1,2,5,6,13,14,15,16,17,18] else 0 for item in metadata_video_id_list] #map\n","df_time_filtered[\"Emotion\"]=metadata_video_id_list\n","# len(metadata_video_id_list)\n","# metadata_video_id_list"],"metadata":{"id":"V8FlGgG1txp-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879318307,"user_tz":240,"elapsed":4,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"3b3c726b-4657-4bcc-fb2c-2d322cd944a9"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-00e5abdab353>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_time_filtered[\"Emotion\"]=metadata_video_id_list\n"]}]},{"cell_type":"code","source":["# metadata_video_id_list"],"metadata":{"id":"xV9T1cMerrw4","executionInfo":{"status":"ok","timestamp":1713879318307,"user_tz":240,"elapsed":4,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Drop \"Unnamed: 0\",\"Test\" columns\n","df_time_filtered=df_time_filtered.drop(columns=[\"Unnamed: 0\",\"Test\"])\n","df_time_filtered"],"metadata":{"id":"I_O0ca9vvdgL","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879319184,"user_tz":240,"elapsed":880,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"78dce48f-462f-4eaa-948d-4762196b5d16"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4  Emotion  \n","0          0.414635        1  \n","1          0.421499        1  \n","2          0.406884        0  \n","3          0.373620        0  \n","4          0.299771        1  \n","..              ...      ...  \n","211        0.378527        1  \n","212        0.257632        0  \n","213        0.374842        0  \n","214        0.310306        1  \n","215        0.370687        1  \n","\n","[200 rows x 197 columns]"],"text/html":["\n","  <div id=\"df-4955807e-22e7-4c16-9ece-9114b22612f4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 197 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4955807e-22e7-4c16-9ece-9114b22612f4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4955807e-22e7-4c16-9ece-9114b22612f4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4955807e-22e7-4c16-9ece-9114b22612f4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ea7ce91a-2ce1-445d-920b-5e0f4d26106a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea7ce91a-2ce1-445d-920b-5e0f4d26106a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ea7ce91a-2ce1-445d-920b-5e0f4d26106a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2a3b55e7-aa07-4815-90ce-9ce1ade1027f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2a3b55e7-aa07-4815-90ce-9ce1ade1027f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["## Train Test Split Method"],"metadata":{"id":"KhNaOZ0ox9TQ"}},{"cell_type":"code","source":["folder = [num for num in range(1, 26) for _ in range(8)]\n","df_time_filtered[\"Folder\"]=folder\n","df_time_filtered"],"metadata":{"id":"StPVCDaMw_uX","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1713879319356,"user_tz":240,"elapsed":174,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"37272717-024d-4fa4-d4c8-2966738453d8"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...  AF4_activity  AF4_mobility  AF4_complexity  AF4_ar_coeff_0  \\\n","0    ...   1955.207164      0.201175        5.853881        1.888919   \n","1    ...   4047.042955      0.181730        6.655339        1.869903   \n","2    ...    788.581256      0.362081        3.528739        1.719312   \n","3    ...  30770.363380      0.065568       16.047249        2.014694   \n","4    ...   9459.787110      0.097349       11.212047        1.916121   \n","..   ...           ...           ...             ...             ...   \n","211  ...   1341.930166      0.288382        4.671318        1.619370   \n","212  ...   2125.336360      0.194158        6.114867        1.799081   \n","213  ...   4823.841089      0.127178        9.549253        1.850852   \n","214  ...   1804.680486      0.212828        5.879350        1.683692   \n","215  ...    778.759752      0.278193        4.402478        1.824404   \n","\n","     AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  AF4_ar_coeff_4  Emotion  \\\n","0         -1.916397        1.774889       -1.162047        0.414635        1   \n","1         -1.917447        1.803922       -1.177878        0.421499        1   \n","2         -1.716449        1.651069       -1.060818        0.406884        0   \n","3         -1.962541        1.826205       -1.251982        0.373620        0   \n","4         -1.784461        1.639423       -1.070856        0.299771        1   \n","..              ...             ...             ...             ...      ...   \n","211       -1.575834        1.591902       -1.013965        0.378527        1   \n","212       -1.684543        1.536058       -0.908229        0.257632        0   \n","213       -1.822298        1.738571       -1.141967        0.374842        0   \n","214       -1.604122        1.484709       -0.874587        0.310306        1   \n","215       -1.814688        1.714828       -1.095232        0.370687        1   \n","\n","     Folder  \n","0         1  \n","1         1  \n","2         1  \n","3         1  \n","4         1  \n","..      ...  \n","211      25  \n","212      25  \n","213      25  \n","214      25  \n","215      25  \n","\n","[200 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-8d568ed2-563c-4237-8f3b-0ca053644396\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d568ed2-563c-4237-8f3b-0ca053644396')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d568ed2-563c-4237-8f3b-0ca053644396 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d568ed2-563c-4237-8f3b-0ca053644396');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9fe03ae6-8798-4e94-a2ee-260ff181fdca\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9fe03ae6-8798-4e94-a2ee-260ff181fdca')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9fe03ae6-8798-4e94-a2ee-260ff181fdca button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_df1983ad-c87d-4002-9714-3731cc44a8a5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_df1983ad-c87d-4002-9714-3731cc44a8a5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# to make sure the same fold is use as train and test for different model\n","import random\n","folder_names = [i for i in range(1, 27)]\n","\n","# Shuffle the folder names to ensure random distribution\n","random.shuffle(folder_names)\n","\n","# Calculate the indices for the 80-20 split\n","train_split = int(0.8 * len(folder_names))  # 80% for training\n","\n","# Split the folders into training, validation, and testing sets\n","train_folders = folder_names[:train_split]\n","# valid_folders = folder_names[train_split:valid_split]\n","test_folders = folder_names[train_split:]\n","\n","print(train_folders)\n","print(test_folders)"],"metadata":{"id":"5mb1IS2BLSxs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879319356,"user_tz":240,"elapsed":3,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"ad1ba07e-f91e-48d4-a533-6f0829a68caa"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[22, 1, 12, 4, 13, 19, 25, 2, 9, 23, 18, 7, 3, 5, 21, 15, 8, 14, 10, 20]\n","[26, 24, 16, 17, 11, 6]\n"]}]},{"cell_type":"code","source":["train_time = df_time_filtered[df_time_filtered['Folder'].isin(train_folders)]\n","X_train_time =train_time.iloc[:,:-2]\n","y_train_time=train_time.iloc[:,-2]\n","\n","test_time = df_time_filtered[df_time_filtered['Folder'].isin(test_folders)]\n","X_test_time =test_time.iloc[:,:-2]\n","y_test_time=test_time.iloc[:,-2]\n","\n","# val = df_time_filtered[df_time_filtered['Folder'].isin(valid_folders)]\n","# X_val =val.iloc[:,:-2]\n","# y_val=val.iloc[:,-2]"],"metadata":{"id":"Mxc1Hz21zArD","executionInfo":{"status":"ok","timestamp":1713879319356,"user_tz":240,"elapsed":2,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["## DNN model + Cross Validation"],"metadata":{"id":"eO5N8iqsydZu"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import accuracy_score\n","from tensorflow.keras.callbacks import LambdaCallback\n","\n","\n","# First, let's create a function to define the neural network\n","def create_model(input_shape):\n","    # Define the model\n","    model = Sequential()\n","    model.add(Dense(64, input_shape=(input_shape,), activation='relu'))\n","    model.add(Dense(32, activation='relu'))\n","    model.add(Dense(1, activation='sigmoid'))\n","    # Compile the model\n","    model.compile(optimizer=Adam(learning_rate=0.001),\n","                  loss='binary_crossentropy',\n","                  metrics=['accuracy'])\n","    return model\n","\n","batch_size=64\n","fold=5"],"metadata":{"id":"HDUZQ9465vyp","executionInfo":{"status":"ok","timestamp":1713879332008,"user_tz":240,"elapsed":12654,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# type(X_train_cv['AF3_mean'][0])"],"metadata":{"id":"E9WjiRKDArI5","executionInfo":{"status":"ok","timestamp":1713879332009,"user_tz":240,"elapsed":24,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# X_train_cv['Test']"],"metadata":{"id":"MF9ed_klBqla","executionInfo":{"status":"ok","timestamp":1713879332009,"user_tz":240,"elapsed":21,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# # Now we will perform cross-validation\n","# # Prepare full dataset\n","# X_full = df_time_filtered.iloc[:, :-2]\n","# y_full = df_time_filtered.iloc[:, -2]\n","\n","# # Initialize KFold\n","# kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# To store scores\n","cv_scores = []\n","best_model_time = 0\n","best_accuracy_time = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders\n","\n","# for train_index, val_index in kf.split(X_full, y_full):\n","#     # Create data for this fold\n","#     X_train_fold, X_val_fold = X_full.iloc[train_index], X_full.iloc[val_index]\n","#     y_train_fold, y_val_fold = y_full.iloc[train_index], y_full.iloc[val_index]\n","for i in range(fold): # No.of fold cross validation\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_time[train_time['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_time[train_time['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_time = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_time.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_time.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_time:\n","        best_accuracy_time = val_accuracy\n","        best_model_time = model_time\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_time * 100:.2f}%\")\n"],"metadata":{"id":"yuYTv6L1ycN1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879363135,"user_tz":240,"elapsed":31147,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"8b2442d4-c4ad-45f5-d3aa-cd2604c97812"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 72.6835, Accuracy: 0.7153\n","Epoch: 40, Loss: 44.5580, Accuracy: 0.7986\n","Epoch: 60, Loss: 9.4116, Accuracy: 0.8889\n","Epoch: 80, Loss: 78.2561, Accuracy: 0.7569\n","Epoch: 100, Loss: 14.8122, Accuracy: 0.8958\n","1/1 [==============================] - 0s 93ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 20.4777, Accuracy: 0.7361\n","Epoch: 40, Loss: 2.2657, Accuracy: 0.8750\n","Epoch: 60, Loss: 1.1519, Accuracy: 0.9306\n","Epoch: 80, Loss: 1.1092, Accuracy: 0.9236\n","Epoch: 100, Loss: 0.6844, Accuracy: 0.9444\n","1/1 [==============================] - 0s 66ms/step\n","Fold completed. Validation accuracy: 31.25%\n","Epoch: 20, Loss: 45.4469, Accuracy: 0.7847\n","Epoch: 40, Loss: 4.5188, Accuracy: 0.9306\n","Epoch: 60, Loss: 18.0176, Accuracy: 0.8958\n","Epoch: 80, Loss: 1.2630, Accuracy: 0.9722\n","Epoch: 100, Loss: 5.7727, Accuracy: 0.9375\n","1/1 [==============================] - 0s 73ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Epoch: 20, Loss: 23.9413, Accuracy: 0.8194\n","Epoch: 40, Loss: 13.9256, Accuracy: 0.8681\n","Epoch: 60, Loss: 12.8661, Accuracy: 0.9028\n","Epoch: 80, Loss: 0.9241, Accuracy: 0.9653\n","Epoch: 100, Loss: 4.3017, Accuracy: 0.9375\n","1/1 [==============================] - 0s 63ms/step\n","Fold completed. Validation accuracy: 31.25%\n","Epoch: 20, Loss: 14.3401, Accuracy: 0.8542\n","Epoch: 40, Loss: 4.9994, Accuracy: 0.9167\n","Epoch: 60, Loss: 2.6663, Accuracy: 0.9514\n","Epoch: 80, Loss: 0.0000, Accuracy: 1.0000\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7fbb0f5d9b40> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["Epoch: 100, Loss: 0.0000, Accuracy: 1.0000\n","1/1 [==============================] - 0s 66ms/step\n","Fold completed. Validation accuracy: 68.75%\n","Best validation accuracy: 68.75%\n"]}]},{"cell_type":"code","source":["print(train_folders_cv)\n","print(val_folders_cv)"],"metadata":{"id":"TUloIrue5fqP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879363135,"user_tz":240,"elapsed":26,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"a428886b-933a-4da5-a9d9-9a21c16caf62"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[20, 4, 9, 5, 8, 23, 10, 2, 12, 21, 18, 19, 15, 25, 22, 1, 3, 14]\n","[7, 13]\n"]}]},{"cell_type":"markdown","source":["# Frequency Domain Data"],"metadata":{"id":"AITEbGtc9LeP"}},{"cell_type":"markdown","source":["## Load Data"],"metadata":{"id":"sCvlTL6N9QO_"}},{"cell_type":"code","source":["df_frequency=pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/frequency_domain_features\")"],"metadata":{"id":"bYk5wPAn9OTg","executionInfo":{"status":"ok","timestamp":1713879363135,"user_tz":240,"elapsed":23,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["rows_to_drop = ['Test20', 'Test21', 'Test27']\n","df_frequency_filtered = df_frequency[~df_frequency['Test'].str.contains('|'.join(rows_to_drop))]\n","df_frequency_filtered.head()"],"metadata":{"id":"YL_L4NyK9U6B","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879363135,"user_tz":240,"elapsed":22,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"dbcfa023-da32-4f43-8ae7-70f037377de1"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0  AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  \\\n","0           0       742.183654        91.890818        29.103071   \n","1           1       814.217772       115.616427        33.692698   \n","2           2       333.443681        56.892036        17.542342   \n","3           3       972.444483        96.292971        21.770639   \n","4           4       679.511986       114.487260        25.583073   \n","\n","   AF3_Beta_power  AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  \\\n","0       39.086906        14.159668              3.392576    19380.110107   \n","1       52.126272        22.004420              3.517422     2473.146474   \n","2       37.008188        18.740256              4.115038     1400.052844   \n","3       34.067561        19.333383              2.063286    15797.879384   \n","4       32.942404        14.063132              3.881328      292.466213   \n","\n","   F7_Theta_power  F7_Alpha_power  ...  F8_Beta_power  F8_Gamma_power  \\\n","0     1675.854975      993.004181  ...    1827.793507      372.815243   \n","1      137.999940       28.948250  ...      50.502736       18.238877   \n","2      297.329986      160.979736  ...     246.406774       58.009400   \n","3     1250.494293      492.593757  ...     173.137554       37.285689   \n","4       38.358567       10.211787  ...      36.050785       14.784819   \n","\n","   F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  \\\n","0             2.927640       722.066811        73.374318        26.934085   \n","1             3.321144       988.999364       104.930425        34.668521   \n","2             3.251759       439.611659        62.292803        21.426163   \n","3             2.788485      6092.273632       235.566933        47.641229   \n","4             3.466234      2339.739461       143.981679        26.881912   \n","\n","   AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy         Test  \n","0       39.510158        12.868163              3.228577  EEG_Test0_1  \n","1       50.649449        20.801604              2.722334  EEG_Test0_2  \n","2       42.629270        21.327653              3.976593  EEG_Test0_3  \n","3       44.089441        18.788212              2.098816  EEG_Test0_4  \n","4       31.913806        12.180580              2.435904  EEG_Test0_5  \n","\n","[5 rows x 86 columns]"],"text/html":["\n","  <div id=\"df-cbfbf859-5389-4bad-bc62-2f1e56721656\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>...</th>\n","      <th>F8_Beta_power</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>...</td>\n","      <td>1827.793507</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>...</td>\n","      <td>50.502736</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>...</td>\n","      <td>246.406774</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>...</td>\n","      <td>173.137554</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>...</td>\n","      <td>36.050785</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 86 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbfbf859-5389-4bad-bc62-2f1e56721656')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cbfbf859-5389-4bad-bc62-2f1e56721656 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cbfbf859-5389-4bad-bc62-2f1e56721656');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7207d61f-6ee5-400a-bd7b-f7e32d9cbb59\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7207d61f-6ee5-400a-bd7b-f7e32d9cbb59')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7207d61f-6ee5-400a-bd7b-f7e32d9cbb59 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# add Emotion column\n","df_frequency_filtered[\"Emotion\"]=metadata_video_id_list\n","# Drop \"Unnamed: 0\",\"Test\" columns\n","df_frequency_filtered=df_frequency_filtered.drop(columns=[\"Unnamed: 0\",\"Test\"])\n","df_frequency_filtered"],"metadata":{"id":"seLQLjhK-My_","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879363135,"user_tz":240,"elapsed":21,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"50ff9974-c0b9-46fc-f54e-caed34587578"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-21-dfb13a3777e7>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_frequency_filtered[\"Emotion\"]=metadata_video_id_list\n"]},{"output_type":"execute_result","data":{"text/plain":["     AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  AF3_Beta_power  \\\n","0         742.183654        91.890818        29.103071       39.086906   \n","1         814.217772       115.616427        33.692698       52.126272   \n","2         333.443681        56.892036        17.542342       37.008188   \n","3         972.444483        96.292971        21.770639       34.067561   \n","4         679.511986       114.487260        25.583073       32.942404   \n","..               ...              ...              ...             ...   \n","211      3988.090799        66.729897        26.714639       52.603418   \n","212       328.027554        24.065557        12.305281       11.390863   \n","213       196.552634        22.197301        10.330547       11.698973   \n","214       125.616279        14.811609        14.844813       13.978226   \n","215       178.529334        19.035797         8.773452       10.335400   \n","\n","     AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  F7_Theta_power  \\\n","0          14.159668              3.392576    19380.110107     1675.854975   \n","1          22.004420              3.517422     2473.146474      137.999940   \n","2          18.740256              4.115038     1400.052844      297.329986   \n","3          19.333383              2.063286    15797.879384     1250.494293   \n","4          14.063132              3.881328      292.466213       38.358567   \n","..               ...                   ...             ...             ...   \n","211        17.757124              2.581967     1128.316705      100.116058   \n","212         4.855920              2.003684     1214.553582       67.621555   \n","213         5.910977              2.469211     2412.923177       94.241990   \n","214         6.082713              3.141940     1198.985129       74.641414   \n","215         5.122136              3.436121      859.856118       52.064562   \n","\n","     F7_Alpha_power  F7_Beta_power  ...  F8_Beta_power  F8_Gamma_power  \\\n","0        993.004181    1200.003919  ...    1827.793507      372.815243   \n","1         28.948250      35.874422  ...      50.502736       18.238877   \n","2        160.979736     296.967472  ...     246.406774       58.009400   \n","3        492.593757     492.119875  ...     173.137554       37.285689   \n","4         10.211787      19.628216  ...      36.050785       14.784819   \n","..              ...            ...  ...            ...             ...   \n","211       25.147104      78.176664  ...     101.401419       55.028680   \n","212       24.157729      25.644321  ...      23.522324       10.241707   \n","213       34.393498      61.537160  ...      33.520476       14.401712   \n","214       33.214891      36.852710  ...      22.146428       11.727418   \n","215       17.522062      24.804552  ...      17.242093        9.168454   \n","\n","     F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  \\\n","0               2.927640       722.066811        73.374318        26.934085   \n","1               3.321144       988.999364       104.930425        34.668521   \n","2               3.251759       439.611659        62.292803        21.426163   \n","3               2.788485      6092.273632       235.566933        47.641229   \n","4               3.466234      2339.739461       143.981679        26.881912   \n","..                   ...              ...              ...              ...   \n","211             2.829569       549.013560        50.597313        19.869369   \n","212             3.310003       806.514682        67.316092        34.419324   \n","213             2.614483       929.661063        66.896045        27.174102   \n","214             2.334435       346.849914        31.735962        34.137930   \n","215             3.958936       429.863409        47.130917        20.924372   \n","\n","     AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy  Emotion  \n","0         39.510158        12.868163              3.228577        1  \n","1         50.649449        20.801604              2.722334        1  \n","2         42.629270        21.327653              3.976593        0  \n","3         44.089441        18.788212              2.098816        0  \n","4         31.913806        12.180580              2.435904        1  \n","..              ...              ...                   ...      ...  \n","211       32.719328        26.388016              3.308674        1  \n","212       31.208080        14.308119              3.121754        0  \n","213       28.494446        13.939820              2.230978        0  \n","214       32.800019        15.050338              2.446117        1  \n","215       23.692223        11.364165              3.710480        1  \n","\n","[200 rows x 85 columns]"],"text/html":["\n","  <div id=\"df-bf3bbd5e-3ff8-41b4-bc2b-a87d2095cd7b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>F7_Beta_power</th>\n","      <th>...</th>\n","      <th>F8_Beta_power</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>1200.003919</td>\n","      <td>...</td>\n","      <td>1827.793507</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>35.874422</td>\n","      <td>...</td>\n","      <td>50.502736</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>296.967472</td>\n","      <td>...</td>\n","      <td>246.406774</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>492.119875</td>\n","      <td>...</td>\n","      <td>173.137554</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>19.628216</td>\n","      <td>...</td>\n","      <td>36.050785</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>3988.090799</td>\n","      <td>66.729897</td>\n","      <td>26.714639</td>\n","      <td>52.603418</td>\n","      <td>17.757124</td>\n","      <td>2.581967</td>\n","      <td>1128.316705</td>\n","      <td>100.116058</td>\n","      <td>25.147104</td>\n","      <td>78.176664</td>\n","      <td>...</td>\n","      <td>101.401419</td>\n","      <td>55.028680</td>\n","      <td>2.829569</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>328.027554</td>\n","      <td>24.065557</td>\n","      <td>12.305281</td>\n","      <td>11.390863</td>\n","      <td>4.855920</td>\n","      <td>2.003684</td>\n","      <td>1214.553582</td>\n","      <td>67.621555</td>\n","      <td>24.157729</td>\n","      <td>25.644321</td>\n","      <td>...</td>\n","      <td>23.522324</td>\n","      <td>10.241707</td>\n","      <td>3.310003</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>196.552634</td>\n","      <td>22.197301</td>\n","      <td>10.330547</td>\n","      <td>11.698973</td>\n","      <td>5.910977</td>\n","      <td>2.469211</td>\n","      <td>2412.923177</td>\n","      <td>94.241990</td>\n","      <td>34.393498</td>\n","      <td>61.537160</td>\n","      <td>...</td>\n","      <td>33.520476</td>\n","      <td>14.401712</td>\n","      <td>2.614483</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>125.616279</td>\n","      <td>14.811609</td>\n","      <td>14.844813</td>\n","      <td>13.978226</td>\n","      <td>6.082713</td>\n","      <td>3.141940</td>\n","      <td>1198.985129</td>\n","      <td>74.641414</td>\n","      <td>33.214891</td>\n","      <td>36.852710</td>\n","      <td>...</td>\n","      <td>22.146428</td>\n","      <td>11.727418</td>\n","      <td>2.334435</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>178.529334</td>\n","      <td>19.035797</td>\n","      <td>8.773452</td>\n","      <td>10.335400</td>\n","      <td>5.122136</td>\n","      <td>3.436121</td>\n","      <td>859.856118</td>\n","      <td>52.064562</td>\n","      <td>17.522062</td>\n","      <td>24.804552</td>\n","      <td>...</td>\n","      <td>17.242093</td>\n","      <td>9.168454</td>\n","      <td>3.958936</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 85 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf3bbd5e-3ff8-41b4-bc2b-a87d2095cd7b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bf3bbd5e-3ff8-41b4-bc2b-a87d2095cd7b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bf3bbd5e-3ff8-41b4-bc2b-a87d2095cd7b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a2600750-081e-4aee-8c41-daeb465fb573\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a2600750-081e-4aee-8c41-daeb465fb573')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a2600750-081e-4aee-8c41-daeb465fb573 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2d030f2f-60c1-447b-a80b-f670ac9703ea\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_frequency_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2d030f2f-60c1-447b-a80b-f670ac9703ea button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_frequency_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["## Train Test Split"],"metadata":{"id":"eH5eSZ58-nMC"}},{"cell_type":"code","source":["# Assign Folder\n","df_frequency_filtered[\"Folder\"]=folder\n","df_frequency_filtered.head()"],"metadata":{"id":"1_VzOgLz-pdF","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879363136,"user_tz":240,"elapsed":21,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"66f86026-8169-4f27-f7f7-738fd60b3a25"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  AF3_Beta_power  \\\n","0       742.183654        91.890818        29.103071       39.086906   \n","1       814.217772       115.616427        33.692698       52.126272   \n","2       333.443681        56.892036        17.542342       37.008188   \n","3       972.444483        96.292971        21.770639       34.067561   \n","4       679.511986       114.487260        25.583073       32.942404   \n","\n","   AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  F7_Theta_power  \\\n","0        14.159668              3.392576    19380.110107     1675.854975   \n","1        22.004420              3.517422     2473.146474      137.999940   \n","2        18.740256              4.115038     1400.052844      297.329986   \n","3        19.333383              2.063286    15797.879384     1250.494293   \n","4        14.063132              3.881328      292.466213       38.358567   \n","\n","   F7_Alpha_power  F7_Beta_power  ...  F8_Gamma_power  F8_spectral_entropy  \\\n","0      993.004181    1200.003919  ...      372.815243             2.927640   \n","1       28.948250      35.874422  ...       18.238877             3.321144   \n","2      160.979736     296.967472  ...       58.009400             3.251759   \n","3      492.593757     492.119875  ...       37.285689             2.788485   \n","4       10.211787      19.628216  ...       14.784819             3.466234   \n","\n","   AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  AF4_Beta_power  \\\n","0       722.066811        73.374318        26.934085       39.510158   \n","1       988.999364       104.930425        34.668521       50.649449   \n","2       439.611659        62.292803        21.426163       42.629270   \n","3      6092.273632       235.566933        47.641229       44.089441   \n","4      2339.739461       143.981679        26.881912       31.913806   \n","\n","   AF4_Gamma_power  AF4_spectral_entropy  Emotion  Folder  \n","0        12.868163              3.228577        1       1  \n","1        20.801604              2.722334        1       1  \n","2        21.327653              3.976593        0       1  \n","3        18.788212              2.098816        0       1  \n","4        12.180580              2.435904        1       1  \n","\n","[5 rows x 86 columns]"],"text/html":["\n","  <div id=\"df-123aa509-6e15-4d43-ab17-3a2e75362b6d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>F7_Beta_power</th>\n","      <th>...</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>1200.003919</td>\n","      <td>...</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>35.874422</td>\n","      <td>...</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>296.967472</td>\n","      <td>...</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>492.119875</td>\n","      <td>...</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>19.628216</td>\n","      <td>...</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 86 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-123aa509-6e15-4d43-ab17-3a2e75362b6d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-123aa509-6e15-4d43-ab17-3a2e75362b6d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-123aa509-6e15-4d43-ab17-3a2e75362b6d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-583eb28f-be2c-4bb5-b4c3-60b1816a4cdc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-583eb28f-be2c-4bb5-b4c3-60b1816a4cdc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-583eb28f-be2c-4bb5-b4c3-60b1816a4cdc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["train_frequency = df_frequency_filtered[df_frequency_filtered['Folder'].isin(train_folders)]\n","X_train_frequency =train_frequency.iloc[:,:-2]\n","y_train_frequency=train_frequency.iloc[:,-2]\n","\n","test_frequency = df_frequency_filtered[df_frequency_filtered['Folder'].isin(test_folders)]\n","X_test_frequency =test_frequency.iloc[:,:-2]\n","y_test_frequency=test_frequency.iloc[:,-2]\n","# X_test_frequency"],"metadata":{"id":"WYqquE1U-6mN","executionInfo":{"status":"ok","timestamp":1713879363136,"user_tz":240,"elapsed":20,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["## DNN model + Cross Validation"],"metadata":{"id":"L2J6YWXp_JFS"}},{"cell_type":"code","source":["# To store scores and keep track of the best model\n","cv_scores_frequency = []\n","best_model_frequency = None\n","best_accuracy_frequency = 0  # Initialize best accuracy to zero\n","train_folders_name = train_folders.copy()  # Create a copy to shuffle and split\n","\n","for i in range(fold):\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","\n","    # Split the folders into training and validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","\n","    # Filter data for training and validation sets\n","    train_cv = df_frequency_filtered[df_frequency_filtered['Folder'].isin(train_folders_cv)]\n","    X_train_cv = train_cv.iloc[:, :-2]\n","    y_train_cv = train_cv.iloc[:, -2]\n","\n","    val_cv = df_frequency_filtered[df_frequency_filtered['Folder'].isin(val_folders_cv)]\n","    X_val_cv = val_cv.iloc[:, :-2]\n","    y_val_cv = val_cv.iloc[:, -2]\n","\n","    # Define the model\n","    model_frequency = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_frequency.fit(X_train_cv, y_train_cv,\n","                                  epochs=100,  # Consider increasing epochs\n","                                  batch_size=batch_size,\n","                                  verbose=0,\n","                                  callbacks=[print_callback],\n","                                  validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_frequency.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores_frequency.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_frequency:\n","        best_accuracy_frequency = val_accuracy\n","        best_model_frequency = model_frequency\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_frequency * 100:.2f}%\")\n","\n","# Optionally, save the best model\n","if best_model_frequency:\n","    best_model_frequency.save('best_model_frequency.h5')\n"],"metadata":{"id":"E08HRLZYOPDj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879392121,"user_tz":240,"elapsed":29005,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"00803b03-bd95-4fce-85c9-c0f0e0a2cf73"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 14.3352, Accuracy: 0.6944\n","Epoch: 40, Loss: 4.9200, Accuracy: 0.8264\n","Epoch: 60, Loss: 0.7218, Accuracy: 0.9028\n","Epoch: 80, Loss: 0.6632, Accuracy: 0.9583\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7fbb7dac39a0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["Epoch: 100, Loss: 0.3166, Accuracy: 0.9653\n","1/1 [==============================] - 0s 92ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 10.0015, Accuracy: 0.7153\n","Epoch: 40, Loss: 1.5475, Accuracy: 0.8750\n","Epoch: 60, Loss: 0.3003, Accuracy: 0.9653\n","Epoch: 80, Loss: 0.0439, Accuracy: 0.9931\n","Epoch: 100, Loss: 0.0046, Accuracy: 1.0000\n","1/1 [==============================] - 0s 66ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 6.1011, Accuracy: 0.7708\n","Epoch: 40, Loss: 1.5641, Accuracy: 0.8403\n","Epoch: 60, Loss: 0.3472, Accuracy: 0.9583\n","Epoch: 80, Loss: 0.2117, Accuracy: 0.9653\n","Epoch: 100, Loss: 0.2927, Accuracy: 0.9653\n","1/1 [==============================] - 0s 110ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Epoch: 20, Loss: 9.2224, Accuracy: 0.7708\n","Epoch: 40, Loss: 2.0898, Accuracy: 0.8889\n","Epoch: 60, Loss: 0.6918, Accuracy: 0.9306\n","Epoch: 80, Loss: 0.1804, Accuracy: 0.9653\n","Epoch: 100, Loss: 0.3523, Accuracy: 0.9653\n","1/1 [==============================] - 0s 61ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 7.1489, Accuracy: 0.8472\n","Epoch: 40, Loss: 1.2153, Accuracy: 0.8889\n","Epoch: 60, Loss: 0.1597, Accuracy: 0.9722\n","Epoch: 80, Loss: 0.7693, Accuracy: 0.9097\n","Epoch: 100, Loss: 0.0530, Accuracy: 0.9861\n","1/1 [==============================] - 0s 64ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Best validation accuracy: 56.25%\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["# Time Frequency Together"],"metadata":{"id":"yNwkLR--TjAY"}},{"cell_type":"markdown","source":["## Concatenate Data"],"metadata":{"id":"KZRYW7_6Y2X6"}},{"cell_type":"code","source":["df_time_filtered_incomplete=df_time_filtered.iloc[:,:-2]\n","df_time_frequency=pd.concat([df_time_filtered_incomplete, df_frequency_filtered], axis=1)\n","df_time_frequency"],"metadata":{"id":"6kZ6R5FKUKEA","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1713879392122,"user_tz":240,"elapsed":32,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"ba08a624-2167-4d8c-a499-bff6d5863a9a"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...  F8_Gamma_power  F8_spectral_entropy  AF4_Delta_power  \\\n","0    ...      372.815243             2.927640       722.066811   \n","1    ...       18.238877             3.321144       988.999364   \n","2    ...       58.009400             3.251759       439.611659   \n","3    ...       37.285689             2.788485      6092.273632   \n","4    ...       14.784819             3.466234      2339.739461   \n","..   ...             ...                  ...              ...   \n","211  ...       55.028680             2.829569       549.013560   \n","212  ...       10.241707             3.310003       806.514682   \n","213  ...       14.401712             2.614483       929.661063   \n","214  ...       11.727418             2.334435       346.849914   \n","215  ...        9.168454             3.958936       429.863409   \n","\n","     AF4_Theta_power  AF4_Alpha_power  AF4_Beta_power  AF4_Gamma_power  \\\n","0          73.374318        26.934085       39.510158        12.868163   \n","1         104.930425        34.668521       50.649449        20.801604   \n","2          62.292803        21.426163       42.629270        21.327653   \n","3         235.566933        47.641229       44.089441        18.788212   \n","4         143.981679        26.881912       31.913806        12.180580   \n","..               ...              ...             ...              ...   \n","211        50.597313        19.869369       32.719328        26.388016   \n","212        67.316092        34.419324       31.208080        14.308119   \n","213        66.896045        27.174102       28.494446        13.939820   \n","214        31.735962        34.137930       32.800019        15.050338   \n","215        47.130917        20.924372       23.692223        11.364165   \n","\n","     AF4_spectral_entropy  Emotion  Folder  \n","0                3.228577        1       1  \n","1                2.722334        1       1  \n","2                3.976593        0       1  \n","3                2.098816        0       1  \n","4                2.435904        1       1  \n","..                    ...      ...     ...  \n","211              3.308674        1      25  \n","212              3.121754        0      25  \n","213              2.230978        0      25  \n","214              2.446117        1      25  \n","215              3.710480        1      25  \n","\n","[200 rows x 282 columns]"],"text/html":["\n","  <div id=\"df-039aef41-d0b9-4ed7-a5e1-182efe4f525f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>55.028680</td>\n","      <td>2.829569</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>10.241707</td>\n","      <td>3.310003</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>14.401712</td>\n","      <td>2.614483</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>11.727418</td>\n","      <td>2.334435</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>9.168454</td>\n","      <td>3.958936</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 282 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-039aef41-d0b9-4ed7-a5e1-182efe4f525f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-039aef41-d0b9-4ed7-a5e1-182efe4f525f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-039aef41-d0b9-4ed7-a5e1-182efe4f525f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ad451a7a-8c29-4896-8cb4-5ed044d94168\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad451a7a-8c29-4896-8cb4-5ed044d94168')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ad451a7a-8c29-4896-8cb4-5ed044d94168 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_dab6d373-3fc6-47f1-8fe5-85421ffa3a45\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_frequency')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_dab6d373-3fc6-47f1-8fe5-85421ffa3a45 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_frequency');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_frequency"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# df_time_filtered.corr()"],"metadata":{"id":"m8brrsL-caCS","executionInfo":{"status":"ok","timestamp":1713879392122,"user_tz":240,"elapsed":27,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# import pandas as pd\n","# import seaborn as sns\n","# import matplotlib.pyplot as plt\n","\n","# # Assuming df_time_filtered is your DataFrame\n","# # Calculate the correlation matrix\n","# corr = df_time_filtered.corr()\n","\n","# # Set up the matplotlib figure\n","# plt.figure(figsize=(10, 8))\n","\n","# # Draw the heatmap with the mask and correct aspect ratio\n","# sns.heatmap(corr, cmap='coolwarm', square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n","\n","# # Add title\n","# plt.title('Correlation Matrix Heatmap')\n","\n","# # Show plot\n","# plt.show()\n"],"metadata":{"id":"TQDxMxdkc6aW","executionInfo":{"status":"ok","timestamp":1713879392123,"user_tz":240,"elapsed":27,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# df_frequency_filtered.corr()"],"metadata":{"id":"EhnXWlKPcmGB","executionInfo":{"status":"ok","timestamp":1713879392123,"user_tz":240,"elapsed":27,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# import pandas as pd\n","# import seaborn as sns\n","# import matplotlib.pyplot as plt\n","\n","# # Assuming df_time_filtered is your DataFrame\n","# # Calculate the correlation matrix\n","# corr = df_frequency_filtered.corr()\n","\n","# # Set up the matplotlib figure\n","# plt.figure(figsize=(10, 8))\n","\n","# # Draw the heatmap with the mask and correct aspect ratio\n","# sns.heatmap(corr, cmap='coolwarm', square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n","\n","# # Add title\n","# plt.title('Correlation Matrix Heatmap')\n","\n","# # Show plot\n","# plt.show()\n"],"metadata":{"id":"t_0tbQ_8c_Wm","executionInfo":{"status":"ok","timestamp":1713879392307,"user_tz":240,"elapsed":211,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# import pandas as pd\n","# import seaborn as sns\n","# import matplotlib.pyplot as plt\n","\n","# # Assuming df_time_filtered is your DataFrame\n","# # Calculate the correlation matrix\n","# corr = df_time_frequency.corr()\n","\n","# # Set up the matplotlib figure\n","# plt.figure(figsize=(10, 8))\n","\n","# # Draw the heatmap with the mask and correct aspect ratio\n","# sns.heatmap(corr, cmap='coolwarm', square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n","\n","# # Add title\n","# plt.title('Correlation Matrix Heatmap')\n","\n","# # Show plot\n","# plt.show()\n"],"metadata":{"id":"zyAwQh88dFTS","executionInfo":{"status":"ok","timestamp":1713879392308,"user_tz":240,"elapsed":2,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":["## Train test split"],"metadata":{"id":"B2qpOAqvUo2E"}},{"cell_type":"code","source":["train_time_frequency = df_time_frequency[df_time_frequency['Folder'].isin(train_folders)]\n","X_train_time_frequency =train_time_frequency.iloc[:,:-2]\n","y_train_time_frequency=train_time_frequency.iloc[:,-2]\n","\n","test_time_frequency = df_time_frequency[df_time_frequency['Folder'].isin(test_folders)]\n","X_test_time_frequency =test_time_frequency.iloc[:,:-2]\n","y_test_time_frequency=test_time_frequency.iloc[:,-2]"],"metadata":{"id":"yFcbe_CmUoCe","executionInfo":{"status":"ok","timestamp":1713879392308,"user_tz":240,"elapsed":2,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":31,"outputs":[]},{"cell_type":"markdown","source":["## DNN and CV"],"metadata":{"id":"x0pXAbDtU_pA"}},{"cell_type":"code","source":["# # Now we will perform cross-validation\n","# # Prepare full dataset\n","# X_full = df_time_filtered.iloc[:, :-2]\n","# y_full = df_time_filtered.iloc[:, -2]\n","\n","# # Initialize KFold\n","# kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# To store scores\n","cv_scores = []\n","best_model_time_frequency = 0\n","best_accuracy_time_frequency = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders.copy()\n","\n","\n","for i in range(fold): #5 fold cross validation\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_time_frequency[train_time_frequency['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_time_frequency[train_time_frequency['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_time_frequency = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_time_frequency.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_time_frequency.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_time_frequency:\n","        best_accuracy_time_frequency = val_accuracy\n","        best_model_time_frequency = model_time_frequency\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_time_frequency * 100:.2f}%\")\n"],"metadata":{"id":"MgnZbbiPVBfY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879425123,"user_tz":240,"elapsed":32817,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"140abdd4-e84c-4613-ce8c-e68fe5609089"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 15.1025, Accuracy: 0.8472\n","Epoch: 40, Loss: 3.6917, Accuracy: 0.9236\n","Epoch: 60, Loss: 0.7006, Accuracy: 0.9722\n","Epoch: 80, Loss: 0.0000, Accuracy: 1.0000\n","Epoch: 100, Loss: 0.0000, Accuracy: 1.0000\n","1/1 [==============================] - 0s 68ms/step\n","Fold completed. Validation accuracy: 62.50%\n","Epoch: 20, Loss: 18.5806, Accuracy: 0.8125\n","Epoch: 40, Loss: 3.8581, Accuracy: 0.9236\n","Epoch: 60, Loss: 1.8750, Accuracy: 0.9236\n","Epoch: 80, Loss: 0.0450, Accuracy: 0.9861\n","Epoch: 100, Loss: 0.8993, Accuracy: 0.9583\n","1/1 [==============================] - 0s 65ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 9.5524, Accuracy: 0.8542\n","Epoch: 40, Loss: 3.2543, Accuracy: 0.9097\n","Epoch: 60, Loss: 0.3362, Accuracy: 0.9792\n","Epoch: 80, Loss: 0.0011, Accuracy: 1.0000\n","Epoch: 100, Loss: 0.4328, Accuracy: 0.9792\n","1/1 [==============================] - 0s 58ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Epoch: 20, Loss: 18.8405, Accuracy: 0.8056\n","Epoch: 40, Loss: 5.5801, Accuracy: 0.8681\n","Epoch: 60, Loss: 1.6288, Accuracy: 0.9722\n","Epoch: 80, Loss: 0.2299, Accuracy: 0.9931\n","Epoch: 100, Loss: 1.4218, Accuracy: 0.9514\n","1/1 [==============================] - 0s 61ms/step\n","Fold completed. Validation accuracy: 68.75%\n","Epoch: 20, Loss: 16.6144, Accuracy: 0.8403\n","Epoch: 40, Loss: 13.6889, Accuracy: 0.8958\n","Epoch: 60, Loss: 0.7607, Accuracy: 0.9722\n","Epoch: 80, Loss: 0.0488, Accuracy: 0.9931\n","Epoch: 100, Loss: 0.0000, Accuracy: 1.0000\n","1/1 [==============================] - 0s 101ms/step\n","Fold completed. Validation accuracy: 75.00%\n","Best validation accuracy: 75.00%\n"]}]},{"cell_type":"markdown","source":["# Theoretically Important Position only"],"metadata":{"id":"FzcnhyT6XOlA"}},{"cell_type":"markdown","source":["## Extract Data"],"metadata":{"id":"c64LIHlfXTiG"}},{"cell_type":"code","source":["df_time_frequency.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKxzkTZhXS2x","executionInfo":{"status":"ok","timestamp":1713879425123,"user_tz":240,"elapsed":9,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"7f379680-a082-4c78-d08f-e4340f8573cb"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['AF3_mean', 'AF3_std', 'AF3_var', 'AF3_median', 'AF3_min', 'AF3_max',\n","       'AF3_activity', 'AF3_mobility', 'AF3_complexity', 'AF3_ar_coeff_0',\n","       ...\n","       'F8_Gamma_power', 'F8_spectral_entropy', 'AF4_Delta_power',\n","       'AF4_Theta_power', 'AF4_Alpha_power', 'AF4_Beta_power',\n","       'AF4_Gamma_power', 'AF4_spectral_entropy', 'Emotion', 'Folder'],\n","      dtype='object', length=282)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# Assuming df_time_frequency is your DataFrame\n","selected_columns = [col for col in df_time_frequency.columns if any(feature in col for feature in ['F3', 'F4', 'FC5', 'FC6', 'O1', 'O2', 'Emotion','Folder'])]\n","\n","# Creating a new DataFrame with the selected columns\n","df_important_positions = df_time_frequency[selected_columns]\n","df_important_positions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"N2K-j_ssXXmY","executionInfo":{"status":"ok","timestamp":1713879425439,"user_tz":240,"elapsed":321,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"815ca186-27d0-420d-9538-bb3207ed28ba"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...  F4_Gamma_power  F4_spectral_entropy  AF4_Delta_power  \\\n","0    ...       12.029786             3.181718       722.066811   \n","1    ...       12.436428             3.171125       988.999364   \n","2    ...       14.274776             3.909695       439.611659   \n","3    ...       15.984435             2.310437      6092.273632   \n","4    ...       14.544876             3.747753      2339.739461   \n","..   ...             ...                  ...              ...   \n","211  ...       28.791751             4.099605       549.013560   \n","212  ...        6.217567             2.119598       806.514682   \n","213  ...        6.597051             1.864852       929.661063   \n","214  ...        7.239505             3.359720       346.849914   \n","215  ...        5.487111             3.543667       429.863409   \n","\n","     AF4_Theta_power  AF4_Alpha_power  AF4_Beta_power  AF4_Gamma_power  \\\n","0          73.374318        26.934085       39.510158        12.868163   \n","1         104.930425        34.668521       50.649449        20.801604   \n","2          62.292803        21.426163       42.629270        21.327653   \n","3         235.566933        47.641229       44.089441        18.788212   \n","4         143.981679        26.881912       31.913806        12.180580   \n","..               ...              ...             ...              ...   \n","211        50.597313        19.869369       32.719328        26.388016   \n","212        67.316092        34.419324       31.208080        14.308119   \n","213        66.896045        27.174102       28.494446        13.939820   \n","214        31.735962        34.137930       32.800019        15.050338   \n","215        47.130917        20.924372       23.692223        11.364165   \n","\n","     AF4_spectral_entropy  Emotion  Folder  \n","0                3.228577        1       1  \n","1                2.722334        1       1  \n","2                3.976593        0       1  \n","3                2.098816        0       1  \n","4                2.435904        1       1  \n","..                    ...      ...     ...  \n","211              3.308674        1      25  \n","212              3.121754        0      25  \n","213              2.230978        0      25  \n","214              2.446117        1      25  \n","215              3.710480        1      25  \n","\n","[200 rows x 162 columns]"],"text/html":["\n","  <div id=\"df-c795dbb6-e101-4c8a-a480-58c877dd5606\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>F4_Gamma_power</th>\n","      <th>F4_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>12.029786</td>\n","      <td>3.181718</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>12.436428</td>\n","      <td>3.171125</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>14.274776</td>\n","      <td>3.909695</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>15.984435</td>\n","      <td>2.310437</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>14.544876</td>\n","      <td>3.747753</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>28.791751</td>\n","      <td>4.099605</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>6.217567</td>\n","      <td>2.119598</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>6.597051</td>\n","      <td>1.864852</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>7.239505</td>\n","      <td>3.359720</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>5.487111</td>\n","      <td>3.543667</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 162 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c795dbb6-e101-4c8a-a480-58c877dd5606')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c795dbb6-e101-4c8a-a480-58c877dd5606 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c795dbb6-e101-4c8a-a480-58c877dd5606');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e358eb0a-ae33-4078-aa9a-99704fcdfcaf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e358eb0a-ae33-4078-aa9a-99704fcdfcaf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e358eb0a-ae33-4078-aa9a-99704fcdfcaf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_16d395e2-80dc-4e8f-9dec-7478a66b5d2a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_important_positions')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_16d395e2-80dc-4e8f-9dec-7478a66b5d2a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_important_positions');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_important_positions"}},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["## Train test split"],"metadata":{"id":"-F1ZeiW6d_gv"}},{"cell_type":"code","source":["train_important_positions = df_important_positions[df_important_positions['Folder'].isin(train_folders)]\n","X_train_important_positions =train_important_positions.iloc[:,:-2]\n","y_train_important_positions=train_important_positions.iloc[:,-2]\n","\n","test_important_positions = df_important_positions[df_important_positions['Folder'].isin(test_folders)]\n","X_test_important_positions =test_important_positions.iloc[:,:-2]\n","y_test_important_positions=test_important_positions.iloc[:,-2]"],"metadata":{"id":"kq7JoWo5eXhM","executionInfo":{"status":"ok","timestamp":1713879425440,"user_tz":240,"elapsed":8,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":["## DNN model +CV"],"metadata":{"id":"WS5bY3VEeCCA"}},{"cell_type":"code","source":["# To store scores\n","cv_scores = []\n","best_model_important_positions = 0\n","best_accuracy_important_positions = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders.copy()\n","\n","\n","for i in range(fold):\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_important_positions[train_important_positions['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_important_positions[train_important_positions['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_important_positions = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_important_positions.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_important_positions.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_important_positions:\n","        best_accuracy_important_positions = val_accuracy\n","        best_model_important_positions = model_important_positions\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_important_positions * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GFllnm1HZmCC","outputId":"a2c18648-5c26-4588-87ef-daf56bda9019","executionInfo":{"status":"ok","timestamp":1713879455097,"user_tz":240,"elapsed":29663,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 35.7813, Accuracy: 0.7292\n","Epoch: 40, Loss: 12.9373, Accuracy: 0.7917\n","Epoch: 60, Loss: 10.9215, Accuracy: 0.8056\n","Epoch: 80, Loss: 4.4684, Accuracy: 0.8958\n","Epoch: 100, Loss: 3.9502, Accuracy: 0.9028\n","1/1 [==============================] - 0s 70ms/step\n","Fold completed. Validation accuracy: 68.75%\n","Epoch: 20, Loss: 19.5069, Accuracy: 0.7222\n","Epoch: 40, Loss: 7.0187, Accuracy: 0.8264\n","Epoch: 60, Loss: 3.2855, Accuracy: 0.8889\n","Epoch: 80, Loss: 1.9111, Accuracy: 0.9028\n","Epoch: 100, Loss: 11.1557, Accuracy: 0.8125\n","1/1 [==============================] - 0s 90ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 15.9441, Accuracy: 0.7153\n","Epoch: 40, Loss: 16.1533, Accuracy: 0.8056\n","Epoch: 60, Loss: 6.3384, Accuracy: 0.8611\n","Epoch: 80, Loss: 9.2199, Accuracy: 0.8125\n","Epoch: 100, Loss: 7.9359, Accuracy: 0.7917\n","1/1 [==============================] - 0s 62ms/step\n","Fold completed. Validation accuracy: 68.75%\n","Epoch: 20, Loss: 28.3923, Accuracy: 0.6389\n","Epoch: 40, Loss: 8.4056, Accuracy: 0.7986\n","Epoch: 60, Loss: 4.3353, Accuracy: 0.8333\n","Epoch: 80, Loss: 3.3043, Accuracy: 0.8472\n","Epoch: 100, Loss: 2.9037, Accuracy: 0.8611\n","1/1 [==============================] - 0s 57ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 12.6259, Accuracy: 0.7500\n","Epoch: 40, Loss: 14.7805, Accuracy: 0.8056\n","Epoch: 60, Loss: 2.3767, Accuracy: 0.8819\n","Epoch: 80, Loss: 2.2340, Accuracy: 0.8958\n","Epoch: 100, Loss: 2.7302, Accuracy: 0.8889\n","1/1 [==============================] - 0s 58ms/step\n","Fold completed. Validation accuracy: 62.50%\n","Best validation accuracy: 68.75%\n"]}]},{"cell_type":"markdown","source":["# Evaluation"],"metadata":{"id":"rWfzCo3i9osr"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Predict on the test set\n","y_pred_time = (best_model_time.predict(X_test_time) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_time = accuracy_score(y_test_time, y_pred_time)\n","print(f\"Test Accuracy: {test_accuracy_time * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_time = confusion_matrix(y_test_time, y_pred_time)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_time).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_time = classification_report(y_test_time, y_pred_time)\n","print(\"Classification Report:\")\n","print(report_time)\n"],"metadata":{"id":"zyNacevWbcUG","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879455372,"user_tz":240,"elapsed":297,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"3786a61c-9b3b-4106-8155-fa321ac98c1b"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step\n","Test Accuracy: 52.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.48      0.61      0.54        18\n","           1       0.59      0.45      0.51        22\n","\n","    accuracy                           0.53        40\n","   macro avg       0.53      0.53      0.52        40\n","weighted avg       0.54      0.53      0.52        40\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Assume we have a trained model, and the X_test and y_test sets as per your previous code.\n","\n","# Predict on the test set\n","y_pred_frequency = (best_model_frequency.predict(X_test_frequency) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_frequency = accuracy_score(y_test_frequency, y_pred_frequency)\n","print(f\"Test Accuracy: {test_accuracy_frequency * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_frequency = confusion_matrix(y_test_frequency, y_pred_frequency)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_frequency).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_frequency = classification_report(y_test_frequency, y_pred_frequency)\n","print(\"Classification Report:\")\n","print(report_frequency)\n"],"metadata":{"id":"Z2q05UU4bYs1","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879455673,"user_tz":240,"elapsed":306,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"561c9946-c7ed-493a-92c2-eeaa7ec87597"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 7ms/step\n","Test Accuracy: 55.00%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.50      0.50        18\n","           1       0.59      0.59      0.59        22\n","\n","    accuracy                           0.55        40\n","   macro avg       0.55      0.55      0.55        40\n","weighted avg       0.55      0.55      0.55        40\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Predict on the test set\n","y_pred_time_frequency = (best_model_time_frequency.predict(X_test_time_frequency) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_time_frequency = accuracy_score(y_test_time_frequency, y_pred_time_frequency)\n","print(f\"Test Accuracy: {test_accuracy_time_frequency * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_time_frequency = confusion_matrix(y_test_time_frequency, y_pred_time_frequency)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_time_frequency).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_time_frequency = classification_report(y_test_time_frequency, y_pred_time_frequency)\n","print(\"Classification Report:\")\n","print(report_time_frequency)\n"],"metadata":{"id":"fBno1H7YbTu9","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879456247,"user_tz":240,"elapsed":585,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"6eb7eae9-7b0a-4e3a-d5db-6e7984114bc4"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step\n","Test Accuracy: 52.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.48      0.56      0.51        18\n","           1       0.58      0.50      0.54        22\n","\n","    accuracy                           0.53        40\n","   macro avg       0.53      0.53      0.52        40\n","weighted avg       0.53      0.53      0.53        40\n","\n"]}]},{"cell_type":"code","source":["# Predict on the test set\n","y_pred_important_positions = (best_model_important_positions.predict(X_test_important_positions) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_important_positions = accuracy_score(y_test_important_positions, y_pred_important_positions)\n","print(f\"Test Accuracy: {test_accuracy_important_positions * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_important_positions = confusion_matrix(y_test_important_positions, y_pred_important_positions)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_important_positions).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_important_positions = classification_report(y_test_important_positions, y_pred_important_positions)\n","print(\"Classification Report:\")\n","print(report_important_positions)\n"],"metadata":{"id":"vA1bwz2YfjIk","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879456419,"user_tz":240,"elapsed":185,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"6d573922-61e1-4171-fd89-865a94be55b3"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 7ms/step\n","Test Accuracy: 52.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.47      0.44      0.46        18\n","           1       0.57      0.59      0.58        22\n","\n","    accuracy                           0.53        40\n","   macro avg       0.52      0.52      0.52        40\n","weighted avg       0.52      0.53      0.52        40\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Assume models and test datasets are defined for each type\n","# Predict probabilities for the positive class for all models\n","y_pred_probs_time = best_model_time.predict(X_test_time).ravel()\n","y_pred_probs_frequency = best_model_frequency.predict(X_test_frequency).ravel()\n","y_pred_probs_time_frequency = best_model_time_frequency.predict(X_test_time_frequency).ravel()\n","y_pred_probs_important_positions = best_model_important_positions.predict(X_test_important_positions).ravel()  # New model\n","\n","# Compute the ROC curve for each model\n","fpr_time, tpr_time, thresholds_time = roc_curve(y_test_time, y_pred_probs_time)\n","roc_auc_time = auc(fpr_time, tpr_time)\n","\n","fpr_frequency, tpr_frequency, thresholds_frequency = roc_curve(y_test_frequency, y_pred_probs_frequency)\n","roc_auc_frequency = auc(fpr_frequency, tpr_frequency)\n","\n","fpr_time_frequency, tpr_time_frequency, thresholds_time_frequency = roc_curve(y_test_time_frequency, y_pred_probs_time_frequency)\n","roc_auc_time_frequency = auc(fpr_time_frequency, tpr_time_frequency)\n","\n","fpr_important_positions, tpr_important_positions, thresholds_important_positions = roc_curve(y_test_important_positions, y_pred_probs_important_positions)  # New ROC computation\n","roc_auc_important_positions = auc(fpr_important_positions, tpr_important_positions)  # New AUC computation\n","\n","# Plot the ROC curves\n","plt.figure(figsize=(10, 8))\n","plt.plot(fpr_time, tpr_time, color='darkorange', lw=2, label='Time ROC curve (area = %0.2f)' % roc_auc_time)\n","plt.plot(fpr_frequency, tpr_frequency, color='blue', lw=2, label='Frequency ROC curve (area = %0.2f)' % roc_auc_frequency)\n","plt.plot(fpr_time_frequency, tpr_time_frequency, color='yellow', lw=2, label='Time&Frequency ROC curve (area = %0.2f)' % roc_auc_time_frequency)\n","plt.plot(fpr_important_positions, tpr_important_positions, color='green', lw=2, label='Important Positions ROC curve (area = %0.2f)' % roc_auc_important_positions)  # New curve\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()\n"],"metadata":{"id":"B9EsUlfy9i4d","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879457343,"user_tz":240,"elapsed":927,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"d92b85df-5fbc-4df1-a3b7-e62948ae4c09"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 12ms/step\n","2/2 [==============================] - 0s 6ms/step\n","2/2 [==============================] - 0s 6ms/step\n","2/2 [==============================] - 0s 6ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"uTAYXQYiRf1U","executionInfo":{"status":"ok","timestamp":1713879457344,"user_tz":240,"elapsed":9,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yY2wY8OhTlZH","executionInfo":{"status":"ok","timestamp":1713879457344,"user_tz":240,"elapsed":7,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":41,"outputs":[]}]}