{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["dPyQvA3d9Cqn","sCvlTL6N9QO_","eH5eSZ58-nMC","rWfzCo3i9osr"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Ma1h3Y1DoSl2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879422806,"user_tz":240,"elapsed":21307,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"65c8c397-b683-4bb2-9eb1-86769f97996f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["\n","import pandas as pd\n","import numpy as np"],"metadata":{"id":"r4AOB6Zvoaug","executionInfo":{"status":"ok","timestamp":1713879424111,"user_tz":240,"elapsed":1310,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# Time Domain EEG Feature"],"metadata":{"id":"5TfBr573x27p"}},{"cell_type":"markdown","source":["## Load Data"],"metadata":{"id":"dPyQvA3d9Cqn"}},{"cell_type":"code","source":["df_time=pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/time_domain_features\")"],"metadata":{"id":"X55kdfKYpdmA","executionInfo":{"status":"ok","timestamp":1713879426731,"user_tz":240,"elapsed":2623,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df_time"],"metadata":{"id":"obmgOg6aqkRn","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879427077,"user_tz":240,"elapsed":347,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"4e0a3e47-6a9f-4cab-e906-a141c7d8ef2d"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0     AF3_mean    AF3_std      AF3_var   AF3_median  \\\n","0             0  4233.422687  43.471805  1889.797801  4231.794922   \n","1             1  4231.008787  44.189663  1952.726344  4229.743652   \n","2             2  4235.494381  25.175706   633.816192  4233.846191   \n","3             3  4237.481215  86.477155  7478.298389  4236.922852   \n","4             4  4233.419821  34.626376  1198.985906  4230.769043   \n","..          ...          ...        ...          ...          ...   \n","211         211  4239.671983  97.882280  9580.940701  4237.948730   \n","212         212  4229.912101  50.426474  2542.829266  4228.205078   \n","213         213  4234.076193  32.293637  1042.878960  4234.871582   \n","214         214  4236.514296  21.179939   448.589826  4236.410156   \n","215         215  4237.631749  19.933718   397.353096  4237.436035   \n","\n","         AF3_min      AF3_max  AF3_activity  AF3_mobility  AF3_complexity  \\\n","0    3241.025635  4429.230469   1889.797801      0.212561        5.546035   \n","1    3387.692139  5505.127930   1952.726344      0.269354        4.519996   \n","2    3968.205078  4438.974121    633.816192      0.379098        3.379011   \n","3    3529.743408  5739.486816   7478.298389      0.111843       11.086097   \n","4    3809.230713  4543.589844   1198.985906      0.264964        4.459335   \n","..           ...          ...           ...           ...             ...   \n","211   759.487183  4835.384277   9580.940701      0.106721       10.789804   \n","212  3890.256348  4543.076660   2542.829266      0.105597       11.185909   \n","213  4091.281982  4401.025391   1042.878960      0.171739        7.219231   \n","214  4070.769043  4437.435547    448.589826      0.276163        4.529806   \n","215  4154.871582  4365.641113    397.353096      0.257500        4.828735   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4          Test  \n","0          0.414635   EEG_Test0_1  \n","1          0.421499   EEG_Test0_2  \n","2          0.406884   EEG_Test0_3  \n","3          0.373620   EEG_Test0_4  \n","4          0.299771   EEG_Test0_5  \n","..              ...           ...  \n","211        0.378527  EEG_Test26_4  \n","212        0.257632  EEG_Test26_5  \n","213        0.374842  EEG_Test26_6  \n","214        0.310306  EEG_Test26_7  \n","215        0.370687  EEG_Test26_8  \n","\n","[216 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-0c686aa2-6ba4-4da9-a51f-220bb3e98e27\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>211</td>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>EEG_Test26_4</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>212</td>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>EEG_Test26_5</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>213</td>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>EEG_Test26_6</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>214</td>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>EEG_Test26_7</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>215</td>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>EEG_Test26_8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>216 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c686aa2-6ba4-4da9-a51f-220bb3e98e27')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0c686aa2-6ba4-4da9-a51f-220bb3e98e27 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0c686aa2-6ba4-4da9-a51f-220bb3e98e27');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0016f6d7-1719-4794-9a58-9f3cb41f47e9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0016f6d7-1719-4794-9a58-9f3cb41f47e9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0016f6d7-1719-4794-9a58-9f3cb41f47e9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_074d6486-79bc-4d50-a04a-4445721fd96a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_074d6486-79bc-4d50-a04a-4445721fd96a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["rows_to_drop = ['Test20', 'Test21', 'Test27']\n","df_time_filtered = df_time[~df_time['Test'].str.contains('|'.join(rows_to_drop))]\n","df_time_filtered"],"metadata":{"id":"n9vteu-dujn5","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879427078,"user_tz":240,"elapsed":5,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"38092db3-cbd9-4e7c-e84c-27d489853182"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0     AF3_mean    AF3_std      AF3_var   AF3_median  \\\n","0             0  4233.422687  43.471805  1889.797801  4231.794922   \n","1             1  4231.008787  44.189663  1952.726344  4229.743652   \n","2             2  4235.494381  25.175706   633.816192  4233.846191   \n","3             3  4237.481215  86.477155  7478.298389  4236.922852   \n","4             4  4233.419821  34.626376  1198.985906  4230.769043   \n","..          ...          ...        ...          ...          ...   \n","211         211  4239.671983  97.882280  9580.940701  4237.948730   \n","212         212  4229.912101  50.426474  2542.829266  4228.205078   \n","213         213  4234.076193  32.293637  1042.878960  4234.871582   \n","214         214  4236.514296  21.179939   448.589826  4236.410156   \n","215         215  4237.631749  19.933718   397.353096  4237.436035   \n","\n","         AF3_min      AF3_max  AF3_activity  AF3_mobility  AF3_complexity  \\\n","0    3241.025635  4429.230469   1889.797801      0.212561        5.546035   \n","1    3387.692139  5505.127930   1952.726344      0.269354        4.519996   \n","2    3968.205078  4438.974121    633.816192      0.379098        3.379011   \n","3    3529.743408  5739.486816   7478.298389      0.111843       11.086097   \n","4    3809.230713  4543.589844   1198.985906      0.264964        4.459335   \n","..           ...          ...           ...           ...             ...   \n","211   759.487183  4835.384277   9580.940701      0.106721       10.789804   \n","212  3890.256348  4543.076660   2542.829266      0.105597       11.185909   \n","213  4091.281982  4401.025391   1042.878960      0.171739        7.219231   \n","214  4070.769043  4437.435547    448.589826      0.276163        4.529806   \n","215  4154.871582  4365.641113    397.353096      0.257500        4.828735   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4          Test  \n","0          0.414635   EEG_Test0_1  \n","1          0.421499   EEG_Test0_2  \n","2          0.406884   EEG_Test0_3  \n","3          0.373620   EEG_Test0_4  \n","4          0.299771   EEG_Test0_5  \n","..              ...           ...  \n","211        0.378527  EEG_Test26_4  \n","212        0.257632  EEG_Test26_5  \n","213        0.374842  EEG_Test26_6  \n","214        0.310306  EEG_Test26_7  \n","215        0.370687  EEG_Test26_8  \n","\n","[200 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-f684f3c4-8823-4ba7-8b6d-b4e42170b50f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>211</td>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>EEG_Test26_4</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>212</td>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>EEG_Test26_5</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>213</td>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>EEG_Test26_6</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>214</td>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>EEG_Test26_7</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>215</td>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>EEG_Test26_8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f684f3c4-8823-4ba7-8b6d-b4e42170b50f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f684f3c4-8823-4ba7-8b6d-b4e42170b50f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f684f3c4-8823-4ba7-8b6d-b4e42170b50f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5e7a06b6-eaff-4f17-9f6a-863860cc8b4d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e7a06b6-eaff-4f17-9f6a-863860cc8b4d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5e7a06b6-eaff-4f17-9f6a-863860cc8b4d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_c2090aed-f219-4eb9-abb1-117de6f33291\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c2090aed-f219-4eb9-abb1-117de6f33291 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["metadata=pd.read_excel(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv-based-Data/Demographic Details of Participants.xlsx\")\n","metadata.columns=[\n","    \"User ID\", \"Age\", \"Gender\", \"Dominant Hand\", \"Date / Time\",\n","    \"Video ID 1\", \"Video ID 2\", \"Date / Time\", \"Video ID 3\", \"Video ID 4\"]\n","metadata.head()"],"metadata":{"id":"1KBh-AYiq5J6","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879427498,"user_tz":240,"elapsed":425,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"bd986dbe-ea48-43a5-9f12-4eee10564293"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Age  Gender Dominant Hand            Date / Time  Video ID 1  \\\n","0   Test0   27    Male         Right  08/18/2019/2:00:00 PM          15   \n","1   Test1   24    Male         Right  08/18/2019/3:20:00 PM           5   \n","2   test2   30  Female         Right  08/19/2019/4:20:00 PM           8   \n","3   test3   25    Male         Right  08/20/2019/1:28:00 PM          14   \n","4   test4   24    Male          Left  08/21/2019/3:20:00 PM          12   \n","\n","   Video ID 2            Date / Time  Video ID 3  Video ID 4  \n","0           8  08/23/2019/3:40:00 PM         2.0        11.0  \n","1           5  08/22/2019/4:30:00 PM         9.0         5.0  \n","2          11  08/20/2019/4:40:00 PM         5.0         2.0  \n","3           7  08/28/2019/3:15:00 PM        15.0         1.0  \n","4           6  08/30/2019/5:10:00 PM        15.0        19.0  "],"text/html":["\n","  <div id=\"df-d9e76ade-3015-4bf6-8ae7-5a29a694a7b3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Dominant Hand</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>27</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/2:00:00 PM</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>08/23/2019/3:40:00 PM</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/3:20:00 PM</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>08/22/2019/4:30:00 PM</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>30</td>\n","      <td>Female</td>\n","      <td>Right</td>\n","      <td>08/19/2019/4:20:00 PM</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>08/20/2019/4:40:00 PM</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>25</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/20/2019/1:28:00 PM</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>08/28/2019/3:15:00 PM</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Left</td>\n","      <td>08/21/2019/3:20:00 PM</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>08/30/2019/5:10:00 PM</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9e76ade-3015-4bf6-8ae7-5a29a694a7b3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d9e76ade-3015-4bf6-8ae7-5a29a694a7b3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d9e76ade-3015-4bf6-8ae7-5a29a694a7b3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-25c67c52-b065-427c-8b4e-60dce2584944\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25c67c52-b065-427c-8b4e-60dce2584944')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-25c67c52-b065-427c-8b4e-60dce2584944 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata","summary":"{\n  \"name\": \"metadata\",\n  \"rows\": 28,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"test9\",\n          \"test25\",\n          \"test8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 19,\n        \"max\": 31,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          19,\n          27,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dominant Hand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Left\",\n          \"Right\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"08/28/2019/2:00:00 PM\",\n          \"09/25/2019/3:35:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          3,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"09.25/2019/4:45:00 PM\",\n          \"09/17/2019/8:05:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["metadata_video_id=metadata[[\"User ID\",\"Video ID 1\", \"Video ID 2\", \"Video ID 3\", \"Video ID 4\"]]\n","metadata_video_id=metadata_video_id.dropna()\n","metadata_video_id.head()"],"metadata":{"id":"yYFBOP20rO_M","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879427498,"user_tz":240,"elapsed":7,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"a5fa6972-ba44-4f18-be74-2fe9b33c6eab"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Video ID 1  Video ID 2  Video ID 3  Video ID 4\n","0   Test0          15           8         2.0        11.0\n","1   Test1           5           5         9.0         5.0\n","2   test2           8          11         5.0         2.0\n","3   test3          14           7        15.0         1.0\n","4   test4          12           6        15.0        19.0"],"text/html":["\n","  <div id=\"df-672e109f-0893-4e44-a315-5d545ad6f810\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-672e109f-0893-4e44-a315-5d545ad6f810')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-672e109f-0893-4e44-a315-5d545ad6f810 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-672e109f-0893-4e44-a315-5d545ad6f810');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6a3817b5-2f42-4cd3-84fc-936ff40b59c0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a3817b5-2f42-4cd3-84fc-936ff40b59c0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6a3817b5-2f42-4cd3-84fc-936ff40b59c0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata_video_id","summary":"{\n  \"name\": \"metadata_video_id\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"test8\",\n          \"test16\",\n          \"Test0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          13,\n          10,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# add Emotion column\n","metadata_video_id_list = metadata_video_id.drop('User ID', axis=1).values.flatten().tolist()\n","metadata_video_id_list = [int(item) for item in metadata_video_id_list for _ in range(2)] #to int and double the time\n","metadata_video_id_list = [1 if item in [1,2,5,6,13,14,15,16,17,18] else 0 for item in metadata_video_id_list] #map\n","df_time_filtered[\"Emotion\"]=metadata_video_id_list\n","# len(metadata_video_id_list)\n","# metadata_video_id_list"],"metadata":{"id":"V8FlGgG1txp-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879427722,"user_tz":240,"elapsed":229,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"648020cb-48ac-41ec-8a18-7c32e23ad7b6"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-00e5abdab353>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_time_filtered[\"Emotion\"]=metadata_video_id_list\n"]}]},{"cell_type":"code","source":["# metadata_video_id_list"],"metadata":{"id":"xV9T1cMerrw4","executionInfo":{"status":"ok","timestamp":1713879427722,"user_tz":240,"elapsed":4,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Drop \"Unnamed: 0\",\"Test\" columns\n","df_time_filtered=df_time_filtered.drop(columns=[\"Unnamed: 0\",\"Test\"])\n","df_time_filtered"],"metadata":{"id":"I_O0ca9vvdgL","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879427722,"user_tz":240,"elapsed":4,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"5f6971e7-c278-4b3e-8a48-263e83419021"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4  Emotion  \n","0          0.414635        1  \n","1          0.421499        1  \n","2          0.406884        0  \n","3          0.373620        0  \n","4          0.299771        1  \n","..              ...      ...  \n","211        0.378527        1  \n","212        0.257632        0  \n","213        0.374842        0  \n","214        0.310306        1  \n","215        0.370687        1  \n","\n","[200 rows x 197 columns]"],"text/html":["\n","  <div id=\"df-63eb3fb2-9ba8-45bf-8441-2ba69adbfece\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 197 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63eb3fb2-9ba8-45bf-8441-2ba69adbfece')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-63eb3fb2-9ba8-45bf-8441-2ba69adbfece button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-63eb3fb2-9ba8-45bf-8441-2ba69adbfece');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cbaaad8c-2fcd-4bcf-81c3-094cccbef2f1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cbaaad8c-2fcd-4bcf-81c3-094cccbef2f1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cbaaad8c-2fcd-4bcf-81c3-094cccbef2f1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_fb2700fb-f222-478a-b502-5bc5ab284293\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fb2700fb-f222-478a-b502-5bc5ab284293 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["## Train Test Split Method"],"metadata":{"id":"KhNaOZ0ox9TQ"}},{"cell_type":"code","source":["folder = [num for num in range(1, 26) for _ in range(8)]\n","df_time_filtered[\"Folder\"]=folder\n","df_time_filtered"],"metadata":{"id":"StPVCDaMw_uX","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1713879427976,"user_tz":240,"elapsed":257,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"1b319ad9-4296-41b7-c895-08c3cd025191"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...  AF4_activity  AF4_mobility  AF4_complexity  AF4_ar_coeff_0  \\\n","0    ...   1955.207164      0.201175        5.853881        1.888919   \n","1    ...   4047.042955      0.181730        6.655339        1.869903   \n","2    ...    788.581256      0.362081        3.528739        1.719312   \n","3    ...  30770.363380      0.065568       16.047249        2.014694   \n","4    ...   9459.787110      0.097349       11.212047        1.916121   \n","..   ...           ...           ...             ...             ...   \n","211  ...   1341.930166      0.288382        4.671318        1.619370   \n","212  ...   2125.336360      0.194158        6.114867        1.799081   \n","213  ...   4823.841089      0.127178        9.549253        1.850852   \n","214  ...   1804.680486      0.212828        5.879350        1.683692   \n","215  ...    778.759752      0.278193        4.402478        1.824404   \n","\n","     AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  AF4_ar_coeff_4  Emotion  \\\n","0         -1.916397        1.774889       -1.162047        0.414635        1   \n","1         -1.917447        1.803922       -1.177878        0.421499        1   \n","2         -1.716449        1.651069       -1.060818        0.406884        0   \n","3         -1.962541        1.826205       -1.251982        0.373620        0   \n","4         -1.784461        1.639423       -1.070856        0.299771        1   \n","..              ...             ...             ...             ...      ...   \n","211       -1.575834        1.591902       -1.013965        0.378527        1   \n","212       -1.684543        1.536058       -0.908229        0.257632        0   \n","213       -1.822298        1.738571       -1.141967        0.374842        0   \n","214       -1.604122        1.484709       -0.874587        0.310306        1   \n","215       -1.814688        1.714828       -1.095232        0.370687        1   \n","\n","     Folder  \n","0         1  \n","1         1  \n","2         1  \n","3         1  \n","4         1  \n","..      ...  \n","211      25  \n","212      25  \n","213      25  \n","214      25  \n","215      25  \n","\n","[200 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-dfd296d5-c57a-46d4-b798-2bb4b6305ad1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfd296d5-c57a-46d4-b798-2bb4b6305ad1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dfd296d5-c57a-46d4-b798-2bb4b6305ad1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dfd296d5-c57a-46d4-b798-2bb4b6305ad1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7b9ab8a1-4720-442a-9e94-7c8078dfbd9a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b9ab8a1-4720-442a-9e94-7c8078dfbd9a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7b9ab8a1-4720-442a-9e94-7c8078dfbd9a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cf36951b-5a85-4db3-a7f7-ca9df0a457cb\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cf36951b-5a85-4db3-a7f7-ca9df0a457cb button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# to make sure the same fold is use as train and test for different model\n","import random\n","folder_names = [i for i in range(1, 27)]\n","\n","# Shuffle the folder names to ensure random distribution\n","random.shuffle(folder_names)\n","\n","# Calculate the indices for the 80-20 split\n","train_split = int(0.8 * len(folder_names))  # 80% for training\n","\n","# Split the folders into training, validation, and testing sets\n","train_folders = folder_names[:train_split]\n","# valid_folders = folder_names[train_split:valid_split]\n","test_folders = folder_names[train_split:]\n","\n","print(train_folders)\n","print(test_folders)"],"metadata":{"id":"5mb1IS2BLSxs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879427976,"user_tz":240,"elapsed":3,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"38b04294-3724-449a-8e23-74727a6b30d4"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[19, 18, 4, 13, 2, 21, 24, 25, 10, 3, 15, 14, 22, 11, 23, 17, 16, 20, 5, 12]\n","[6, 26, 1, 8, 9, 7]\n"]}]},{"cell_type":"code","source":["train_time = df_time_filtered[df_time_filtered['Folder'].isin(train_folders)]\n","X_train_time =train_time.iloc[:,:-2]\n","y_train_time=train_time.iloc[:,-2]\n","\n","test_time = df_time_filtered[df_time_filtered['Folder'].isin(test_folders)]\n","X_test_time =test_time.iloc[:,:-2]\n","y_test_time=test_time.iloc[:,-2]\n","\n","# val = df_time_filtered[df_time_filtered['Folder'].isin(valid_folders)]\n","# X_val =val.iloc[:,:-2]\n","# y_val=val.iloc[:,-2]"],"metadata":{"id":"Mxc1Hz21zArD","executionInfo":{"status":"ok","timestamp":1713879427976,"user_tz":240,"elapsed":2,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["## DNN model + Cross Validation"],"metadata":{"id":"eO5N8iqsydZu"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras.regularizers import l2\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import EarlyStopping\n","from tensorflow.keras.callbacks import LambdaCallback\n","from sklearn.metrics import accuracy_score\n","\n","def create_model(input_shape):\n","    model = Sequential()\n","    # Adding L2 Regularization to layers\n","    model.add(Dense(64, input_shape=(input_shape,), activation='relu', kernel_regularizer=l2(0.01)))\n","    model.add(Dropout(0.3))  # Dropout 50% of the nodes of the previous layer during training\n","    model.add(Dense(32, activation='relu', kernel_regularizer=l2(0.01)))\n","    model.add(Dropout(0.2))  # Further dropout to combat overfitting\n","    model.add(Dense(1, activation='sigmoid'))\n","    model.compile(optimizer=Adam(learning_rate=0.001),\n","                  loss='binary_crossentropy',\n","                  metrics=['accuracy'])\n","    return model\n","\n","batch_size=64\n","fold=5"],"metadata":{"id":"HDUZQ9465vyp","executionInfo":{"status":"ok","timestamp":1713879438895,"user_tz":240,"elapsed":10921,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# # Now we will perform cross-validation\n","# # Prepare full dataset\n","# X_full = df_time_filtered.iloc[:, :-2]\n","# y_full = df_time_filtered.iloc[:, -2]\n","\n","# # Initialize KFold\n","# kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# To store scores\n","cv_scores = []\n","best_model_time = 0\n","best_accuracy_time = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders\n","\n","# for train_index, val_index in kf.split(X_full, y_full):\n","#     # Create data for this fold\n","#     X_train_fold, X_val_fold = X_full.iloc[train_index], X_full.iloc[val_index]\n","#     y_train_fold, y_val_fold = y_full.iloc[train_index], y_full.iloc[val_index]\n","for i in range(fold): # No.of fold cross validation\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_time[train_time['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_time[train_time['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_time = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_time.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_time.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_time:\n","        best_accuracy_time = val_accuracy\n","        best_model_time = model_time\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_time * 100:.2f}%\")\n"],"metadata":{"id":"yuYTv6L1ycN1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879468642,"user_tz":240,"elapsed":29771,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"9697f51f-3bb0-4324-9640-502bd8b6b8b2"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 511.2372, Accuracy: 0.6042\n","Epoch: 40, Loss: 180.0061, Accuracy: 0.6111\n","Epoch: 60, Loss: 192.6250, Accuracy: 0.5833\n","Epoch: 80, Loss: 71.4132, Accuracy: 0.5903\n","Epoch: 100, Loss: 38.7111, Accuracy: 0.5417\n","1/1 [==============================] - 0s 88ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Epoch: 20, Loss: 306.8335, Accuracy: 0.5556\n","Epoch: 40, Loss: 163.2157, Accuracy: 0.6389\n","Epoch: 60, Loss: 62.6081, Accuracy: 0.6528\n","Epoch: 80, Loss: 26.0485, Accuracy: 0.6875\n","Epoch: 100, Loss: 6.8785, Accuracy: 0.6736\n","1/1 [==============================] - 0s 55ms/step\n","Fold completed. Validation accuracy: 25.00%\n","Epoch: 20, Loss: 307.6189, Accuracy: 0.5347\n","Epoch: 40, Loss: 123.6352, Accuracy: 0.5139\n","Epoch: 60, Loss: 68.4616, Accuracy: 0.6111\n","Epoch: 80, Loss: 56.6599, Accuracy: 0.5486\n","Epoch: 100, Loss: 15.5588, Accuracy: 0.6389\n","1/1 [==============================] - 0s 104ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Epoch: 20, Loss: 345.3358, Accuracy: 0.6250\n","Epoch: 40, Loss: 126.5319, Accuracy: 0.6181\n","Epoch: 60, Loss: 60.5876, Accuracy: 0.6736\n","Epoch: 80, Loss: 42.4554, Accuracy: 0.6944\n","Epoch: 100, Loss: 18.0564, Accuracy: 0.6944\n","1/1 [==============================] - 0s 57ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 361.6889, Accuracy: 0.5972\n","Epoch: 40, Loss: 200.4638, Accuracy: 0.5694\n","Epoch: 60, Loss: 99.2637, Accuracy: 0.6875\n","Epoch: 80, Loss: 57.8134, Accuracy: 0.5833\n","Epoch: 100, Loss: 37.1744, Accuracy: 0.6528\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7bf66c8744c0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 92ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Best validation accuracy: 56.25%\n"]}]},{"cell_type":"code","source":["print(train_folders_cv)\n","print(val_folders_cv)"],"metadata":{"id":"TUloIrue5fqP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879468643,"user_tz":240,"elapsed":22,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"1d612ccb-9136-479f-8d7b-720bf357e7e3"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[23, 13, 11, 10, 21, 20, 3, 22, 16, 18, 12, 24, 15, 5, 19, 4, 17, 2]\n","[14, 25]\n"]}]},{"cell_type":"markdown","source":["# Frequency Domain Data"],"metadata":{"id":"AITEbGtc9LeP"}},{"cell_type":"markdown","source":["## Load Data"],"metadata":{"id":"sCvlTL6N9QO_"}},{"cell_type":"code","source":["df_frequency=pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/frequency_domain_features\")"],"metadata":{"id":"bYk5wPAn9OTg","executionInfo":{"status":"ok","timestamp":1713879469007,"user_tz":240,"elapsed":383,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["rows_to_drop = ['Test20', 'Test21', 'Test27']\n","df_frequency_filtered = df_frequency[~df_frequency['Test'].str.contains('|'.join(rows_to_drop))]\n","df_frequency_filtered.head()"],"metadata":{"id":"YL_L4NyK9U6B","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879469007,"user_tz":240,"elapsed":11,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"e7b176c1-9952-4ce8-e571-5f53562e3021"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0  AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  \\\n","0           0       742.183654        91.890818        29.103071   \n","1           1       814.217772       115.616427        33.692698   \n","2           2       333.443681        56.892036        17.542342   \n","3           3       972.444483        96.292971        21.770639   \n","4           4       679.511986       114.487260        25.583073   \n","\n","   AF3_Beta_power  AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  \\\n","0       39.086906        14.159668              3.392576    19380.110107   \n","1       52.126272        22.004420              3.517422     2473.146474   \n","2       37.008188        18.740256              4.115038     1400.052844   \n","3       34.067561        19.333383              2.063286    15797.879384   \n","4       32.942404        14.063132              3.881328      292.466213   \n","\n","   F7_Theta_power  F7_Alpha_power  ...  F8_Beta_power  F8_Gamma_power  \\\n","0     1675.854975      993.004181  ...    1827.793507      372.815243   \n","1      137.999940       28.948250  ...      50.502736       18.238877   \n","2      297.329986      160.979736  ...     246.406774       58.009400   \n","3     1250.494293      492.593757  ...     173.137554       37.285689   \n","4       38.358567       10.211787  ...      36.050785       14.784819   \n","\n","   F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  \\\n","0             2.927640       722.066811        73.374318        26.934085   \n","1             3.321144       988.999364       104.930425        34.668521   \n","2             3.251759       439.611659        62.292803        21.426163   \n","3             2.788485      6092.273632       235.566933        47.641229   \n","4             3.466234      2339.739461       143.981679        26.881912   \n","\n","   AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy         Test  \n","0       39.510158        12.868163              3.228577  EEG_Test0_1  \n","1       50.649449        20.801604              2.722334  EEG_Test0_2  \n","2       42.629270        21.327653              3.976593  EEG_Test0_3  \n","3       44.089441        18.788212              2.098816  EEG_Test0_4  \n","4       31.913806        12.180580              2.435904  EEG_Test0_5  \n","\n","[5 rows x 86 columns]"],"text/html":["\n","  <div id=\"df-88811f4a-0957-4df3-b612-cf9f6a7aa81a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>...</th>\n","      <th>F8_Beta_power</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>...</td>\n","      <td>1827.793507</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>...</td>\n","      <td>50.502736</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>...</td>\n","      <td>246.406774</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>...</td>\n","      <td>173.137554</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>...</td>\n","      <td>36.050785</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 86 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88811f4a-0957-4df3-b612-cf9f6a7aa81a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-88811f4a-0957-4df3-b612-cf9f6a7aa81a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-88811f4a-0957-4df3-b612-cf9f6a7aa81a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f6b6f7a4-7213-405b-8d07-e6ca2a1f0203\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6b6f7a4-7213-405b-8d07-e6ca2a1f0203')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f6b6f7a4-7213-405b-8d07-e6ca2a1f0203 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# add Emotion column\n","df_frequency_filtered[\"Emotion\"]=metadata_video_id_list\n","# Drop \"Unnamed: 0\",\"Test\" columns\n","df_frequency_filtered=df_frequency_filtered.drop(columns=[\"Unnamed: 0\",\"Test\"])\n","df_frequency_filtered"],"metadata":{"id":"seLQLjhK-My_","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879469007,"user_tz":240,"elapsed":9,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"1b0f33ca-6913-4413-90ee-697a47cb847a"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-21-dfb13a3777e7>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_frequency_filtered[\"Emotion\"]=metadata_video_id_list\n"]},{"output_type":"execute_result","data":{"text/plain":["     AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  AF3_Beta_power  \\\n","0         742.183654        91.890818        29.103071       39.086906   \n","1         814.217772       115.616427        33.692698       52.126272   \n","2         333.443681        56.892036        17.542342       37.008188   \n","3         972.444483        96.292971        21.770639       34.067561   \n","4         679.511986       114.487260        25.583073       32.942404   \n","..               ...              ...              ...             ...   \n","211      3988.090799        66.729897        26.714639       52.603418   \n","212       328.027554        24.065557        12.305281       11.390863   \n","213       196.552634        22.197301        10.330547       11.698973   \n","214       125.616279        14.811609        14.844813       13.978226   \n","215       178.529334        19.035797         8.773452       10.335400   \n","\n","     AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  F7_Theta_power  \\\n","0          14.159668              3.392576    19380.110107     1675.854975   \n","1          22.004420              3.517422     2473.146474      137.999940   \n","2          18.740256              4.115038     1400.052844      297.329986   \n","3          19.333383              2.063286    15797.879384     1250.494293   \n","4          14.063132              3.881328      292.466213       38.358567   \n","..               ...                   ...             ...             ...   \n","211        17.757124              2.581967     1128.316705      100.116058   \n","212         4.855920              2.003684     1214.553582       67.621555   \n","213         5.910977              2.469211     2412.923177       94.241990   \n","214         6.082713              3.141940     1198.985129       74.641414   \n","215         5.122136              3.436121      859.856118       52.064562   \n","\n","     F7_Alpha_power  F7_Beta_power  ...  F8_Beta_power  F8_Gamma_power  \\\n","0        993.004181    1200.003919  ...    1827.793507      372.815243   \n","1         28.948250      35.874422  ...      50.502736       18.238877   \n","2        160.979736     296.967472  ...     246.406774       58.009400   \n","3        492.593757     492.119875  ...     173.137554       37.285689   \n","4         10.211787      19.628216  ...      36.050785       14.784819   \n","..              ...            ...  ...            ...             ...   \n","211       25.147104      78.176664  ...     101.401419       55.028680   \n","212       24.157729      25.644321  ...      23.522324       10.241707   \n","213       34.393498      61.537160  ...      33.520476       14.401712   \n","214       33.214891      36.852710  ...      22.146428       11.727418   \n","215       17.522062      24.804552  ...      17.242093        9.168454   \n","\n","     F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  \\\n","0               2.927640       722.066811        73.374318        26.934085   \n","1               3.321144       988.999364       104.930425        34.668521   \n","2               3.251759       439.611659        62.292803        21.426163   \n","3               2.788485      6092.273632       235.566933        47.641229   \n","4               3.466234      2339.739461       143.981679        26.881912   \n","..                   ...              ...              ...              ...   \n","211             2.829569       549.013560        50.597313        19.869369   \n","212             3.310003       806.514682        67.316092        34.419324   \n","213             2.614483       929.661063        66.896045        27.174102   \n","214             2.334435       346.849914        31.735962        34.137930   \n","215             3.958936       429.863409        47.130917        20.924372   \n","\n","     AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy  Emotion  \n","0         39.510158        12.868163              3.228577        1  \n","1         50.649449        20.801604              2.722334        1  \n","2         42.629270        21.327653              3.976593        0  \n","3         44.089441        18.788212              2.098816        0  \n","4         31.913806        12.180580              2.435904        1  \n","..              ...              ...                   ...      ...  \n","211       32.719328        26.388016              3.308674        1  \n","212       31.208080        14.308119              3.121754        0  \n","213       28.494446        13.939820              2.230978        0  \n","214       32.800019        15.050338              2.446117        1  \n","215       23.692223        11.364165              3.710480        1  \n","\n","[200 rows x 85 columns]"],"text/html":["\n","  <div id=\"df-b02b2a5e-aacb-45d7-8628-2007ebb7313d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>F7_Beta_power</th>\n","      <th>...</th>\n","      <th>F8_Beta_power</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>1200.003919</td>\n","      <td>...</td>\n","      <td>1827.793507</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>35.874422</td>\n","      <td>...</td>\n","      <td>50.502736</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>296.967472</td>\n","      <td>...</td>\n","      <td>246.406774</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>492.119875</td>\n","      <td>...</td>\n","      <td>173.137554</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>19.628216</td>\n","      <td>...</td>\n","      <td>36.050785</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>3988.090799</td>\n","      <td>66.729897</td>\n","      <td>26.714639</td>\n","      <td>52.603418</td>\n","      <td>17.757124</td>\n","      <td>2.581967</td>\n","      <td>1128.316705</td>\n","      <td>100.116058</td>\n","      <td>25.147104</td>\n","      <td>78.176664</td>\n","      <td>...</td>\n","      <td>101.401419</td>\n","      <td>55.028680</td>\n","      <td>2.829569</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>328.027554</td>\n","      <td>24.065557</td>\n","      <td>12.305281</td>\n","      <td>11.390863</td>\n","      <td>4.855920</td>\n","      <td>2.003684</td>\n","      <td>1214.553582</td>\n","      <td>67.621555</td>\n","      <td>24.157729</td>\n","      <td>25.644321</td>\n","      <td>...</td>\n","      <td>23.522324</td>\n","      <td>10.241707</td>\n","      <td>3.310003</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>196.552634</td>\n","      <td>22.197301</td>\n","      <td>10.330547</td>\n","      <td>11.698973</td>\n","      <td>5.910977</td>\n","      <td>2.469211</td>\n","      <td>2412.923177</td>\n","      <td>94.241990</td>\n","      <td>34.393498</td>\n","      <td>61.537160</td>\n","      <td>...</td>\n","      <td>33.520476</td>\n","      <td>14.401712</td>\n","      <td>2.614483</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>125.616279</td>\n","      <td>14.811609</td>\n","      <td>14.844813</td>\n","      <td>13.978226</td>\n","      <td>6.082713</td>\n","      <td>3.141940</td>\n","      <td>1198.985129</td>\n","      <td>74.641414</td>\n","      <td>33.214891</td>\n","      <td>36.852710</td>\n","      <td>...</td>\n","      <td>22.146428</td>\n","      <td>11.727418</td>\n","      <td>2.334435</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>178.529334</td>\n","      <td>19.035797</td>\n","      <td>8.773452</td>\n","      <td>10.335400</td>\n","      <td>5.122136</td>\n","      <td>3.436121</td>\n","      <td>859.856118</td>\n","      <td>52.064562</td>\n","      <td>17.522062</td>\n","      <td>24.804552</td>\n","      <td>...</td>\n","      <td>17.242093</td>\n","      <td>9.168454</td>\n","      <td>3.958936</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 85 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b02b2a5e-aacb-45d7-8628-2007ebb7313d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b02b2a5e-aacb-45d7-8628-2007ebb7313d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b02b2a5e-aacb-45d7-8628-2007ebb7313d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0ac330cd-ea2d-4375-bc94-a5314e89185d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ac330cd-ea2d-4375-bc94-a5314e89185d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0ac330cd-ea2d-4375-bc94-a5314e89185d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_43f66636-c85f-49db-ac0c-3d210b39f79c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_frequency_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_43f66636-c85f-49db-ac0c-3d210b39f79c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_frequency_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["## Train Test Split"],"metadata":{"id":"eH5eSZ58-nMC"}},{"cell_type":"code","source":["# Assign Folder\n","df_frequency_filtered[\"Folder\"]=folder\n","df_frequency_filtered.head()"],"metadata":{"id":"1_VzOgLz-pdF","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879469007,"user_tz":240,"elapsed":7,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"56f9a609-306d-4d3d-da84-d2f9bc3f917e"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  AF3_Beta_power  \\\n","0       742.183654        91.890818        29.103071       39.086906   \n","1       814.217772       115.616427        33.692698       52.126272   \n","2       333.443681        56.892036        17.542342       37.008188   \n","3       972.444483        96.292971        21.770639       34.067561   \n","4       679.511986       114.487260        25.583073       32.942404   \n","\n","   AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  F7_Theta_power  \\\n","0        14.159668              3.392576    19380.110107     1675.854975   \n","1        22.004420              3.517422     2473.146474      137.999940   \n","2        18.740256              4.115038     1400.052844      297.329986   \n","3        19.333383              2.063286    15797.879384     1250.494293   \n","4        14.063132              3.881328      292.466213       38.358567   \n","\n","   F7_Alpha_power  F7_Beta_power  ...  F8_Gamma_power  F8_spectral_entropy  \\\n","0      993.004181    1200.003919  ...      372.815243             2.927640   \n","1       28.948250      35.874422  ...       18.238877             3.321144   \n","2      160.979736     296.967472  ...       58.009400             3.251759   \n","3      492.593757     492.119875  ...       37.285689             2.788485   \n","4       10.211787      19.628216  ...       14.784819             3.466234   \n","\n","   AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  AF4_Beta_power  \\\n","0       722.066811        73.374318        26.934085       39.510158   \n","1       988.999364       104.930425        34.668521       50.649449   \n","2       439.611659        62.292803        21.426163       42.629270   \n","3      6092.273632       235.566933        47.641229       44.089441   \n","4      2339.739461       143.981679        26.881912       31.913806   \n","\n","   AF4_Gamma_power  AF4_spectral_entropy  Emotion  Folder  \n","0        12.868163              3.228577        1       1  \n","1        20.801604              2.722334        1       1  \n","2        21.327653              3.976593        0       1  \n","3        18.788212              2.098816        0       1  \n","4        12.180580              2.435904        1       1  \n","\n","[5 rows x 86 columns]"],"text/html":["\n","  <div id=\"df-a17df387-7009-4202-b6a2-f5e65a03576a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>F7_Beta_power</th>\n","      <th>...</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>1200.003919</td>\n","      <td>...</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>35.874422</td>\n","      <td>...</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>296.967472</td>\n","      <td>...</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>492.119875</td>\n","      <td>...</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>19.628216</td>\n","      <td>...</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 86 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a17df387-7009-4202-b6a2-f5e65a03576a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a17df387-7009-4202-b6a2-f5e65a03576a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a17df387-7009-4202-b6a2-f5e65a03576a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-81f13304-cdec-4932-af30-58f9221d819a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81f13304-cdec-4932-af30-58f9221d819a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-81f13304-cdec-4932-af30-58f9221d819a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["train_frequency = df_frequency_filtered[df_frequency_filtered['Folder'].isin(train_folders)]\n","X_train_frequency =train_frequency.iloc[:,:-2]\n","y_train_frequency=train_frequency.iloc[:,-2]\n","\n","test_frequency = df_frequency_filtered[df_frequency_filtered['Folder'].isin(test_folders)]\n","X_test_frequency =test_frequency.iloc[:,:-2]\n","y_test_frequency=test_frequency.iloc[:,-2]\n","# X_test_frequency"],"metadata":{"id":"WYqquE1U-6mN","executionInfo":{"status":"ok","timestamp":1713879469007,"user_tz":240,"elapsed":6,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["## DNN model + Cross Validation"],"metadata":{"id":"L2J6YWXp_JFS"}},{"cell_type":"code","source":["# To store scores and keep track of the best model\n","cv_scores_frequency = []\n","best_model_frequency = None\n","best_accuracy_frequency = 0  # Initialize best accuracy to zero\n","train_folders_name = train_folders.copy()  # Create a copy to shuffle and split\n","\n","for i in range(fold):\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","\n","    # Split the folders into training and validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","\n","    # Filter data for training and validation sets\n","    train_cv = df_frequency_filtered[df_frequency_filtered['Folder'].isin(train_folders_cv)]\n","    X_train_cv = train_cv.iloc[:, :-2]\n","    y_train_cv = train_cv.iloc[:, -2]\n","\n","    val_cv = df_frequency_filtered[df_frequency_filtered['Folder'].isin(val_folders_cv)]\n","    X_val_cv = val_cv.iloc[:, :-2]\n","    y_val_cv = val_cv.iloc[:, -2]\n","\n","    # Define the model\n","    model_frequency = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_frequency.fit(X_train_cv, y_train_cv,\n","                                  epochs=100,  # Consider increasing epochs\n","                                  batch_size=batch_size,\n","                                  verbose=0,\n","                                  callbacks=[print_callback],\n","                                  validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_frequency.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores_frequency.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_frequency:\n","        best_accuracy_frequency = val_accuracy\n","        best_model_frequency = model_frequency\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_frequency * 100:.2f}%\")\n","\n","# Optionally, save the best model\n","if best_model_frequency:\n","    best_model_frequency.save('best_model_frequency.h5')\n"],"metadata":{"id":"E08HRLZYOPDj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879500492,"user_tz":240,"elapsed":31491,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"03bfa7a7-3186-4ae4-dea6-3752cd861ae2"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 169.0119, Accuracy: 0.6181\n","Epoch: 40, Loss: 81.3513, Accuracy: 0.5972\n","Epoch: 60, Loss: 47.1919, Accuracy: 0.5486\n","Epoch: 80, Loss: 31.1890, Accuracy: 0.5972\n","Epoch: 100, Loss: 34.1951, Accuracy: 0.6042\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7bf6ced33640> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 62ms/step\n","Fold completed. Validation accuracy: 81.25%\n","Epoch: 20, Loss: 126.0264, Accuracy: 0.5972\n","Epoch: 40, Loss: 99.8147, Accuracy: 0.5972\n","Epoch: 60, Loss: 57.6625, Accuracy: 0.5764\n","Epoch: 80, Loss: 37.9784, Accuracy: 0.6875\n","Epoch: 100, Loss: 22.3326, Accuracy: 0.6806\n","1/1 [==============================] - 0s 89ms/step\n","Fold completed. Validation accuracy: 62.50%\n","Epoch: 20, Loss: 96.2473, Accuracy: 0.5556\n","Epoch: 40, Loss: 51.2761, Accuracy: 0.5694\n","Epoch: 60, Loss: 41.1137, Accuracy: 0.5764\n","Epoch: 80, Loss: 37.0150, Accuracy: 0.6111\n","Epoch: 100, Loss: 17.0471, Accuracy: 0.5972\n","1/1 [==============================] - 0s 57ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Epoch: 20, Loss: 107.6980, Accuracy: 0.5903\n","Epoch: 40, Loss: 73.1456, Accuracy: 0.6528\n","Epoch: 60, Loss: 46.2116, Accuracy: 0.6111\n","Epoch: 80, Loss: 35.2308, Accuracy: 0.5903\n","Epoch: 100, Loss: 24.4677, Accuracy: 0.6528\n","1/1 [==============================] - 0s 90ms/step\n","Fold completed. Validation accuracy: 68.75%\n","Epoch: 20, Loss: 154.6491, Accuracy: 0.5069\n","Epoch: 40, Loss: 75.8478, Accuracy: 0.6250\n","Epoch: 60, Loss: 32.8841, Accuracy: 0.7014\n","Epoch: 80, Loss: 30.0549, Accuracy: 0.6389\n","Epoch: 100, Loss: 48.7424, Accuracy: 0.5764\n","1/1 [==============================] - 0s 72ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Best validation accuracy: 81.25%\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["# Time Frequency Together"],"metadata":{"id":"yNwkLR--TjAY"}},{"cell_type":"markdown","source":["## Concatenate Data"],"metadata":{"id":"KZRYW7_6Y2X6"}},{"cell_type":"code","source":["df_time_filtered_incomplete=df_time_filtered.iloc[:,:-2]\n","df_time_frequency=pd.concat([df_time_filtered_incomplete, df_frequency_filtered], axis=1)\n","df_time_frequency"],"metadata":{"id":"6kZ6R5FKUKEA","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1713879500494,"user_tz":240,"elapsed":35,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"c4ee2c3f-c5b7-4d9a-a436-de5186eceb5c"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...  F8_Gamma_power  F8_spectral_entropy  AF4_Delta_power  \\\n","0    ...      372.815243             2.927640       722.066811   \n","1    ...       18.238877             3.321144       988.999364   \n","2    ...       58.009400             3.251759       439.611659   \n","3    ...       37.285689             2.788485      6092.273632   \n","4    ...       14.784819             3.466234      2339.739461   \n","..   ...             ...                  ...              ...   \n","211  ...       55.028680             2.829569       549.013560   \n","212  ...       10.241707             3.310003       806.514682   \n","213  ...       14.401712             2.614483       929.661063   \n","214  ...       11.727418             2.334435       346.849914   \n","215  ...        9.168454             3.958936       429.863409   \n","\n","     AF4_Theta_power  AF4_Alpha_power  AF4_Beta_power  AF4_Gamma_power  \\\n","0          73.374318        26.934085       39.510158        12.868163   \n","1         104.930425        34.668521       50.649449        20.801604   \n","2          62.292803        21.426163       42.629270        21.327653   \n","3         235.566933        47.641229       44.089441        18.788212   \n","4         143.981679        26.881912       31.913806        12.180580   \n","..               ...              ...             ...              ...   \n","211        50.597313        19.869369       32.719328        26.388016   \n","212        67.316092        34.419324       31.208080        14.308119   \n","213        66.896045        27.174102       28.494446        13.939820   \n","214        31.735962        34.137930       32.800019        15.050338   \n","215        47.130917        20.924372       23.692223        11.364165   \n","\n","     AF4_spectral_entropy  Emotion  Folder  \n","0                3.228577        1       1  \n","1                2.722334        1       1  \n","2                3.976593        0       1  \n","3                2.098816        0       1  \n","4                2.435904        1       1  \n","..                    ...      ...     ...  \n","211              3.308674        1      25  \n","212              3.121754        0      25  \n","213              2.230978        0      25  \n","214              2.446117        1      25  \n","215              3.710480        1      25  \n","\n","[200 rows x 282 columns]"],"text/html":["\n","  <div id=\"df-60c24763-a708-4cc6-af7b-008fe52255cd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>55.028680</td>\n","      <td>2.829569</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>10.241707</td>\n","      <td>3.310003</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>14.401712</td>\n","      <td>2.614483</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>11.727418</td>\n","      <td>2.334435</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>9.168454</td>\n","      <td>3.958936</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 282 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60c24763-a708-4cc6-af7b-008fe52255cd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-60c24763-a708-4cc6-af7b-008fe52255cd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-60c24763-a708-4cc6-af7b-008fe52255cd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-09bb7003-a836-4a21-b3f3-305fe143ed89\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09bb7003-a836-4a21-b3f3-305fe143ed89')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-09bb7003-a836-4a21-b3f3-305fe143ed89 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_33396c06-d1ad-4fc8-bc14-aa0847dd758f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_frequency')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_33396c06-d1ad-4fc8-bc14-aa0847dd758f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_frequency');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_frequency"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# df_time_filtered.corr()"],"metadata":{"id":"m8brrsL-caCS","executionInfo":{"status":"ok","timestamp":1713879500494,"user_tz":240,"elapsed":32,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# import pandas as pd\n","# import seaborn as sns\n","# import matplotlib.pyplot as plt\n","\n","# # Assuming df_time_filtered is your DataFrame\n","# # Calculate the correlation matrix\n","# corr = df_time_filtered.corr()\n","\n","# # Set up the matplotlib figure\n","# plt.figure(figsize=(10, 8))\n","\n","# # Draw the heatmap with the mask and correct aspect ratio\n","# sns.heatmap(corr, cmap='coolwarm', square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n","\n","# # Add title\n","# plt.title('Correlation Matrix Heatmap')\n","\n","# # Show plot\n","# plt.show()\n"],"metadata":{"id":"TQDxMxdkc6aW","executionInfo":{"status":"ok","timestamp":1713879500494,"user_tz":240,"elapsed":31,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# df_frequency_filtered.corr()"],"metadata":{"id":"EhnXWlKPcmGB","executionInfo":{"status":"ok","timestamp":1713879500494,"user_tz":240,"elapsed":31,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# import pandas as pd\n","# import seaborn as sns\n","# import matplotlib.pyplot as plt\n","\n","# # Assuming df_time_filtered is your DataFrame\n","# # Calculate the correlation matrix\n","# corr = df_frequency_filtered.corr()\n","\n","# # Set up the matplotlib figure\n","# plt.figure(figsize=(10, 8))\n","\n","# # Draw the heatmap with the mask and correct aspect ratio\n","# sns.heatmap(corr, cmap='coolwarm', square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n","\n","# # Add title\n","# plt.title('Correlation Matrix Heatmap')\n","\n","# # Show plot\n","# plt.show()\n"],"metadata":{"id":"t_0tbQ_8c_Wm","executionInfo":{"status":"ok","timestamp":1713879500649,"user_tz":240,"elapsed":3,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# import pandas as pd\n","# import seaborn as sns\n","# import matplotlib.pyplot as plt\n","\n","# # Assuming df_time_filtered is your DataFrame\n","# # Calculate the correlation matrix\n","# corr = df_time_frequency.corr()\n","\n","# # Set up the matplotlib figure\n","# plt.figure(figsize=(10, 8))\n","\n","# # Draw the heatmap with the mask and correct aspect ratio\n","# sns.heatmap(corr, cmap='coolwarm', square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n","\n","# # Add title\n","# plt.title('Correlation Matrix Heatmap')\n","\n","# # Show plot\n","# plt.show()\n"],"metadata":{"id":"zyAwQh88dFTS","executionInfo":{"status":"ok","timestamp":1713879500650,"user_tz":240,"elapsed":4,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":["## Train test split"],"metadata":{"id":"B2qpOAqvUo2E"}},{"cell_type":"code","source":["train_time_frequency = df_time_frequency[df_time_frequency['Folder'].isin(train_folders)]\n","X_train_time_frequency =train_time_frequency.iloc[:,:-2]\n","y_train_time_frequency=train_time_frequency.iloc[:,-2]\n","\n","test_time_frequency = df_time_frequency[df_time_frequency['Folder'].isin(test_folders)]\n","X_test_time_frequency =test_time_frequency.iloc[:,:-2]\n","y_test_time_frequency=test_time_frequency.iloc[:,-2]"],"metadata":{"id":"yFcbe_CmUoCe","executionInfo":{"status":"ok","timestamp":1713879500650,"user_tz":240,"elapsed":3,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":31,"outputs":[]},{"cell_type":"markdown","source":["## DNN and CV"],"metadata":{"id":"x0pXAbDtU_pA"}},{"cell_type":"code","source":["# # Now we will perform cross-validation\n","# # Prepare full dataset\n","# X_full = df_time_filtered.iloc[:, :-2]\n","# y_full = df_time_filtered.iloc[:, -2]\n","\n","# # Initialize KFold\n","# kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# To store scores\n","cv_scores = []\n","best_model_time_frequency = 0\n","best_accuracy_time_frequency = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders.copy()\n","\n","\n","for i in range(fold): #5 fold cross validation\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_time_frequency[train_time_frequency['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_time_frequency[train_time_frequency['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_time_frequency = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_time_frequency.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_time_frequency.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_time_frequency:\n","        best_accuracy_time_frequency = val_accuracy\n","        best_model_time_frequency = model_time_frequency\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_time_frequency * 100:.2f}%\")\n"],"metadata":{"id":"MgnZbbiPVBfY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879530730,"user_tz":240,"elapsed":30083,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"8dcafa52-becb-427b-81dc-9cf432ac84a0"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 243.0041, Accuracy: 0.5347\n","Epoch: 40, Loss: 107.2000, Accuracy: 0.6667\n","Epoch: 60, Loss: 63.1434, Accuracy: 0.6875\n","Epoch: 80, Loss: 42.9433, Accuracy: 0.6528\n","Epoch: 100, Loss: 50.1380, Accuracy: 0.6458\n","1/1 [==============================] - 0s 79ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Epoch: 20, Loss: 244.3245, Accuracy: 0.6042\n","Epoch: 40, Loss: 125.0907, Accuracy: 0.6389\n","Epoch: 60, Loss: 61.5815, Accuracy: 0.5903\n","Epoch: 80, Loss: 77.3976, Accuracy: 0.6597\n","Epoch: 100, Loss: 38.9035, Accuracy: 0.7083\n","1/1 [==============================] - 0s 57ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Epoch: 20, Loss: 412.9042, Accuracy: 0.5139\n","Epoch: 40, Loss: 199.0123, Accuracy: 0.6319\n","Epoch: 60, Loss: 81.5794, Accuracy: 0.5833\n","Epoch: 80, Loss: 36.3041, Accuracy: 0.6736\n","Epoch: 100, Loss: 21.2112, Accuracy: 0.6389\n","1/1 [==============================] - 0s 58ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 180.5147, Accuracy: 0.6181\n","Epoch: 40, Loss: 69.2739, Accuracy: 0.6597\n","Epoch: 60, Loss: 41.9672, Accuracy: 0.6250\n","Epoch: 80, Loss: 17.8203, Accuracy: 0.6875\n","Epoch: 100, Loss: 11.8478, Accuracy: 0.6528\n","1/1 [==============================] - 0s 58ms/step\n","Fold completed. Validation accuracy: 87.50%\n","Epoch: 20, Loss: 124.7597, Accuracy: 0.6458\n","Epoch: 40, Loss: 87.4185, Accuracy: 0.6458\n","Epoch: 60, Loss: 23.4412, Accuracy: 0.6944\n","Epoch: 80, Loss: 15.0951, Accuracy: 0.7153\n","Epoch: 100, Loss: 7.7690, Accuracy: 0.6736\n","1/1 [==============================] - 0s 59ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Best validation accuracy: 87.50%\n"]}]},{"cell_type":"markdown","source":["# Theoretically Important Position only"],"metadata":{"id":"FzcnhyT6XOlA"}},{"cell_type":"markdown","source":["## Extract Data"],"metadata":{"id":"c64LIHlfXTiG"}},{"cell_type":"code","source":["df_time_frequency.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKxzkTZhXS2x","executionInfo":{"status":"ok","timestamp":1713879530730,"user_tz":240,"elapsed":24,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"d04c00bd-2d14-4148-cad7-5f9fab1de75c"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['AF3_mean', 'AF3_std', 'AF3_var', 'AF3_median', 'AF3_min', 'AF3_max',\n","       'AF3_activity', 'AF3_mobility', 'AF3_complexity', 'AF3_ar_coeff_0',\n","       ...\n","       'F8_Gamma_power', 'F8_spectral_entropy', 'AF4_Delta_power',\n","       'AF4_Theta_power', 'AF4_Alpha_power', 'AF4_Beta_power',\n","       'AF4_Gamma_power', 'AF4_spectral_entropy', 'Emotion', 'Folder'],\n","      dtype='object', length=282)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# Assuming df_time_frequency is your DataFrame\n","selected_columns = [col for col in df_time_frequency.columns if any(feature in col for feature in ['F3', 'F4', 'FC5', 'FC6', 'O1', 'O2', 'Emotion','Folder'])]\n","\n","# Creating a new DataFrame with the selected columns\n","df_important_positions = df_time_frequency[selected_columns]\n","df_important_positions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"N2K-j_ssXXmY","executionInfo":{"status":"ok","timestamp":1713879530731,"user_tz":240,"elapsed":23,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"68d1f579-1ede-475a-d818-83b08b47cdd2"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...  F4_Gamma_power  F4_spectral_entropy  AF4_Delta_power  \\\n","0    ...       12.029786             3.181718       722.066811   \n","1    ...       12.436428             3.171125       988.999364   \n","2    ...       14.274776             3.909695       439.611659   \n","3    ...       15.984435             2.310437      6092.273632   \n","4    ...       14.544876             3.747753      2339.739461   \n","..   ...             ...                  ...              ...   \n","211  ...       28.791751             4.099605       549.013560   \n","212  ...        6.217567             2.119598       806.514682   \n","213  ...        6.597051             1.864852       929.661063   \n","214  ...        7.239505             3.359720       346.849914   \n","215  ...        5.487111             3.543667       429.863409   \n","\n","     AF4_Theta_power  AF4_Alpha_power  AF4_Beta_power  AF4_Gamma_power  \\\n","0          73.374318        26.934085       39.510158        12.868163   \n","1         104.930425        34.668521       50.649449        20.801604   \n","2          62.292803        21.426163       42.629270        21.327653   \n","3         235.566933        47.641229       44.089441        18.788212   \n","4         143.981679        26.881912       31.913806        12.180580   \n","..               ...              ...             ...              ...   \n","211        50.597313        19.869369       32.719328        26.388016   \n","212        67.316092        34.419324       31.208080        14.308119   \n","213        66.896045        27.174102       28.494446        13.939820   \n","214        31.735962        34.137930       32.800019        15.050338   \n","215        47.130917        20.924372       23.692223        11.364165   \n","\n","     AF4_spectral_entropy  Emotion  Folder  \n","0                3.228577        1       1  \n","1                2.722334        1       1  \n","2                3.976593        0       1  \n","3                2.098816        0       1  \n","4                2.435904        1       1  \n","..                    ...      ...     ...  \n","211              3.308674        1      25  \n","212              3.121754        0      25  \n","213              2.230978        0      25  \n","214              2.446117        1      25  \n","215              3.710480        1      25  \n","\n","[200 rows x 162 columns]"],"text/html":["\n","  <div id=\"df-3ebe6be4-709a-4532-ada7-1698f9468dbb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>F4_Gamma_power</th>\n","      <th>F4_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>12.029786</td>\n","      <td>3.181718</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>12.436428</td>\n","      <td>3.171125</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>14.274776</td>\n","      <td>3.909695</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>15.984435</td>\n","      <td>2.310437</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>14.544876</td>\n","      <td>3.747753</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>28.791751</td>\n","      <td>4.099605</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>6.217567</td>\n","      <td>2.119598</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>6.597051</td>\n","      <td>1.864852</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>7.239505</td>\n","      <td>3.359720</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>5.487111</td>\n","      <td>3.543667</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 162 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ebe6be4-709a-4532-ada7-1698f9468dbb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3ebe6be4-709a-4532-ada7-1698f9468dbb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3ebe6be4-709a-4532-ada7-1698f9468dbb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4858af5c-2bdf-49c3-bbd6-04aa2ba58e72\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4858af5c-2bdf-49c3-bbd6-04aa2ba58e72')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4858af5c-2bdf-49c3-bbd6-04aa2ba58e72 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_0c496890-464c-4a07-b1f8-fdc9301a4031\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_important_positions')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_0c496890-464c-4a07-b1f8-fdc9301a4031 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_important_positions');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_important_positions"}},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["## Train test split"],"metadata":{"id":"-F1ZeiW6d_gv"}},{"cell_type":"code","source":["train_important_positions = df_important_positions[df_important_positions['Folder'].isin(train_folders)]\n","X_train_important_positions =train_important_positions.iloc[:,:-2]\n","y_train_important_positions=train_important_positions.iloc[:,-2]\n","\n","test_important_positions = df_important_positions[df_important_positions['Folder'].isin(test_folders)]\n","X_test_important_positions =test_important_positions.iloc[:,:-2]\n","y_test_important_positions=test_important_positions.iloc[:,-2]"],"metadata":{"id":"kq7JoWo5eXhM","executionInfo":{"status":"ok","timestamp":1713879530731,"user_tz":240,"elapsed":21,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":["## DNN model +CV"],"metadata":{"id":"WS5bY3VEeCCA"}},{"cell_type":"code","source":["# To store scores\n","cv_scores = []\n","best_model_important_positions = 0\n","best_accuracy_important_positions = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders.copy()\n","\n","\n","for i in range(fold):\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_important_positions[train_important_positions['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_important_positions[train_important_positions['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_important_positions = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_important_positions.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_important_positions.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_important_positions:\n","        best_accuracy_important_positions = val_accuracy\n","        best_model_important_positions = model_important_positions\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_important_positions * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GFllnm1HZmCC","outputId":"dbf96d7b-3402-4b6b-a32e-bb22a5ce0d59","executionInfo":{"status":"ok","timestamp":1713879568649,"user_tz":240,"elapsed":37940,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 326.5809, Accuracy: 0.6111\n","Epoch: 40, Loss: 73.1968, Accuracy: 0.6042\n","Epoch: 60, Loss: 54.1942, Accuracy: 0.6319\n","Epoch: 80, Loss: 42.9673, Accuracy: 0.6597\n","Epoch: 100, Loss: 41.6865, Accuracy: 0.5486\n","1/1 [==============================] - 0s 142ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 198.0614, Accuracy: 0.5278\n","Epoch: 40, Loss: 105.4306, Accuracy: 0.4861\n","Epoch: 60, Loss: 41.2051, Accuracy: 0.5486\n","Epoch: 80, Loss: 11.3918, Accuracy: 0.5069\n","Epoch: 100, Loss: 41.2482, Accuracy: 0.4931\n","1/1 [==============================] - 0s 84ms/step\n","Fold completed. Validation accuracy: 31.25%\n","Epoch: 20, Loss: 166.4295, Accuracy: 0.5833\n","Epoch: 40, Loss: 114.2720, Accuracy: 0.5833\n","Epoch: 60, Loss: 42.2003, Accuracy: 0.7153\n","Epoch: 80, Loss: 48.6055, Accuracy: 0.6389\n","Epoch: 100, Loss: 49.8710, Accuracy: 0.6528\n","1/1 [==============================] - 0s 57ms/step\n","Fold completed. Validation accuracy: 25.00%\n","Epoch: 20, Loss: 243.9200, Accuracy: 0.5972\n","Epoch: 40, Loss: 118.5599, Accuracy: 0.5556\n","Epoch: 60, Loss: 66.2599, Accuracy: 0.5903\n","Epoch: 80, Loss: 43.9189, Accuracy: 0.5972\n","Epoch: 100, Loss: 45.0091, Accuracy: 0.4861\n","1/1 [==============================] - 0s 58ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Epoch: 20, Loss: 108.5325, Accuracy: 0.5694\n","Epoch: 40, Loss: 45.4847, Accuracy: 0.5694\n","Epoch: 60, Loss: 31.7516, Accuracy: 0.6389\n","Epoch: 80, Loss: 14.8958, Accuracy: 0.6111\n","Epoch: 100, Loss: 18.2536, Accuracy: 0.6528\n","1/1 [==============================] - 0s 140ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Best validation accuracy: 56.25%\n"]}]},{"cell_type":"markdown","source":["# Evaluation"],"metadata":{"id":"rWfzCo3i9osr"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Predict on the test set\n","y_pred_time = (best_model_time.predict(X_test_time) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_time = accuracy_score(y_test_time, y_pred_time)\n","print(f\"Test Accuracy: {test_accuracy_time * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_time = confusion_matrix(y_test_time, y_pred_time)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_time).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_time = classification_report(y_test_time, y_pred_time)\n","print(\"Classification Report:\")\n","print(report_time)\n"],"metadata":{"id":"zyNacevWbcUG","colab":{"base_uri":"https://localhost:8080/","height":680},"executionInfo":{"status":"ok","timestamp":1713879569446,"user_tz":240,"elapsed":829,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"3d519ae5-0770-492a-ac0b-9590cebb133c"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 7ms/step\n","Test Accuracy: 57.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.73      0.46      0.56        24\n","           1       0.48      0.75      0.59        16\n","\n","    accuracy                           0.57        40\n","   macro avg       0.61      0.60      0.57        40\n","weighted avg       0.63      0.57      0.57        40\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Assume we have a trained model, and the X_test and y_test sets as per your previous code.\n","\n","# Predict on the test set\n","y_pred_frequency = (best_model_frequency.predict(X_test_frequency) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_frequency = accuracy_score(y_test_frequency, y_pred_frequency)\n","print(f\"Test Accuracy: {test_accuracy_frequency * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_frequency = confusion_matrix(y_test_frequency, y_pred_frequency)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_frequency).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_frequency = classification_report(y_test_frequency, y_pred_frequency)\n","print(\"Classification Report:\")\n","print(report_frequency)\n"],"metadata":{"id":"Z2q05UU4bYs1","colab":{"base_uri":"https://localhost:8080/","height":680},"executionInfo":{"status":"ok","timestamp":1713879570534,"user_tz":240,"elapsed":1094,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"ec497efd-25ac-4a4a-a424-70ade3cd037f"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 9ms/step\n","Test Accuracy: 67.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"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5PAbsbGxkqQTJ05Uav+9e/cqJCREzZs3dxpPSEhQrVq1tHfvXqfxRo0aVThH7dq19euvv1Yx4opuvvlmdenSRcOGDVP9+vU1aNAgvfHGG7+Z1MvjbNGiRYXvWrZsqZ9//lnFxcVO4+f/ltq1a0uSS7/lhhtuUExMjF5//XUtXbpUHTt2rPBnWc5ut2v27Nn6wx/+IKvVqjp16qhu3br65ptvdPz48Upfs2HDhi4tbHvyyScVHx+v3NxczZ07V/Xq1av0sYBZkMjhN2JjY2Wz2fTtt9+6dNz5i80uJjQ09ILjhmFU+Rrl87flIiMjtW7dOn300Ue6/fbb9c033+jmm2/WddddV2Ffd7jzW8pZrVYNGDBAixcv1vLlyy9ajUvS448/rszMTHXr1k3//Oc/9cEHH2jVqlVq3bp1pTsP0rk/H1ds3rxZR44ckSRt3brVpWMBsyCRw6/07t1bu3bt0oYNG35336SkJNntdu3cudNp/PDhwzp27JhjBbon1K5d22mFd7nzq35JCgkJ0Z///GfNmjVL33//vaZNm6Y1a9bo448/vuC5y+Pcvn17he9++OEH1alTR1FRUe79gIu49dZbtXnzZp04ceKCCwTLvfnmm0pNTdVLL72kQYMGqUePHurevXuFP5PK/qOqMoqLi5WRkaFWrVrp7rvv1owZM/T111977PxAsCCRw688/PDDioqK0rBhw3T48OEK3+/atUtPP/20pHOtYUkVVpbPmjVLktSrVy+PxdWsWTMdP35c33zzjWPs4MGDWr58udN+R48erXBs+YNRzr8lrlyDBg3Uvn17LV682Ckxfvvtt/rwww8dv9MbUlNTNXXqVD3zzDNKSEi46H6hoaEVqv1//etf2r9/v9NY+T84LvSPHleNGTNG+/bt0+LFizVr1iw1btxY6enpF/1zBMyKB8LArzRr1kzLli3TzTffrJYtWzo92W39+vX617/+pSFDhkiS2rVrp/T0dD3//PM6duyYkpOT9dVXX2nx4sXq37//RW9tqopBgwZpzJgxuvHGGzVixAidPHlSCxYs0GWXXea02GvKlClat26devXqpaSkJB05ckTPPvusLr30UnXt2vWi5585c6bS0tLUuXNn3XnnnTp16pTmzZunuLg4TZo0yWO/43whISH6+9///rv79e7dW1OmTFFGRoauueYabd26VUuXLlXT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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.72      0.75      0.73        24\n","           1       0.60      0.56      0.58        16\n","\n","    accuracy                           0.68        40\n","   macro avg       0.66      0.66      0.66        40\n","weighted avg       0.67      0.68      0.67        40\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Predict on the test set\n","y_pred_time_frequency = (best_model_time_frequency.predict(X_test_time_frequency) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_time_frequency = accuracy_score(y_test_time_frequency, y_pred_time_frequency)\n","print(f\"Test Accuracy: {test_accuracy_time_frequency * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_time_frequency = confusion_matrix(y_test_time_frequency, y_pred_time_frequency)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_time_frequency).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_time_frequency = classification_report(y_test_time_frequency, y_pred_time_frequency)\n","print(\"Classification Report:\")\n","print(report_time_frequency)\n"],"metadata":{"id":"fBno1H7YbTu9","colab":{"base_uri":"https://localhost:8080/","height":680},"executionInfo":{"status":"ok","timestamp":1713879571516,"user_tz":240,"elapsed":988,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"e348ec38-2367-4c15-d199-caae9fb6cd27"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 10ms/step\n","Test Accuracy: 67.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.54      0.67        24\n","           1       0.56      0.88      0.68        16\n","\n","    accuracy                           0.68        40\n","   macro avg       0.71      0.71      0.67        40\n","weighted avg       0.74      0.68      0.67        40\n","\n"]}]},{"cell_type":"code","source":["# Predict on the test set\n","y_pred_important_positions = (best_model_important_positions.predict(X_test_important_positions) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_important_positions = accuracy_score(y_test_important_positions, y_pred_important_positions)\n","print(f\"Test Accuracy: {test_accuracy_important_positions * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_important_positions = confusion_matrix(y_test_important_positions, y_pred_important_positions)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_important_positions).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_important_positions = classification_report(y_test_important_positions, y_pred_important_positions)\n","print(\"Classification Report:\")\n","print(report_important_positions)\n"],"metadata":{"id":"vA1bwz2YfjIk","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879572023,"user_tz":240,"elapsed":517,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"6b98b1e7-75d3-4b58-efa7-8789ccb57903"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 5ms/step\n","Test Accuracy: 52.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.67      0.42      0.51        24\n","           1       0.44      0.69      0.54        16\n","\n","    accuracy                           0.53        40\n","   macro avg       0.55      0.55      0.52        40\n","weighted avg       0.58      0.53      0.52        40\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Assume models and test datasets are defined for each type\n","# Predict probabilities for the positive class for all models\n","y_pred_probs_time = best_model_time.predict(X_test_time).ravel()\n","y_pred_probs_frequency = best_model_frequency.predict(X_test_frequency).ravel()\n","y_pred_probs_time_frequency = best_model_time_frequency.predict(X_test_time_frequency).ravel()\n","y_pred_probs_important_positions = best_model_important_positions.predict(X_test_important_positions).ravel()  # New model\n","\n","# Compute the ROC curve for each model\n","fpr_time, tpr_time, thresholds_time = roc_curve(y_test_time, y_pred_probs_time)\n","roc_auc_time = auc(fpr_time, tpr_time)\n","\n","fpr_frequency, tpr_frequency, thresholds_frequency = roc_curve(y_test_frequency, y_pred_probs_frequency)\n","roc_auc_frequency = auc(fpr_frequency, tpr_frequency)\n","\n","fpr_time_frequency, tpr_time_frequency, thresholds_time_frequency = roc_curve(y_test_time_frequency, y_pred_probs_time_frequency)\n","roc_auc_time_frequency = auc(fpr_time_frequency, tpr_time_frequency)\n","\n","fpr_important_positions, tpr_important_positions, thresholds_important_positions = roc_curve(y_test_important_positions, y_pred_probs_important_positions)  # New ROC computation\n","roc_auc_important_positions = auc(fpr_important_positions, tpr_important_positions)  # New AUC computation\n","\n","# Plot the ROC curves\n","plt.figure(figsize=(10, 8))\n","plt.plot(fpr_time, tpr_time, color='darkorange', lw=2, label='Time ROC curve (area = %0.2f)' % roc_auc_time)\n","plt.plot(fpr_frequency, tpr_frequency, color='blue', lw=2, label='Frequency ROC curve (area = %0.2f)' % roc_auc_frequency)\n","plt.plot(fpr_time_frequency, tpr_time_frequency, color='yellow', lw=2, label='Time&Frequency ROC curve (area = %0.2f)' % roc_auc_time_frequency)\n","plt.plot(fpr_important_positions, tpr_important_positions, color='green', lw=2, label='Important Positions ROC curve (area = %0.2f)' % roc_auc_important_positions)  # New curve\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()\n"],"metadata":{"id":"B9EsUlfy9i4d","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1713879573736,"user_tz":240,"elapsed":1723,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"aacde821-ad24-42d1-83d5-7e0368bc3486"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 8ms/step\n","2/2 [==============================] - 0s 9ms/step\n","2/2 [==============================] - 0s 9ms/step\n","2/2 [==============================] - 0s 9ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"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9NFHjB07lrZt2zJu3DgOHTpE7969KVGixFUP8fvhhx9ITExkyJAhGd7vv/r370+1atV444032Lx5MzNmzCA4OJiJEye65KpXrx633XYbXl5efPvttzzwwAPY7XbGjBnj8nx79uxh0KBB3HfffYwaNYratWtn6TlmzZrFiBEjqFevHk8//TTFixdny5YtLF++nMGDB/Pss88SGRnJsWPHnCtzxYoVA8jy34+ff/6ZBQsWMHbsWEqXLp3m0M9ko0ePZuHChYwdO5a6dety9uxZ1q5dy65du2jatGmGmdKzfft22rZti7e3N/feey8hISHs37+fb7/9ltdeey1zv3EiIgCGiIgb+eyzzwzAWLlypXHmzBnj6NGjxsKFC40yZcoYvr6+xtGjR5337dy5s9GgQQMjNjbWOWe3243WrVsb1113nXPu+eefNwBj8eLFaV7PbrcbhmEYc+fONTw8PIzffvvN5fPTpk0zAGPdunXOuapVqxrDhg1zjp9++mnD29vbOHfunHMuLi7OKF68uDFixAjn3MiRI43y5csbERERLq8xcOBAIygoyLh8+bJhGIaxevVqAzCqV6/unMtI7969DcA4f/78Fe+zePFiAzDeffddwzAM4+DBgwZg+Pv7G8eOHXPe7/fffzcAY9y4cc65zH6fk3/vbrrpJiMxMdHl9dP7OjZs2GAAxpw5c5xzYWFhBmCsXr06zf3bt29vtG/f3jlO/j7VqVPHiIuLc85PnTrVAIwdO3YYhmH+XpQqVcq44YYbjISEBOf9Zs2aZQAuz5mecePGGYCxZcuWDO+X7IUXXjAAl997wzCMO+64wyhVqpTLXHrfl+7duxvVq1d3matataoBGMuXL09z/8w8x4ULF4yAgACjZcuWRkxMjMt9k/8OGIZh3HrrrUbVqlXTPF9W/n4AhoeHh/H333+neR7AeOGFF5zjoKAgY8yYMWnul9qVMiX/Gf7ss8+cc+3atTMCAgKMw4cPX/FrFBHJDB0uKCJuqUuXLpQpU4bKlSvTr18/ihYtytKlS52rDufOnePnn3+mf//+REdHExERQUREBGfPnqV79+7s27fPuRvhokWLaNSoUZoVFzAPXwIICwujTp06XH/99c7nioiIoFOnTgCsXr36ilkHDBhAQkICixcvds79+OOPXLhwgQEDBgDmOTSLFi2iV69eGIbh8hrdu3cn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FiZzPypZIiIiIiJubteuM4SGhvH332ecc/ff35xJk7rj56dKkNP0HRURERERcWNnz17mxhs/JSoqDoCiRb2ZPr2XDg/MRTonS0RERETEjZUqVYTHH28NQP36wWzadK8KVi7TSpaIiIiIiJt75pm2FC3qzX33NadIEW+r47g9rWSJiIiIiLiRhQv/4f33/3CZ8/CwMW5cKxWsPKKVLBERERERNxAXl8jjj//Ee+/9gaenjSZNytGmTRWrYxVKWskSERERESngDh26QNu2n/Hee+YKVlKSwaJFuyxOVXhpJUtEREREpABbunQPw4Yt4cKFWAB8fT2ZOvVm7r23mcXJCi+VLBERERGRAighIYlnn/2Zt95a75yrUaMEYWGhNGlS3sJkopIlIiIiIlLAHDsWxYABC1m//qhzrm/fOnz66W0EBflZmExAJUtEREREpMAZNGiRs2B5e3vw9tvdePDBFthsNouTCWjjCxERERGRAufDD2/Bz8+LqlWDWLt2BA891FIFKx/RSpaIiIiISAHToEFZli4dSLNmFShZ0t/qOPIfWskSEREREcnHVq8+SO/eXxEfn+Qy37VrDRWsfEolS0REREQkH7LbDV599Ve6dJnLN9/s4cknf7I6kmSSDhcUEREREclnzpy5xJAhX7NixX7n3D//RJCQkIS3t6eFySQztJIlIiIiIpKPrF17hCZNPnYWLA8PGy+/3IFlywarYBUQWskSEREREckH7HaDd95Zz9NPryIpyQCgbNmizJvXl06dqlmcTrJCJUtERERExGLnzsVw991L+Pbbvc659u2r8uWXfSlfPsDCZHItdLigiIiIiIjFPvzwT5eC9eyzbVm5cqgKVgGllSwREREREYs9+WQbli3bx969Z/n88z7cfHNNqyNJNqhkiYhIHjOA54CpwCWLsxRSqf73X/NPYzqWtSDDdd9D7+FQ9IwFL+6qf3/gH6tTSGFjtxt4eNicY29vTxYsCMUwDCpXDrIwmeQEHS4oIiJ5yADGAq+jgpU/nD1bypoXvuGjfFGwAIix6HvgUMralxcLbN58koYNP2Lr1nCX+UqVAlWw3IRWskREJI8YwEPAh46xB3ADYLviI9zV2bOw13HqhY+P+ZGnkmLBnsCFsyVY8tUYbrwxj18f+KdkLFGO20Uv3IANa7alDjh/E1XKdsBmxWoeULUqPPSQNa8t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ypUrx7Jly/TqDh06RPXq1fn22291da+PUiYmOe+NQ4cO8ddff9GwYUMAbt26xaNHj5Jst2nTpvESxzflyZMn0eeqVavG7t27GTBggK5u586dVKtWLck2Afbv38/Vq1dTtPriuXPnKFdOvgDPCGQJ9zQQFDRVt339+nfvfAGqRmnosqEL90K1V0o3KNCAQdXjXzgbT2w0bG4L1zZry6bW0GIr5H77L3ZCDh26Sdmys9m+XfvHLiIihkOHEh9iF0II8Wno06cPT548oV27dhw/fpyAgAC2b99O165diY2NxdbWlu7duzN48GD27NnDuXPn8PT0xNhY/2NH3bp1mTlzJqdPn+bEiRN88803eqNSHTp0wN7eHnd3d3x8fAgMDGTfvn1899133L59O1mxuri40KVLF7p168aGDRt0baxatUq3j4mJCZ6engwbNoxChQol6wPxm6pVq0bp0qUZN047A8XGxoY5c+awceNGevbsiZ+fH9evX2f+/Pl4enrSqlUr3cIOzs7OTJkyhWnTptG9e3f279/PjRs3OHToEL169dIlY2+qXbs2tWrVomXLluzcuZPAwED+/fdftm3TftFap04dHj58yG+//UZAQAB//vnnOy3v3aFDB1auXMnq1avjJVO//PIL48ePZ/r06Vy5coWzZ8+ycOFC/vjjj0Tbc3V15fz583qjWYUKFeLEiRNs376dK1euMGLECI4fP56s2N723ihUqBBLly7l4sWLHD16lA4dOrx1hCdTpkwULFgwyUdSbfTv359t27YxefJkLl26xKhRozhx4gR9+/bV7TNs2DA6d+4c79j58+dTpUoVSpaMv7hZaGgovr6+uiQ5MDAQX1/feFMffXx8aNCgQZLnKNJJql7h9QFI64UvHj58oMLDLZRSqKdPM6uQkJB3buP3Q7/rFrrI8XsOde/5vbcfFBut1CaPV4tcTLVS6saedz8BpZRGo1G//35ImZj8olue3dHxd7VrV8B7tSeEEJ+Cj3kJ99cXq3jpypUrqnnz5ipLlizKyspKFS1aVA0YMEC3EMHz589Vx44dlbW1tcqRI4f67bff4rV1584d1aBBA2VjY6MKFSqktm7dGm8J96CgINW5c2dlb2+vLCws1GeffaZ69Oih+z+eUOz9+/dXtWvX1pXDw8PV999/r3LlyqXMzc1VwYIF1YIFC/SOCQgIUID6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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"uTAYXQYiRf1U","executionInfo":{"status":"ok","timestamp":1713879573736,"user_tz":240,"elapsed":24,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yY2wY8OhTlZH","executionInfo":{"status":"ok","timestamp":1713879573736,"user_tz":240,"elapsed":22,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":41,"outputs":[]}]}