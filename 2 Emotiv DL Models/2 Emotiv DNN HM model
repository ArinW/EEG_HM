{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["dPyQvA3d9Cqn","sCvlTL6N9QO_","eH5eSZ58-nMC","rWfzCo3i9osr"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":51,"metadata":{"id":"Ma1h3Y1DoSl2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713877774098,"user_tz":240,"elapsed":1562,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"7125ac95-62b6-491f-ba6a-5f85e4c24f4e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["\n","import pandas as pd\n","import numpy as np"],"metadata":{"id":"r4AOB6Zvoaug","executionInfo":{"status":"ok","timestamp":1713877774098,"user_tz":240,"elapsed":3,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":52,"outputs":[]},{"cell_type":"markdown","source":["# Hand Movement Features"],"metadata":{"id":"FqSvAC3481AP"}},{"cell_type":"markdown","source":["## Load Data"],"metadata":{"id":"dPyQvA3d9Cqn"}},{"cell_type":"code","source":["metadata=pd.read_excel(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv-based-Data/Demographic Details of Participants.xlsx\")\n","metadata.columns=[\n","    \"User ID\", \"Age\", \"Gender\", \"Dominant Hand\", \"Date / Time\",\n","    \"Video ID 1\", \"Video ID 2\", \"Date / Time\", \"Video ID 3\", \"Video ID 4\"]\n","metadata.head()"],"metadata":{"id":"1KBh-AYiq5J6","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1713877774499,"user_tz":240,"elapsed":403,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"4c833bea-5331-4d3f-ac65-c72f89bb03a0"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Age  Gender Dominant Hand            Date / Time  Video ID 1  \\\n","0   Test0   27    Male         Right  08/18/2019/2:00:00 PM          15   \n","1   Test1   24    Male         Right  08/18/2019/3:20:00 PM           5   \n","2   test2   30  Female         Right  08/19/2019/4:20:00 PM           8   \n","3   test3   25    Male         Right  08/20/2019/1:28:00 PM          14   \n","4   test4   24    Male          Left  08/21/2019/3:20:00 PM          12   \n","\n","   Video ID 2            Date / Time  Video ID 3  Video ID 4  \n","0           8  08/23/2019/3:40:00 PM         2.0        11.0  \n","1           5  08/22/2019/4:30:00 PM         9.0         5.0  \n","2          11  08/20/2019/4:40:00 PM         5.0         2.0  \n","3           7  08/28/2019/3:15:00 PM        15.0         1.0  \n","4           6  08/30/2019/5:10:00 PM        15.0        19.0  "],"text/html":["\n","  <div id=\"df-d93ec745-067b-4a95-9f62-6f268fec9243\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Dominant Hand</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>27</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/2:00:00 PM</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>08/23/2019/3:40:00 PM</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/3:20:00 PM</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>08/22/2019/4:30:00 PM</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>30</td>\n","      <td>Female</td>\n","      <td>Right</td>\n","      <td>08/19/2019/4:20:00 PM</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>08/20/2019/4:40:00 PM</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>25</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/20/2019/1:28:00 PM</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>08/28/2019/3:15:00 PM</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Left</td>\n","      <td>08/21/2019/3:20:00 PM</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>08/30/2019/5:10:00 PM</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d93ec745-067b-4a95-9f62-6f268fec9243')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d93ec745-067b-4a95-9f62-6f268fec9243 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d93ec745-067b-4a95-9f62-6f268fec9243');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7e2d05c9-ec12-4216-91c7-2f6a737bb504\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e2d05c9-ec12-4216-91c7-2f6a737bb504')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7e2d05c9-ec12-4216-91c7-2f6a737bb504 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata","summary":"{\n  \"name\": \"metadata\",\n  \"rows\": 28,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"test9\",\n          \"test25\",\n          \"test8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 19,\n        \"max\": 31,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          19,\n          27,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dominant Hand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Left\",\n          \"Right\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"08/28/2019/2:00:00 PM\",\n          \"09/25/2019/3:35:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          3,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"09.25/2019/4:45:00 PM\",\n          \"09/17/2019/8:05:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["metadata_video_id=metadata[[\"User ID\",\"Video ID 1\", \"Video ID 2\", \"Video ID 3\", \"Video ID 4\"]]\n","metadata_video_id=metadata_video_id.dropna()\n","metadata_video_id.head()"],"metadata":{"id":"yYFBOP20rO_M","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1713877774499,"user_tz":240,"elapsed":13,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"8d4f423b-66ac-4b95-a4e2-d346bdc23336"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Video ID 1  Video ID 2  Video ID 3  Video ID 4\n","0   Test0          15           8         2.0        11.0\n","1   Test1           5           5         9.0         5.0\n","2   test2           8          11         5.0         2.0\n","3   test3          14           7        15.0         1.0\n","4   test4          12           6        15.0        19.0"],"text/html":["\n","  <div id=\"df-35e31d33-dd95-498c-b70f-b3b73721ce81\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35e31d33-dd95-498c-b70f-b3b73721ce81')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-35e31d33-dd95-498c-b70f-b3b73721ce81 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-35e31d33-dd95-498c-b70f-b3b73721ce81');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c2ebf26c-410b-415b-befa-ca65ee81901d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c2ebf26c-410b-415b-befa-ca65ee81901d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c2ebf26c-410b-415b-befa-ca65ee81901d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata_video_id","summary":"{\n  \"name\": \"metadata_video_id\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"test8\",\n          \"test16\",\n          \"Test0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          13,\n          10,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["# # add Emotion column\n","# metadata_video_id_list = metadata_video_id.drop('User ID', axis=1).values.flatten().tolist()\n","# metadata_video_id_list = [int(item) for item in metadata_video_id_list for _ in range(2)] #to int and double the time\n","# metadata_video_id_list = [1 if item in [1,2,5,6,13,14,15,16,17,18] else 0 for item in metadata_video_id_list] #map\n","# df_time_filtered[\"Emotion\"]=metadata_video_id_list\n","# # len(metadata_video_id_list)\n","# # metadata_video_id_list"],"metadata":{"id":"V8FlGgG1txp-","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":13,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["# metadata_video_id_list"],"metadata":{"id":"xV9T1cMerrw4","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":12,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# # Drop \"Unnamed: 0\",\"Test\" columns\n","# df_time_filtered=df_time_filtered.drop(columns=[\"Unnamed: 0\",\"Test\"])\n","# df_time_filtered"],"metadata":{"id":"I_O0ca9vvdgL","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":12,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["df_rhm_acc = pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv_Right_acc_extracted.csv\")\n","df_rhm_gyro= pd.read_csv(\"/content/drive/MyDrive//JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv_Right_gyro_extracted.csv\")"],"metadata":{"id":"sicGEYy085cX","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":12,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["# Concatenate two df toghther\n","def add_suffix_to_feature_names(df, suffix):\n","    new_column_names = {col: col + suffix for col in df.columns}\n","    return df.rename(columns=new_column_names)\n","\n","df_rhm_acc = add_suffix_to_feature_names(df_rhm_acc, '_acc')\n","df_rhm_gyro = add_suffix_to_feature_names(df_rhm_gyro, '_gyro')\n","\n","# drop filename\n","df_rhm_acc=df_rhm_acc.drop(columns=[\"Filename_Part_acc\"])\n","df_rhm_gyro=df_rhm_gyro.drop(columns=[\"Filename_Part_gyro\"])\n","\n","# concate\n","df_rhm = pd.concat([df_rhm_acc, df_rhm_gyro], axis = 1)\n","\n","# Add the \"Emotion\" column\n","metadata_video_id_list = metadata_video_id.drop('User ID', axis=1).values.flatten().tolist()\n","metadata_video_id_list = [int(item) for item in metadata_video_id_list for _ in range(2)]\n","metadata_video_id_list = [1 if item in [1,2,5,6,13,14,15,16,17,18] else 0 for item in metadata_video_id_list]\n","df_rhm[\"Emotion\"]=metadata_video_id_list"],"metadata":{"id":"Gd2FzclV80Vp","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":11,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":59,"outputs":[]},{"cell_type":"markdown","source":["## Train test split"],"metadata":{"id":"AWvztzei9ndA"}},{"cell_type":"code","source":["# Assign number for each participant.\n","folder = [num for num in range(1, 26) for _ in range(8)]\n","df_rhm[\"Folder\"]=folder\n","df_rhm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"OtcOdT9-9phB","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":11,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"3fc75e66-748f-4d06-b81f-2f68334834c0"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     X_mean_acc  X_std_acc  X_var_acc  X_median_acc  X_min_acc  X_max_acc  \\\n","0     -6.846076   1.127397   1.271024     -7.291028  -9.866585   3.020774   \n","1      2.378614   0.445303   0.198294      2.427151 -15.984729  19.594337   \n","2     -4.600323   1.208001   1.459265     -4.332489  -8.411251   2.436726   \n","3      2.307475   0.842399   0.709637      2.494173  -5.548458   6.352721   \n","4     -0.876954   0.603183   0.363829     -1.010116  -5.711226   2.800559   \n","..          ...        ...        ...           ...        ...        ...   \n","195   -1.026608   0.673073   0.453027     -0.895221  -7.166558   4.294190   \n","196    0.855077   0.705780   0.498126      0.684581  -2.963326  16.674097   \n","197    1.761846   0.449221   0.201799      1.766506  -3.710142   6.534637   \n","198   -0.530926   1.917458   3.676647     -0.694156 -11.762347  10.220843   \n","199    0.666244   0.960139   0.921866      1.144160  -5.213348   5.682502   \n","\n","     X_activity_acc  X_mobility_acc  X_complexity_acc  X_ar_coeff_0_acc  ...  \\\n","0          1.271024        0.033221         41.360217          1.039849  ...   \n","1          0.198294        0.283186          3.950224          1.344210  ...   \n","2          1.459265        0.029166         48.092388          1.015230  ...   \n","3          0.709637        0.108667         10.930011          1.282584  ...   \n","4          0.363829        0.072352         16.832129          1.235047  ...   \n","..              ...             ...               ...               ...  ...   \n","195        0.453027        0.190876          6.090877          1.327769  ...   \n","196        0.498126        0.117301         10.614548          1.285143  ...   \n","197        0.201799        0.241573          5.045190          1.340544  ...   \n","198        3.676647        0.049494         22.914340          1.349513  ...   \n","199        0.921866        0.092335         12.092435          1.449848  ...   \n","\n","     Z_Grad1mean_gyro  Z_Grad1std_gyro  Z_Grad1var_gyro  Z_Grad2mean_gyro  \\\n","0        1.317114e-06         0.006302         0.000040     -2.942488e-07   \n","1       -3.791419e-07         0.018311         0.000335      9.977444e-09   \n","2        2.087315e-07         0.003741         0.000014      2.087315e-07   \n","3        5.823871e-08         0.011482         0.000132      1.164774e-07   \n","4       -2.100619e-06         0.006216         0.000039      5.410685e-07   \n","..                ...              ...              ...               ...   \n","195      2.519509e-06         0.021359         0.000456     -1.619685e-07   \n","196     -9.003508e-08         0.011652         0.000136     -4.951929e-07   \n","197      3.601153e-07         0.012731         0.000162      4.801537e-07   \n","198      4.529143e-07         0.015796         0.000250     -1.171670e-06   \n","199     -1.425811e-06         0.014292         0.000204      3.830537e-07   \n","\n","     Z_Grad2std_gyro  Z_Grad2var_gyro  Z_SEntropy_gyro  All_SMV_gyro  Emotion  \\\n","0           0.002580         0.000007         3.901216      0.067171        1   \n","1           0.008738         0.000076         5.299957      0.135881        1   \n","2           0.001756         0.000003         3.767423      0.039921        0   \n","3           0.005286         0.000028         5.899198      0.157682        0   \n","4           0.002682         0.000007         2.802608      0.047825        1   \n","..               ...              ...              ...           ...      ...   \n","195         0.009887         0.000098         6.740643      0.214154        1   \n","196         0.005225         0.000027         3.689207      0.062542        0   \n","197         0.006654         0.000044         6.276326      0.194280        0   \n","198         0.007516         0.000056         5.348136      0.188279        1   \n","199         0.007510         0.000056         6.435570      0.218638        1   \n","\n","     Folder  \n","0         1  \n","1         1  \n","2         1  \n","3         1  \n","4         1  \n","..      ...  \n","195      25  \n","196      25  \n","197      25  \n","198      25  \n","199      25  \n","\n","[200 rows x 154 columns]"],"text/html":["\n","  <div id=\"df-e082cde2-805c-4f23-bdc3-df6ead953910\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X_mean_acc</th>\n","      <th>X_std_acc</th>\n","      <th>X_var_acc</th>\n","      <th>X_median_acc</th>\n","      <th>X_min_acc</th>\n","      <th>X_max_acc</th>\n","      <th>X_activity_acc</th>\n","      <th>X_mobility_acc</th>\n","      <th>X_complexity_acc</th>\n","      <th>X_ar_coeff_0_acc</th>\n","      <th>...</th>\n","      <th>Z_Grad1mean_gyro</th>\n","      <th>Z_Grad1std_gyro</th>\n","      <th>Z_Grad1var_gyro</th>\n","      <th>Z_Grad2mean_gyro</th>\n","      <th>Z_Grad2std_gyro</th>\n","      <th>Z_Grad2var_gyro</th>\n","      <th>Z_SEntropy_gyro</th>\n","      <th>All_SMV_gyro</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-6.846076</td>\n","      <td>1.127397</td>\n","      <td>1.271024</td>\n","      <td>-7.291028</td>\n","      <td>-9.866585</td>\n","      <td>3.020774</td>\n","      <td>1.271024</td>\n","      <td>0.033221</td>\n","      <td>41.360217</td>\n","      <td>1.039849</td>\n","      <td>...</td>\n","      <td>1.317114e-06</td>\n","      <td>0.006302</td>\n","      <td>0.000040</td>\n","      <td>-2.942488e-07</td>\n","      <td>0.002580</td>\n","      <td>0.000007</td>\n","      <td>3.901216</td>\n","      <td>0.067171</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.378614</td>\n","      <td>0.445303</td>\n","      <td>0.198294</td>\n","      <td>2.427151</td>\n","      <td>-15.984729</td>\n","      <td>19.594337</td>\n","      <td>0.198294</td>\n","      <td>0.283186</td>\n","      <td>3.950224</td>\n","      <td>1.344210</td>\n","      <td>...</td>\n","      <td>-3.791419e-07</td>\n","      <td>0.018311</td>\n","      <td>0.000335</td>\n","      <td>9.977444e-09</td>\n","      <td>0.008738</td>\n","      <td>0.000076</td>\n","      <td>5.299957</td>\n","      <td>0.135881</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-4.600323</td>\n","      <td>1.208001</td>\n","      <td>1.459265</td>\n","      <td>-4.332489</td>\n","      <td>-8.411251</td>\n","      <td>2.436726</td>\n","      <td>1.459265</td>\n","      <td>0.029166</td>\n","      <td>48.092388</td>\n","      <td>1.015230</td>\n","      <td>...</td>\n","      <td>2.087315e-07</td>\n","      <td>0.003741</td>\n","      <td>0.000014</td>\n","      <td>2.087315e-07</td>\n","      <td>0.001756</td>\n","      <td>0.000003</td>\n","      <td>3.767423</td>\n","      <td>0.039921</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.307475</td>\n","      <td>0.842399</td>\n","      <td>0.709637</td>\n","      <td>2.494173</td>\n","      <td>-5.548458</td>\n","      <td>6.352721</td>\n","      <td>0.709637</td>\n","      <td>0.108667</td>\n","      <td>10.930011</td>\n","      <td>1.282584</td>\n","      <td>...</td>\n","      <td>5.823871e-08</td>\n","      <td>0.011482</td>\n","      <td>0.000132</td>\n","      <td>1.164774e-07</td>\n","      <td>0.005286</td>\n","      <td>0.000028</td>\n","      <td>5.899198</td>\n","      <td>0.157682</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.876954</td>\n","      <td>0.603183</td>\n","      <td>0.363829</td>\n","      <td>-1.010116</td>\n","      <td>-5.711226</td>\n","      <td>2.800559</td>\n","      <td>0.363829</td>\n","      <td>0.072352</td>\n","      <td>16.832129</td>\n","      <td>1.235047</td>\n","      <td>...</td>\n","      <td>-2.100619e-06</td>\n","      <td>0.006216</td>\n","      <td>0.000039</td>\n","      <td>5.410685e-07</td>\n","      <td>0.002682</td>\n","      <td>0.000007</td>\n","      <td>2.802608</td>\n","      <td>0.047825</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>-1.026608</td>\n","      <td>0.673073</td>\n","      <td>0.453027</td>\n","      <td>-0.895221</td>\n","      <td>-7.166558</td>\n","      <td>4.294190</td>\n","      <td>0.453027</td>\n","      <td>0.190876</td>\n","      <td>6.090877</td>\n","      <td>1.327769</td>\n","      <td>...</td>\n","      <td>2.519509e-06</td>\n","      <td>0.021359</td>\n","      <td>0.000456</td>\n","      <td>-1.619685e-07</td>\n","      <td>0.009887</td>\n","      <td>0.000098</td>\n","      <td>6.740643</td>\n","      <td>0.214154</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>0.855077</td>\n","      <td>0.705780</td>\n","      <td>0.498126</td>\n","      <td>0.684581</td>\n","      <td>-2.963326</td>\n","      <td>16.674097</td>\n","      <td>0.498126</td>\n","      <td>0.117301</td>\n","      <td>10.614548</td>\n","      <td>1.285143</td>\n","      <td>...</td>\n","      <td>-9.003508e-08</td>\n","      <td>0.011652</td>\n","      <td>0.000136</td>\n","      <td>-4.951929e-07</td>\n","      <td>0.005225</td>\n","      <td>0.000027</td>\n","      <td>3.689207</td>\n","      <td>0.062542</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>1.761846</td>\n","      <td>0.449221</td>\n","      <td>0.201799</td>\n","      <td>1.766506</td>\n","      <td>-3.710142</td>\n","      <td>6.534637</td>\n","      <td>0.201799</td>\n","      <td>0.241573</td>\n","      <td>5.045190</td>\n","      <td>1.340544</td>\n","      <td>...</td>\n","      <td>3.601153e-07</td>\n","      <td>0.012731</td>\n","      <td>0.000162</td>\n","      <td>4.801537e-07</td>\n","      <td>0.006654</td>\n","      <td>0.000044</td>\n","      <td>6.276326</td>\n","      <td>0.194280</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>-0.530926</td>\n","      <td>1.917458</td>\n","      <td>3.676647</td>\n","      <td>-0.694156</td>\n","      <td>-11.762347</td>\n","      <td>10.220843</td>\n","      <td>3.676647</td>\n","      <td>0.049494</td>\n","      <td>22.914340</td>\n","      <td>1.349513</td>\n","      <td>...</td>\n","      <td>4.529143e-07</td>\n","      <td>0.015796</td>\n","      <td>0.000250</td>\n","      <td>-1.171670e-06</td>\n","      <td>0.007516</td>\n","      <td>0.000056</td>\n","      <td>5.348136</td>\n","      <td>0.188279</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>0.666244</td>\n","      <td>0.960139</td>\n","      <td>0.921866</td>\n","      <td>1.144160</td>\n","      <td>-5.213348</td>\n","      <td>5.682502</td>\n","      <td>0.921866</td>\n","      <td>0.092335</td>\n","      <td>12.092435</td>\n","      <td>1.449848</td>\n","      <td>...</td>\n","      <td>-1.425811e-06</td>\n","      <td>0.014292</td>\n","      <td>0.000204</td>\n","      <td>3.830537e-07</td>\n","      <td>0.007510</td>\n","      <td>0.000056</td>\n","      <td>6.435570</td>\n","      <td>0.218638</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 154 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e082cde2-805c-4f23-bdc3-df6ead953910')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e082cde2-805c-4f23-bdc3-df6ead953910 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e082cde2-805c-4f23-bdc3-df6ead953910');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7c159e68-af5f-4e8f-919d-e4576991c823\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c159e68-af5f-4e8f-919d-e4576991c823')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7c159e68-af5f-4e8f-919d-e4576991c823 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_93faa05b-6602-4744-bd50-3fb8a2e860f9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_rhm')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_93faa05b-6602-4744-bd50-3fb8a2e860f9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_rhm');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_rhm"}},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["import random\n","folder_names = [i for i in range(1, 26)]\n","\n","# Shuffle the folder names to ensure random distribution\n","random.shuffle(folder_names)\n","\n","# Calculate the indices for the 80-20 split\n","train_split = int(0.8 * len(folder_names))  # 80% for training\n","\n","# Split the folders into training, validation, and testing sets\n","train_folders = folder_names[:train_split]\n","# valid_folders = folder_names[train_split:valid_split]\n","test_folders = folder_names[train_split:]"],"metadata":{"id":"6LVHZYAn92JE","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":10,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["train_hm = df_rhm[df_rhm['Folder'].isin(train_folders)]\n","X_train_hm =train_hm.iloc[:,:-2]\n","y_train_hm=train_hm.iloc[:,-2]\n","\n","test_hm = df_rhm[df_rhm['Folder'].isin(test_folders)]\n","X_test_hm =test_hm.iloc[:,:-2]\n","y_test_hm=test_hm.iloc[:,-2]\n"],"metadata":{"id":"ffhdsa-g95Ko","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":10,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":62,"outputs":[]},{"cell_type":"markdown","source":["## DNN + CV"],"metadata":{"id":"UxgzBhgu99FF"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import accuracy_score\n","from tensorflow.keras.callbacks import LambdaCallback\n","\n","\n","# First, let's create a function to define the neural network\n","def create_model(input_shape):\n","    # Define the model\n","    model = Sequential()\n","    model.add(Dense(64, input_shape=(input_shape,), activation='relu'))\n","    model.add(Dense(32, activation='relu'))\n","    model.add(Dense(1, activation='sigmoid'))\n","    # Compile the model\n","    model.compile(optimizer=Adam(learning_rate=0.001),\n","                  loss='binary_crossentropy',\n","                  metrics=['accuracy'])\n","    return model\n","\n","batch_size=64"],"metadata":{"id":"L0kNnebHCUut","executionInfo":{"status":"ok","timestamp":1713877774500,"user_tz":240,"elapsed":10,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["cv_scores = []\n","best_model_hm = 0\n","best_accuracy_hm = 0\n","train_folders_name=train_folders.copy()\n","fold=10\n","\n","for i in range(fold):\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_hm[train_hm['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_hm[train_hm['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_hm = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_hm.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_hm.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_hm:\n","        best_accuracy_hm = val_accuracy\n","        best_model_hm = model_hm\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_hm * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1wfVy5IX98sd","executionInfo":{"status":"ok","timestamp":1713877847716,"user_tz":240,"elapsed":73225,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"32398980-9123-4e2f-f02d-9c0aeb43578f"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 0.5547, Accuracy: 0.7847\n","Epoch: 40, Loss: 0.4478, Accuracy: 0.8542\n","Epoch: 60, Loss: 0.3962, Accuracy: 0.8125\n","Epoch: 80, Loss: 0.3164, Accuracy: 0.9444\n","Epoch: 100, Loss: 0.2691, Accuracy: 0.9375\n","1/1 [==============================] - 0s 56ms/step\n","Fold completed. Validation accuracy: 25.00%\n","Epoch: 20, Loss: 0.5761, Accuracy: 0.6806\n","Epoch: 40, Loss: 0.4865, Accuracy: 0.7778\n","Epoch: 60, Loss: 0.4196, Accuracy: 0.8681\n","Epoch: 80, Loss: 0.3634, Accuracy: 0.8681\n","Epoch: 100, Loss: 0.3099, Accuracy: 0.9444\n","1/1 [==============================] - 0s 59ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Epoch: 20, Loss: 0.5916, Accuracy: 0.6736\n","Epoch: 40, Loss: 0.4787, Accuracy: 0.7847\n","Epoch: 60, Loss: 0.4119, Accuracy: 0.8472\n","Epoch: 80, Loss: 0.3626, Accuracy: 0.8681\n","Epoch: 100, Loss: 0.3210, Accuracy: 0.8819\n","1/1 [==============================] - 0s 61ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Epoch: 20, Loss: 0.6136, Accuracy: 0.7083\n","Epoch: 40, Loss: 0.5110, Accuracy: 0.8333\n","Epoch: 60, Loss: 0.4341, Accuracy: 0.8611\n","Epoch: 80, Loss: 0.3454, Accuracy: 0.9236\n","Epoch: 100, Loss: 0.2816, Accuracy: 0.9167\n","1/1 [==============================] - 0s 128ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Epoch: 20, Loss: 0.5476, Accuracy: 0.7153\n","Epoch: 40, Loss: 0.4606, Accuracy: 0.8472\n","Epoch: 60, Loss: 0.3801, Accuracy: 0.8889\n","Epoch: 80, Loss: 0.3486, Accuracy: 0.8889\n","Epoch: 100, Loss: 0.2689, Accuracy: 0.9097\n","1/1 [==============================] - 0s 60ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 0.5920, Accuracy: 0.6806\n","Epoch: 40, Loss: 0.5110, Accuracy: 0.7778\n","Epoch: 60, Loss: 0.4413, Accuracy: 0.8056\n","Epoch: 80, Loss: 0.3700, Accuracy: 0.9028\n","Epoch: 100, Loss: 0.3068, Accuracy: 0.9236\n","1/1 [==============================] - 0s 59ms/step\n","Fold completed. Validation accuracy: 68.75%\n","Epoch: 20, Loss: 0.5426, Accuracy: 0.7500\n","Epoch: 40, Loss: 0.4505, Accuracy: 0.8125\n","Epoch: 60, Loss: 0.3751, Accuracy: 0.8889\n","Epoch: 80, Loss: 0.3141, Accuracy: 0.8889\n","Epoch: 100, Loss: 0.2597, Accuracy: 0.9514\n","1/1 [==============================] - 0s 58ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Epoch: 20, Loss: 0.6546, Accuracy: 0.6250\n","Epoch: 40, Loss: 0.5772, Accuracy: 0.6875\n","Epoch: 60, Loss: 0.4953, Accuracy: 0.8056\n","Epoch: 80, Loss: 0.4340, Accuracy: 0.8750\n","Epoch: 100, Loss: 0.3784, Accuracy: 0.8611\n","1/1 [==============================] - 0s 58ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Epoch: 20, Loss: 0.5845, Accuracy: 0.7014\n","Epoch: 40, Loss: 0.4961, Accuracy: 0.7778\n","Epoch: 60, Loss: 0.4238, Accuracy: 0.8472\n","Epoch: 80, Loss: 0.3660, Accuracy: 0.9167\n","Epoch: 100, Loss: 0.3133, Accuracy: 0.9306\n","1/1 [==============================] - 0s 64ms/step\n","Fold completed. Validation accuracy: 68.75%\n","Epoch: 20, Loss: 0.6192, Accuracy: 0.6181\n","Epoch: 40, Loss: 0.5294, Accuracy: 0.7500\n","Epoch: 60, Loss: 0.4464, Accuracy: 0.7986\n","Epoch: 80, Loss: 0.3894, Accuracy: 0.8681\n","Epoch: 100, Loss: 0.3302, Accuracy: 0.8889\n","1/1 [==============================] - 0s 77ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Best validation accuracy: 68.75%\n"]}]},{"cell_type":"markdown","source":["# Evaluation"],"metadata":{"id":"rWfzCo3i9osr"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","# Predict on the test set\n","y_pred_hm = (best_model_hm.predict(X_test_hm) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_hm = accuracy_score(y_test_hm, y_pred_hm)\n","print(f\"Test Accuracy: {test_accuracy_hm * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_hm = confusion_matrix(y_test_hm, y_pred_hm)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_hm).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_hm = classification_report(y_test_hm, y_pred_hm)\n","print(\"Classification Report:\")\n","print(report_hm)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":680},"id":"FsZXEYi5_pzC","executionInfo":{"status":"ok","timestamp":1713877848219,"user_tz":240,"elapsed":522,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"a45bf3f1-a9d5-4c9e-8498-029bdeae6d59"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step\n","Test Accuracy: 50.00%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.55      0.50      0.52        22\n","           1       0.45      0.50      0.47        18\n","\n","    accuracy                           0.50        40\n","   macro avg       0.50      0.50      0.50        40\n","weighted avg       0.51      0.50      0.50        40\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Predict probabilities for the positive class\n","y_pred_probs_hm = best_model_hm.predict(X_test_hm).ravel()\n","\n","# Compute the ROC curve\n","fpr_hm, tpr_hm, thresholds_hm = roc_curve(y_test_hm, y_pred_probs_hm)\n","roc_auc_hm = auc(fpr_hm, tpr_hm)\n","\n","# Plot the ROC curve\n","plt.figure(figsize=(10, 8))\n","plt.plot(fpr_hm, tpr_hm, color='green', lw=2, label='HM ROC curve (area = %0.2f)' % roc_auc_hm)\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic - HM')\n","plt.legend(loc=\"lower right\")\n","plt.show()\n"],"metadata":{"id":"B9EsUlfy9i4d","colab":{"base_uri":"https://localhost:8080/","height":735},"executionInfo":{"status":"ok","timestamp":1713877848722,"user_tz":240,"elapsed":505,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"fa07f741-d18d-400c-be47-71d8067ea4d9"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"uTAYXQYiRf1U","executionInfo":{"status":"ok","timestamp":1713877848722,"user_tz":240,"elapsed":3,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yY2wY8OhTlZH","executionInfo":{"status":"ok","timestamp":1713877848722,"user_tz":240,"elapsed":3,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":66,"outputs":[]}]}