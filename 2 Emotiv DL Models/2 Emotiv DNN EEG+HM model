{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["dPyQvA3d9Cqn","sCvlTL6N9QO_","eH5eSZ58-nMC","rWfzCo3i9osr"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Ma1h3Y1DoSl2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713878909543,"user_tz":240,"elapsed":1223,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"4813a533-3231-4bea-eeb2-0a8a2fe0872b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["\n","import pandas as pd\n","import numpy as np"],"metadata":{"id":"r4AOB6Zvoaug"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Time Domain EEG Feature + HM Features"],"metadata":{"id":"5TfBr573x27p"}},{"cell_type":"markdown","source":["## Load Data"],"metadata":{"id":"dPyQvA3d9Cqn"}},{"cell_type":"code","source":["df_time=pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/time_domain_features\")"],"metadata":{"id":"X55kdfKYpdmA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_time"],"metadata":{"id":"obmgOg6aqkRn","colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"status":"ok","timestamp":1713878911840,"user_tz":240,"elapsed":11,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"87ca6434-27fd-4038-f54b-bdc04057da92"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0     AF3_mean    AF3_std      AF3_var   AF3_median  \\\n","0             0  4233.422687  43.471805  1889.797801  4231.794922   \n","1             1  4231.008787  44.189663  1952.726344  4229.743652   \n","2             2  4235.494381  25.175706   633.816192  4233.846191   \n","3             3  4237.481215  86.477155  7478.298389  4236.922852   \n","4             4  4233.419821  34.626376  1198.985906  4230.769043   \n","..          ...          ...        ...          ...          ...   \n","211         211  4239.671983  97.882280  9580.940701  4237.948730   \n","212         212  4229.912101  50.426474  2542.829266  4228.205078   \n","213         213  4234.076193  32.293637  1042.878960  4234.871582   \n","214         214  4236.514296  21.179939   448.589826  4236.410156   \n","215         215  4237.631749  19.933718   397.353096  4237.436035   \n","\n","         AF3_min      AF3_max  AF3_activity  AF3_mobility  AF3_complexity  \\\n","0    3241.025635  4429.230469   1889.797801      0.212561        5.546035   \n","1    3387.692139  5505.127930   1952.726344      0.269354        4.519996   \n","2    3968.205078  4438.974121    633.816192      0.379098        3.379011   \n","3    3529.743408  5739.486816   7478.298389      0.111843       11.086097   \n","4    3809.230713  4543.589844   1198.985906      0.264964        4.459335   \n","..           ...          ...           ...           ...             ...   \n","211   759.487183  4835.384277   9580.940701      0.106721       10.789804   \n","212  3890.256348  4543.076660   2542.829266      0.105597       11.185909   \n","213  4091.281982  4401.025391   1042.878960      0.171739        7.219231   \n","214  4070.769043  4437.435547    448.589826      0.276163        4.529806   \n","215  4154.871582  4365.641113    397.353096      0.257500        4.828735   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4          Test  \n","0          0.414635   EEG_Test0_1  \n","1          0.421499   EEG_Test0_2  \n","2          0.406884   EEG_Test0_3  \n","3          0.373620   EEG_Test0_4  \n","4          0.299771   EEG_Test0_5  \n","..              ...           ...  \n","211        0.378527  EEG_Test26_4  \n","212        0.257632  EEG_Test26_5  \n","213        0.374842  EEG_Test26_6  \n","214        0.310306  EEG_Test26_7  \n","215        0.370687  EEG_Test26_8  \n","\n","[216 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-ea867760-f138-4204-a375-e06b8cd1ab8f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>211</td>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>EEG_Test26_4</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>212</td>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>EEG_Test26_5</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>213</td>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>EEG_Test26_6</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>214</td>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>EEG_Test26_7</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>215</td>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>EEG_Test26_8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>216 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea867760-f138-4204-a375-e06b8cd1ab8f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ea867760-f138-4204-a375-e06b8cd1ab8f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ea867760-f138-4204-a375-e06b8cd1ab8f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1952a14d-7b62-4ae7-a3db-55d169f119cc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1952a14d-7b62-4ae7-a3db-55d169f119cc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1952a14d-7b62-4ae7-a3db-55d169f119cc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2a302ba9-e7ec-45bb-b702-31f9ca2035cf\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2a302ba9-e7ec-45bb-b702-31f9ca2035cf button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["rows_to_drop = ['Test20', 'Test21', 'Test27']\n","df_time_filtered = df_time[~df_time['Test'].str.contains('|'.join(rows_to_drop))]\n","df_time_filtered"],"metadata":{"id":"n9vteu-dujn5","colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"status":"ok","timestamp":1713878911840,"user_tz":240,"elapsed":9,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"1cb5d245-33e4-47a3-892e-2886a3a2c532"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Unnamed: 0     AF3_mean    AF3_std      AF3_var   AF3_median  \\\n","0             0  4233.422687  43.471805  1889.797801  4231.794922   \n","1             1  4231.008787  44.189663  1952.726344  4229.743652   \n","2             2  4235.494381  25.175706   633.816192  4233.846191   \n","3             3  4237.481215  86.477155  7478.298389  4236.922852   \n","4             4  4233.419821  34.626376  1198.985906  4230.769043   \n","..          ...          ...        ...          ...          ...   \n","211         211  4239.671983  97.882280  9580.940701  4237.948730   \n","212         212  4229.912101  50.426474  2542.829266  4228.205078   \n","213         213  4234.076193  32.293637  1042.878960  4234.871582   \n","214         214  4236.514296  21.179939   448.589826  4236.410156   \n","215         215  4237.631749  19.933718   397.353096  4237.436035   \n","\n","         AF3_min      AF3_max  AF3_activity  AF3_mobility  AF3_complexity  \\\n","0    3241.025635  4429.230469   1889.797801      0.212561        5.546035   \n","1    3387.692139  5505.127930   1952.726344      0.269354        4.519996   \n","2    3968.205078  4438.974121    633.816192      0.379098        3.379011   \n","3    3529.743408  5739.486816   7478.298389      0.111843       11.086097   \n","4    3809.230713  4543.589844   1198.985906      0.264964        4.459335   \n","..           ...          ...           ...           ...             ...   \n","211   759.487183  4835.384277   9580.940701      0.106721       10.789804   \n","212  3890.256348  4543.076660   2542.829266      0.105597       11.185909   \n","213  4091.281982  4401.025391   1042.878960      0.171739        7.219231   \n","214  4070.769043  4437.435547    448.589826      0.276163        4.529806   \n","215  4154.871582  4365.641113    397.353096      0.257500        4.828735   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4          Test  \n","0          0.414635   EEG_Test0_1  \n","1          0.421499   EEG_Test0_2  \n","2          0.406884   EEG_Test0_3  \n","3          0.373620   EEG_Test0_4  \n","4          0.299771   EEG_Test0_5  \n","..              ...           ...  \n","211        0.378527  EEG_Test26_4  \n","212        0.257632  EEG_Test26_5  \n","213        0.374842  EEG_Test26_6  \n","214        0.310306  EEG_Test26_7  \n","215        0.370687  EEG_Test26_8  \n","\n","[200 rows x 198 columns]"],"text/html":["\n","  <div id=\"df-67e3a662-2e9a-4e2f-8777-e2b2f7606c3f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>211</td>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>EEG_Test26_4</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>212</td>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>EEG_Test26_5</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>213</td>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>EEG_Test26_6</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>214</td>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>EEG_Test26_7</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>215</td>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>EEG_Test26_8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 198 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-67e3a662-2e9a-4e2f-8777-e2b2f7606c3f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-67e3a662-2e9a-4e2f-8777-e2b2f7606c3f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-67e3a662-2e9a-4e2f-8777-e2b2f7606c3f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1fe1bd2d-ed64-4bf5-8a9a-bebb2f9ba757\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1fe1bd2d-ed64-4bf5-8a9a-bebb2f9ba757')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1fe1bd2d-ed64-4bf5-8a9a-bebb2f9ba757 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_8c7e1441-e844-493a-a6ac-7b14d96d1a53\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8c7e1441-e844-493a-a6ac-7b14d96d1a53 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["metadata=pd.read_excel(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv-based-Data/Demographic Details of Participants.xlsx\")\n","metadata.columns=[\n","    \"User ID\", \"Age\", \"Gender\", \"Dominant Hand\", \"Date / Time\",\n","    \"Video ID 1\", \"Video ID 2\", \"Date / Time\", \"Video ID 3\", \"Video ID 4\"]\n","metadata.head()"],"metadata":{"id":"1KBh-AYiq5J6","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1713878912237,"user_tz":240,"elapsed":406,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"8fe01884-5ca5-4452-bfc5-da9dfd8cd100"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Age  Gender Dominant Hand            Date / Time  Video ID 1  \\\n","0   Test0   27    Male         Right  08/18/2019/2:00:00 PM          15   \n","1   Test1   24    Male         Right  08/18/2019/3:20:00 PM           5   \n","2   test2   30  Female         Right  08/19/2019/4:20:00 PM           8   \n","3   test3   25    Male         Right  08/20/2019/1:28:00 PM          14   \n","4   test4   24    Male          Left  08/21/2019/3:20:00 PM          12   \n","\n","   Video ID 2            Date / Time  Video ID 3  Video ID 4  \n","0           8  08/23/2019/3:40:00 PM         2.0        11.0  \n","1           5  08/22/2019/4:30:00 PM         9.0         5.0  \n","2          11  08/20/2019/4:40:00 PM         5.0         2.0  \n","3           7  08/28/2019/3:15:00 PM        15.0         1.0  \n","4           6  08/30/2019/5:10:00 PM        15.0        19.0  "],"text/html":["\n","  <div id=\"df-ae6a3df6-cf75-4625-b5ff-f92df4a62453\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>Dominant Hand</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Date / Time</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>27</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/2:00:00 PM</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>08/23/2019/3:40:00 PM</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/18/2019/3:20:00 PM</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>08/22/2019/4:30:00 PM</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>30</td>\n","      <td>Female</td>\n","      <td>Right</td>\n","      <td>08/19/2019/4:20:00 PM</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>08/20/2019/4:40:00 PM</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>25</td>\n","      <td>Male</td>\n","      <td>Right</td>\n","      <td>08/20/2019/1:28:00 PM</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>08/28/2019/3:15:00 PM</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Left</td>\n","      <td>08/21/2019/3:20:00 PM</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>08/30/2019/5:10:00 PM</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae6a3df6-cf75-4625-b5ff-f92df4a62453')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ae6a3df6-cf75-4625-b5ff-f92df4a62453 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ae6a3df6-cf75-4625-b5ff-f92df4a62453');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-05bb94c8-58be-4f2c-b10f-969283079e15\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-05bb94c8-58be-4f2c-b10f-969283079e15')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-05bb94c8-58be-4f2c-b10f-969283079e15 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata","summary":"{\n  \"name\": \"metadata\",\n  \"rows\": 28,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"test9\",\n          \"test25\",\n          \"test8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 19,\n        \"max\": 31,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          19,\n          27,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dominant Hand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Left\",\n          \"Right\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"08/28/2019/2:00:00 PM\",\n          \"09/25/2019/3:35:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          3,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date / Time\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"09.25/2019/4:45:00 PM\",\n          \"09/17/2019/8:05:00 PM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["metadata_video_id=metadata[[\"User ID\",\"Video ID 1\", \"Video ID 2\", \"Video ID 3\", \"Video ID 4\"]]\n","metadata_video_id=metadata_video_id.dropna()\n","metadata_video_id.head()"],"metadata":{"id":"yYFBOP20rO_M","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1713878912633,"user_tz":240,"elapsed":402,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"d5e46ff9-2aa0-446c-d89f-4b5dffa99228"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  User ID  Video ID 1  Video ID 2  Video ID 3  Video ID 4\n","0   Test0          15           8         2.0        11.0\n","1   Test1           5           5         9.0         5.0\n","2   test2           8          11         5.0         2.0\n","3   test3          14           7        15.0         1.0\n","4   test4          12           6        15.0        19.0"],"text/html":["\n","  <div id=\"df-b1258b03-a2b8-4f3a-8f12-e463b9adf84a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Video ID 1</th>\n","      <th>Video ID 2</th>\n","      <th>Video ID 3</th>\n","      <th>Video ID 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Test0</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Test1</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test2</td>\n","      <td>8</td>\n","      <td>11</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test3</td>\n","      <td>14</td>\n","      <td>7</td>\n","      <td>15.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test4</td>\n","      <td>12</td>\n","      <td>6</td>\n","      <td>15.0</td>\n","      <td>19.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1258b03-a2b8-4f3a-8f12-e463b9adf84a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b1258b03-a2b8-4f3a-8f12-e463b9adf84a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b1258b03-a2b8-4f3a-8f12-e463b9adf84a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-97d5ebec-a8b1-43d6-a8e4-3438f81568ae\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97d5ebec-a8b1-43d6-a8e4-3438f81568ae')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-97d5ebec-a8b1-43d6-a8e4-3438f81568ae button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metadata_video_id","summary":"{\n  \"name\": \"metadata_video_id\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"test8\",\n          \"test16\",\n          \"Test0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          13,\n          10,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 18,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1,\n          18,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.648655719667784,\n        \"min\": 1.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          4.0,\n          3.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Video ID 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.882743124314256,\n        \"min\": 1.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          15.0,\n          17.0,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# add Emotion column\n","metadata_video_id_list = metadata_video_id.drop('User ID', axis=1).values.flatten().tolist()\n","metadata_video_id_list = [int(item) for item in metadata_video_id_list for _ in range(2)] #to int and double the time\n","metadata_video_id_list = [1 if item in [1,2,5,6,13,14,15,16,17,18] else 0 for item in metadata_video_id_list] #map\n","df_time_filtered[\"Emotion\"]=metadata_video_id_list\n","# len(metadata_video_id_list)\n","# metadata_video_id_list"],"metadata":{"id":"V8FlGgG1txp-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713878912633,"user_tz":240,"elapsed":10,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"cd7ee5b6-6c56-4de8-e942-5b61db1dc678"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-00e5abdab353>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_time_filtered[\"Emotion\"]=metadata_video_id_list\n"]}]},{"cell_type":"code","source":["# metadata_video_id_list"],"metadata":{"id":"xV9T1cMerrw4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Drop \"Unnamed: 0\",\"Test\" columns\n","df_time_filtered=df_time_filtered.drop(columns=[\"Unnamed: 0\",\"Test\"])\n","df_time_filtered"],"metadata":{"id":"I_O0ca9vvdgL","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1713878912633,"user_tz":240,"elapsed":8,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"369868ac-e9b0-43e9-fccd-bf1200d8fa5d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","211  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","212  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","213  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","214  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","215  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","211  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","212  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","213  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","214  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","215  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","211  ...  4534.358887   1341.930166      0.288382        4.671318   \n","212  ...  4649.230469   2125.336360      0.194158        6.114867   \n","213  ...  5397.948730   4823.841089      0.127178        9.549253   \n","214  ...  4794.358887   1804.680486      0.212828        5.879350   \n","215  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","211        1.619370       -1.575834        1.591902       -1.013965   \n","212        1.799081       -1.684543        1.536058       -0.908229   \n","213        1.850852       -1.822298        1.738571       -1.141967   \n","214        1.683692       -1.604122        1.484709       -0.874587   \n","215        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4  Emotion  \n","0          0.414635        1  \n","1          0.421499        1  \n","2          0.406884        0  \n","3          0.373620        0  \n","4          0.299771        1  \n","..              ...      ...  \n","211        0.378527        1  \n","212        0.257632        0  \n","213        0.374842        0  \n","214        0.310306        1  \n","215        0.370687        1  \n","\n","[200 rows x 197 columns]"],"text/html":["\n","  <div id=\"df-e5baf5a9-abfa-45bc-a4ff-e91a0e744fda\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 197 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5baf5a9-abfa-45bc-a4ff-e91a0e744fda')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e5baf5a9-abfa-45bc-a4ff-e91a0e744fda button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e5baf5a9-abfa-45bc-a4ff-e91a0e744fda');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c6fcd5d8-6a54-4a46-b499-a28ee5216c2f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c6fcd5d8-6a54-4a46-b499-a28ee5216c2f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c6fcd5d8-6a54-4a46-b499-a28ee5216c2f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_de1cac34-a6c9-4eaf-b030-5c1b127a7f84\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_de1cac34-a6c9-4eaf-b030-5c1b127a7f84 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df_time_filtered = df_time_filtered.reset_index(drop=True)\n","df_time_filtered"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"EDmZKanVGyxS","executionInfo":{"status":"ok","timestamp":1713878912633,"user_tz":240,"elapsed":8,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"1f8f1f18-33f1-414e-ccbc-4d00c4fffe4b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","195  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","196  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","197  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","198  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","199  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","195  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","196  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","197  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","198  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","199  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...      AF4_max  AF4_activity  AF4_mobility  AF4_complexity  \\\n","0    ...  4798.461426   1955.207164      0.201175        5.853881   \n","1    ...  5405.641113   4047.042955      0.181730        6.655339   \n","2    ...  4456.922852    788.581256      0.362081        3.528739   \n","3    ...  7725.640625  30770.363380      0.065568       16.047249   \n","4    ...  5711.794922   9459.787110      0.097349       11.212047   \n","..   ...          ...           ...           ...             ...   \n","195  ...  4534.358887   1341.930166      0.288382        4.671318   \n","196  ...  4649.230469   2125.336360      0.194158        6.114867   \n","197  ...  5397.948730   4823.841089      0.127178        9.549253   \n","198  ...  4794.358887   1804.680486      0.212828        5.879350   \n","199  ...  4411.281738    778.759752      0.278193        4.402478   \n","\n","     AF4_ar_coeff_0  AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  \\\n","0          1.888919       -1.916397        1.774889       -1.162047   \n","1          1.869903       -1.917447        1.803922       -1.177878   \n","2          1.719312       -1.716449        1.651069       -1.060818   \n","3          2.014694       -1.962541        1.826205       -1.251982   \n","4          1.916121       -1.784461        1.639423       -1.070856   \n","..              ...             ...             ...             ...   \n","195        1.619370       -1.575834        1.591902       -1.013965   \n","196        1.799081       -1.684543        1.536058       -0.908229   \n","197        1.850852       -1.822298        1.738571       -1.141967   \n","198        1.683692       -1.604122        1.484709       -0.874587   \n","199        1.824404       -1.814688        1.714828       -1.095232   \n","\n","     AF4_ar_coeff_4  Emotion  \n","0          0.414635        1  \n","1          0.421499        1  \n","2          0.406884        0  \n","3          0.373620        0  \n","4          0.299771        1  \n","..              ...      ...  \n","195        0.378527        1  \n","196        0.257632        0  \n","197        0.374842        0  \n","198        0.310306        1  \n","199        0.370687        1  \n","\n","[200 rows x 197 columns]"],"text/html":["\n","  <div id=\"df-909eb643-e697-40e3-a47c-2032ea40bb4a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>AF4_max</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>4798.461426</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>5405.641113</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>4456.922852</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>7725.640625</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>5711.794922</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>4534.358887</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>4649.230469</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>5397.948730</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>4794.358887</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>4411.281738</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 197 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-909eb643-e697-40e3-a47c-2032ea40bb4a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-909eb643-e697-40e3-a47c-2032ea40bb4a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-909eb643-e697-40e3-a47c-2032ea40bb4a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f43d24a9-8741-4b35-abd2-3917dd828402\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f43d24a9-8741-4b35-abd2-3917dd828402')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f43d24a9-8741-4b35-abd2-3917dd828402 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_98bb6b37-2115-4548-aad6-0c9954e89340\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_98bb6b37-2115-4548-aad6-0c9954e89340 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df_rhm_acc = pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv_Right_acc_extracted.csv\")\n","df_rhm_gyro= pd.read_csv(\"/content/drive/MyDrive//JHU/MLMA/MLMA Project/BS-HMS-Dataset/Emotiv_Right_gyro_extracted.csv\")"],"metadata":{"id":"uwyca42bFGj5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Concatenate two df toghther\n","def add_suffix_to_feature_names(df, suffix):\n","    new_column_names = {col: col + suffix for col in df.columns}\n","    return df.rename(columns=new_column_names)\n","\n","df_rhm_acc = add_suffix_to_feature_names(df_rhm_acc, '_acc')\n","df_rhm_gyro = add_suffix_to_feature_names(df_rhm_gyro, '_gyro')\n","\n","# drop filename\n","df_rhm_acc=df_rhm_acc.drop(columns=[\"Filename_Part_acc\"])\n","df_rhm_gyro=df_rhm_gyro.drop(columns=[\"Filename_Part_gyro\"])\n","\n","# concate two hm data\n","df_rhm = pd.concat([df_rhm_acc, df_rhm_gyro], axis = 1)\n"],"metadata":{"id":"mrB1DGQKFMBn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_rhm = df_rhm.reset_index(drop=True)\n","df_rhm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"rBz6_NMDHBXt","executionInfo":{"status":"ok","timestamp":1713878912633,"user_tz":240,"elapsed":7,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"c0c66282-08ad-4dee-f368-179f0f8f2755"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     X_mean_acc  X_std_acc  X_var_acc  X_median_acc  X_min_acc  X_max_acc  \\\n","0     -6.846076   1.127397   1.271024     -7.291028  -9.866585   3.020774   \n","1      2.378614   0.445303   0.198294      2.427151 -15.984729  19.594337   \n","2     -4.600323   1.208001   1.459265     -4.332489  -8.411251   2.436726   \n","3      2.307475   0.842399   0.709637      2.494173  -5.548458   6.352721   \n","4     -0.876954   0.603183   0.363829     -1.010116  -5.711226   2.800559   \n","..          ...        ...        ...           ...        ...        ...   \n","195   -1.026608   0.673073   0.453027     -0.895221  -7.166558   4.294190   \n","196    0.855077   0.705780   0.498126      0.684581  -2.963326  16.674097   \n","197    1.761846   0.449221   0.201799      1.766506  -3.710142   6.534637   \n","198   -0.530926   1.917458   3.676647     -0.694156 -11.762347  10.220843   \n","199    0.666244   0.960139   0.921866      1.144160  -5.213348   5.682502   \n","\n","     X_activity_acc  X_mobility_acc  X_complexity_acc  X_ar_coeff_0_acc  ...  \\\n","0          1.271024        0.033221         41.360217          1.039849  ...   \n","1          0.198294        0.283186          3.950224          1.344210  ...   \n","2          1.459265        0.029166         48.092388          1.015230  ...   \n","3          0.709637        0.108667         10.930011          1.282584  ...   \n","4          0.363829        0.072352         16.832129          1.235047  ...   \n","..              ...             ...               ...               ...  ...   \n","195        0.453027        0.190876          6.090877          1.327769  ...   \n","196        0.498126        0.117301         10.614548          1.285143  ...   \n","197        0.201799        0.241573          5.045190          1.340544  ...   \n","198        3.676647        0.049494         22.914340          1.349513  ...   \n","199        0.921866        0.092335         12.092435          1.449848  ...   \n","\n","     Z_ACF1_gyro  Z_ACF2_gyro  Z_Grad1mean_gyro  Z_Grad1std_gyro  \\\n","0      -0.282172     0.049478      1.317114e-06         0.006302   \n","1       0.006878    -0.021570     -3.791419e-07         0.018311   \n","2       0.027719    -0.066030      2.087315e-07         0.003741   \n","3       0.021337    -0.182476      5.823871e-08         0.011482   \n","4       0.000851     0.008886     -2.100619e-06         0.006216   \n","..           ...          ...               ...              ...   \n","195    -0.101010     0.004093      2.519509e-06         0.021359   \n","196    -0.012828    -0.038737     -9.003508e-08         0.011652   \n","197    -0.001342     0.045436      3.601153e-07         0.012731   \n","198    -0.031774    -0.098687      4.529143e-07         0.015796   \n","199     0.037645    -0.022263     -1.425811e-06         0.014292   \n","\n","     Z_Grad1var_gyro  Z_Grad2mean_gyro  Z_Grad2std_gyro  Z_Grad2var_gyro  \\\n","0           0.000040     -2.942488e-07         0.002580         0.000007   \n","1           0.000335      9.977444e-09         0.008738         0.000076   \n","2           0.000014      2.087315e-07         0.001756         0.000003   \n","3           0.000132      1.164774e-07         0.005286         0.000028   \n","4           0.000039      5.410685e-07         0.002682         0.000007   \n","..               ...               ...              ...              ...   \n","195         0.000456     -1.619685e-07         0.009887         0.000098   \n","196         0.000136     -4.951929e-07         0.005225         0.000027   \n","197         0.000162      4.801537e-07         0.006654         0.000044   \n","198         0.000250     -1.171670e-06         0.007516         0.000056   \n","199         0.000204      3.830537e-07         0.007510         0.000056   \n","\n","     Z_SEntropy_gyro  All_SMV_gyro  \n","0           3.901216      0.067171  \n","1           5.299957      0.135881  \n","2           3.767423      0.039921  \n","3           5.899198      0.157682  \n","4           2.802608      0.047825  \n","..               ...           ...  \n","195         6.740643      0.214154  \n","196         3.689207      0.062542  \n","197         6.276326      0.194280  \n","198         5.348136      0.188279  \n","199         6.435570      0.218638  \n","\n","[200 rows x 152 columns]"],"text/html":["\n","  <div id=\"df-b2690c4f-c793-4009-87a9-d33e8a74ad95\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X_mean_acc</th>\n","      <th>X_std_acc</th>\n","      <th>X_var_acc</th>\n","      <th>X_median_acc</th>\n","      <th>X_min_acc</th>\n","      <th>X_max_acc</th>\n","      <th>X_activity_acc</th>\n","      <th>X_mobility_acc</th>\n","      <th>X_complexity_acc</th>\n","      <th>X_ar_coeff_0_acc</th>\n","      <th>...</th>\n","      <th>Z_ACF1_gyro</th>\n","      <th>Z_ACF2_gyro</th>\n","      <th>Z_Grad1mean_gyro</th>\n","      <th>Z_Grad1std_gyro</th>\n","      <th>Z_Grad1var_gyro</th>\n","      <th>Z_Grad2mean_gyro</th>\n","      <th>Z_Grad2std_gyro</th>\n","      <th>Z_Grad2var_gyro</th>\n","      <th>Z_SEntropy_gyro</th>\n","      <th>All_SMV_gyro</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-6.846076</td>\n","      <td>1.127397</td>\n","      <td>1.271024</td>\n","      <td>-7.291028</td>\n","      <td>-9.866585</td>\n","      <td>3.020774</td>\n","      <td>1.271024</td>\n","      <td>0.033221</td>\n","      <td>41.360217</td>\n","      <td>1.039849</td>\n","      <td>...</td>\n","      <td>-0.282172</td>\n","      <td>0.049478</td>\n","      <td>1.317114e-06</td>\n","      <td>0.006302</td>\n","      <td>0.000040</td>\n","      <td>-2.942488e-07</td>\n","      <td>0.002580</td>\n","      <td>0.000007</td>\n","      <td>3.901216</td>\n","      <td>0.067171</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.378614</td>\n","      <td>0.445303</td>\n","      <td>0.198294</td>\n","      <td>2.427151</td>\n","      <td>-15.984729</td>\n","      <td>19.594337</td>\n","      <td>0.198294</td>\n","      <td>0.283186</td>\n","      <td>3.950224</td>\n","      <td>1.344210</td>\n","      <td>...</td>\n","      <td>0.006878</td>\n","      <td>-0.021570</td>\n","      <td>-3.791419e-07</td>\n","      <td>0.018311</td>\n","      <td>0.000335</td>\n","      <td>9.977444e-09</td>\n","      <td>0.008738</td>\n","      <td>0.000076</td>\n","      <td>5.299957</td>\n","      <td>0.135881</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-4.600323</td>\n","      <td>1.208001</td>\n","      <td>1.459265</td>\n","      <td>-4.332489</td>\n","      <td>-8.411251</td>\n","      <td>2.436726</td>\n","      <td>1.459265</td>\n","      <td>0.029166</td>\n","      <td>48.092388</td>\n","      <td>1.015230</td>\n","      <td>...</td>\n","      <td>0.027719</td>\n","      <td>-0.066030</td>\n","      <td>2.087315e-07</td>\n","      <td>0.003741</td>\n","      <td>0.000014</td>\n","      <td>2.087315e-07</td>\n","      <td>0.001756</td>\n","      <td>0.000003</td>\n","      <td>3.767423</td>\n","      <td>0.039921</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.307475</td>\n","      <td>0.842399</td>\n","      <td>0.709637</td>\n","      <td>2.494173</td>\n","      <td>-5.548458</td>\n","      <td>6.352721</td>\n","      <td>0.709637</td>\n","      <td>0.108667</td>\n","      <td>10.930011</td>\n","      <td>1.282584</td>\n","      <td>...</td>\n","      <td>0.021337</td>\n","      <td>-0.182476</td>\n","      <td>5.823871e-08</td>\n","      <td>0.011482</td>\n","      <td>0.000132</td>\n","      <td>1.164774e-07</td>\n","      <td>0.005286</td>\n","      <td>0.000028</td>\n","      <td>5.899198</td>\n","      <td>0.157682</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.876954</td>\n","      <td>0.603183</td>\n","      <td>0.363829</td>\n","      <td>-1.010116</td>\n","      <td>-5.711226</td>\n","      <td>2.800559</td>\n","      <td>0.363829</td>\n","      <td>0.072352</td>\n","      <td>16.832129</td>\n","      <td>1.235047</td>\n","      <td>...</td>\n","      <td>0.000851</td>\n","      <td>0.008886</td>\n","      <td>-2.100619e-06</td>\n","      <td>0.006216</td>\n","      <td>0.000039</td>\n","      <td>5.410685e-07</td>\n","      <td>0.002682</td>\n","      <td>0.000007</td>\n","      <td>2.802608</td>\n","      <td>0.047825</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>-1.026608</td>\n","      <td>0.673073</td>\n","      <td>0.453027</td>\n","      <td>-0.895221</td>\n","      <td>-7.166558</td>\n","      <td>4.294190</td>\n","      <td>0.453027</td>\n","      <td>0.190876</td>\n","      <td>6.090877</td>\n","      <td>1.327769</td>\n","      <td>...</td>\n","      <td>-0.101010</td>\n","      <td>0.004093</td>\n","      <td>2.519509e-06</td>\n","      <td>0.021359</td>\n","      <td>0.000456</td>\n","      <td>-1.619685e-07</td>\n","      <td>0.009887</td>\n","      <td>0.000098</td>\n","      <td>6.740643</td>\n","      <td>0.214154</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>0.855077</td>\n","      <td>0.705780</td>\n","      <td>0.498126</td>\n","      <td>0.684581</td>\n","      <td>-2.963326</td>\n","      <td>16.674097</td>\n","      <td>0.498126</td>\n","      <td>0.117301</td>\n","      <td>10.614548</td>\n","      <td>1.285143</td>\n","      <td>...</td>\n","      <td>-0.012828</td>\n","      <td>-0.038737</td>\n","      <td>-9.003508e-08</td>\n","      <td>0.011652</td>\n","      <td>0.000136</td>\n","      <td>-4.951929e-07</td>\n","      <td>0.005225</td>\n","      <td>0.000027</td>\n","      <td>3.689207</td>\n","      <td>0.062542</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>1.761846</td>\n","      <td>0.449221</td>\n","      <td>0.201799</td>\n","      <td>1.766506</td>\n","      <td>-3.710142</td>\n","      <td>6.534637</td>\n","      <td>0.201799</td>\n","      <td>0.241573</td>\n","      <td>5.045190</td>\n","      <td>1.340544</td>\n","      <td>...</td>\n","      <td>-0.001342</td>\n","      <td>0.045436</td>\n","      <td>3.601153e-07</td>\n","      <td>0.012731</td>\n","      <td>0.000162</td>\n","      <td>4.801537e-07</td>\n","      <td>0.006654</td>\n","      <td>0.000044</td>\n","      <td>6.276326</td>\n","      <td>0.194280</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>-0.530926</td>\n","      <td>1.917458</td>\n","      <td>3.676647</td>\n","      <td>-0.694156</td>\n","      <td>-11.762347</td>\n","      <td>10.220843</td>\n","      <td>3.676647</td>\n","      <td>0.049494</td>\n","      <td>22.914340</td>\n","      <td>1.349513</td>\n","      <td>...</td>\n","      <td>-0.031774</td>\n","      <td>-0.098687</td>\n","      <td>4.529143e-07</td>\n","      <td>0.015796</td>\n","      <td>0.000250</td>\n","      <td>-1.171670e-06</td>\n","      <td>0.007516</td>\n","      <td>0.000056</td>\n","      <td>5.348136</td>\n","      <td>0.188279</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>0.666244</td>\n","      <td>0.960139</td>\n","      <td>0.921866</td>\n","      <td>1.144160</td>\n","      <td>-5.213348</td>\n","      <td>5.682502</td>\n","      <td>0.921866</td>\n","      <td>0.092335</td>\n","      <td>12.092435</td>\n","      <td>1.449848</td>\n","      <td>...</td>\n","      <td>0.037645</td>\n","      <td>-0.022263</td>\n","      <td>-1.425811e-06</td>\n","      <td>0.014292</td>\n","      <td>0.000204</td>\n","      <td>3.830537e-07</td>\n","      <td>0.007510</td>\n","      <td>0.000056</td>\n","      <td>6.435570</td>\n","      <td>0.218638</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 152 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2690c4f-c793-4009-87a9-d33e8a74ad95')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b2690c4f-c793-4009-87a9-d33e8a74ad95 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b2690c4f-c793-4009-87a9-d33e8a74ad95');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5139caff-f073-4cb8-9e5f-5c7bf23f0eba\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5139caff-f073-4cb8-9e5f-5c7bf23f0eba')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5139caff-f073-4cb8-9e5f-5c7bf23f0eba button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_46a11aa6-40e2-44f2-b1de-65bbe2631d62\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_rhm')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_46a11aa6-40e2-44f2-b1de-65bbe2631d62 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_rhm');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_rhm"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# concate eeg and hm data\n","df_time_filtered=pd.concat([df_rhm, df_time_filtered],axis=1)"],"metadata":{"id":"dnEkoPCdFcZR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train Test Split Method"],"metadata":{"id":"KhNaOZ0ox9TQ"}},{"cell_type":"code","source":["folder = [num for num in range(1, 26) for _ in range(8)]\n","df_time_filtered[\"Folder\"]=folder\n","df_time_filtered"],"metadata":{"id":"StPVCDaMw_uX","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1713878912890,"user_tz":240,"elapsed":263,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"742a3748-eb34-46b3-f517-3cafd2fea7e8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     X_mean_acc  X_std_acc  X_var_acc  X_median_acc  X_min_acc  X_max_acc  \\\n","0     -6.846076   1.127397   1.271024     -7.291028  -9.866585   3.020774   \n","1      2.378614   0.445303   0.198294      2.427151 -15.984729  19.594337   \n","2     -4.600323   1.208001   1.459265     -4.332489  -8.411251   2.436726   \n","3      2.307475   0.842399   0.709637      2.494173  -5.548458   6.352721   \n","4     -0.876954   0.603183   0.363829     -1.010116  -5.711226   2.800559   \n","..          ...        ...        ...           ...        ...        ...   \n","195   -1.026608   0.673073   0.453027     -0.895221  -7.166558   4.294190   \n","196    0.855077   0.705780   0.498126      0.684581  -2.963326  16.674097   \n","197    1.761846   0.449221   0.201799      1.766506  -3.710142   6.534637   \n","198   -0.530926   1.917458   3.676647     -0.694156 -11.762347  10.220843   \n","199    0.666244   0.960139   0.921866      1.144160  -5.213348   5.682502   \n","\n","     X_activity_acc  X_mobility_acc  X_complexity_acc  X_ar_coeff_0_acc  ...  \\\n","0          1.271024        0.033221         41.360217          1.039849  ...   \n","1          0.198294        0.283186          3.950224          1.344210  ...   \n","2          1.459265        0.029166         48.092388          1.015230  ...   \n","3          0.709637        0.108667         10.930011          1.282584  ...   \n","4          0.363829        0.072352         16.832129          1.235047  ...   \n","..              ...             ...               ...               ...  ...   \n","195        0.453027        0.190876          6.090877          1.327769  ...   \n","196        0.498126        0.117301         10.614548          1.285143  ...   \n","197        0.201799        0.241573          5.045190          1.340544  ...   \n","198        3.676647        0.049494         22.914340          1.349513  ...   \n","199        0.921866        0.092335         12.092435          1.449848  ...   \n","\n","     AF4_activity  AF4_mobility  AF4_complexity  AF4_ar_coeff_0  \\\n","0     1955.207164      0.201175        5.853881        1.888919   \n","1     4047.042955      0.181730        6.655339        1.869903   \n","2      788.581256      0.362081        3.528739        1.719312   \n","3    30770.363380      0.065568       16.047249        2.014694   \n","4     9459.787110      0.097349       11.212047        1.916121   \n","..            ...           ...             ...             ...   \n","195   1341.930166      0.288382        4.671318        1.619370   \n","196   2125.336360      0.194158        6.114867        1.799081   \n","197   4823.841089      0.127178        9.549253        1.850852   \n","198   1804.680486      0.212828        5.879350        1.683692   \n","199    778.759752      0.278193        4.402478        1.824404   \n","\n","     AF4_ar_coeff_1  AF4_ar_coeff_2  AF4_ar_coeff_3  AF4_ar_coeff_4  Emotion  \\\n","0         -1.916397        1.774889       -1.162047        0.414635        1   \n","1         -1.917447        1.803922       -1.177878        0.421499        1   \n","2         -1.716449        1.651069       -1.060818        0.406884        0   \n","3         -1.962541        1.826205       -1.251982        0.373620        0   \n","4         -1.784461        1.639423       -1.070856        0.299771        1   \n","..              ...             ...             ...             ...      ...   \n","195       -1.575834        1.591902       -1.013965        0.378527        1   \n","196       -1.684543        1.536058       -0.908229        0.257632        0   \n","197       -1.822298        1.738571       -1.141967        0.374842        0   \n","198       -1.604122        1.484709       -0.874587        0.310306        1   \n","199       -1.814688        1.714828       -1.095232        0.370687        1   \n","\n","     Folder  \n","0         1  \n","1         1  \n","2         1  \n","3         1  \n","4         1  \n","..      ...  \n","195      25  \n","196      25  \n","197      25  \n","198      25  \n","199      25  \n","\n","[200 rows x 350 columns]"],"text/html":["\n","  <div id=\"df-3cfc8175-9a85-474f-a10d-cd419926c412\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X_mean_acc</th>\n","      <th>X_std_acc</th>\n","      <th>X_var_acc</th>\n","      <th>X_median_acc</th>\n","      <th>X_min_acc</th>\n","      <th>X_max_acc</th>\n","      <th>X_activity_acc</th>\n","      <th>X_mobility_acc</th>\n","      <th>X_complexity_acc</th>\n","      <th>X_ar_coeff_0_acc</th>\n","      <th>...</th>\n","      <th>AF4_activity</th>\n","      <th>AF4_mobility</th>\n","      <th>AF4_complexity</th>\n","      <th>AF4_ar_coeff_0</th>\n","      <th>AF4_ar_coeff_1</th>\n","      <th>AF4_ar_coeff_2</th>\n","      <th>AF4_ar_coeff_3</th>\n","      <th>AF4_ar_coeff_4</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-6.846076</td>\n","      <td>1.127397</td>\n","      <td>1.271024</td>\n","      <td>-7.291028</td>\n","      <td>-9.866585</td>\n","      <td>3.020774</td>\n","      <td>1.271024</td>\n","      <td>0.033221</td>\n","      <td>41.360217</td>\n","      <td>1.039849</td>\n","      <td>...</td>\n","      <td>1955.207164</td>\n","      <td>0.201175</td>\n","      <td>5.853881</td>\n","      <td>1.888919</td>\n","      <td>-1.916397</td>\n","      <td>1.774889</td>\n","      <td>-1.162047</td>\n","      <td>0.414635</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.378614</td>\n","      <td>0.445303</td>\n","      <td>0.198294</td>\n","      <td>2.427151</td>\n","      <td>-15.984729</td>\n","      <td>19.594337</td>\n","      <td>0.198294</td>\n","      <td>0.283186</td>\n","      <td>3.950224</td>\n","      <td>1.344210</td>\n","      <td>...</td>\n","      <td>4047.042955</td>\n","      <td>0.181730</td>\n","      <td>6.655339</td>\n","      <td>1.869903</td>\n","      <td>-1.917447</td>\n","      <td>1.803922</td>\n","      <td>-1.177878</td>\n","      <td>0.421499</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-4.600323</td>\n","      <td>1.208001</td>\n","      <td>1.459265</td>\n","      <td>-4.332489</td>\n","      <td>-8.411251</td>\n","      <td>2.436726</td>\n","      <td>1.459265</td>\n","      <td>0.029166</td>\n","      <td>48.092388</td>\n","      <td>1.015230</td>\n","      <td>...</td>\n","      <td>788.581256</td>\n","      <td>0.362081</td>\n","      <td>3.528739</td>\n","      <td>1.719312</td>\n","      <td>-1.716449</td>\n","      <td>1.651069</td>\n","      <td>-1.060818</td>\n","      <td>0.406884</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.307475</td>\n","      <td>0.842399</td>\n","      <td>0.709637</td>\n","      <td>2.494173</td>\n","      <td>-5.548458</td>\n","      <td>6.352721</td>\n","      <td>0.709637</td>\n","      <td>0.108667</td>\n","      <td>10.930011</td>\n","      <td>1.282584</td>\n","      <td>...</td>\n","      <td>30770.363380</td>\n","      <td>0.065568</td>\n","      <td>16.047249</td>\n","      <td>2.014694</td>\n","      <td>-1.962541</td>\n","      <td>1.826205</td>\n","      <td>-1.251982</td>\n","      <td>0.373620</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.876954</td>\n","      <td>0.603183</td>\n","      <td>0.363829</td>\n","      <td>-1.010116</td>\n","      <td>-5.711226</td>\n","      <td>2.800559</td>\n","      <td>0.363829</td>\n","      <td>0.072352</td>\n","      <td>16.832129</td>\n","      <td>1.235047</td>\n","      <td>...</td>\n","      <td>9459.787110</td>\n","      <td>0.097349</td>\n","      <td>11.212047</td>\n","      <td>1.916121</td>\n","      <td>-1.784461</td>\n","      <td>1.639423</td>\n","      <td>-1.070856</td>\n","      <td>0.299771</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>-1.026608</td>\n","      <td>0.673073</td>\n","      <td>0.453027</td>\n","      <td>-0.895221</td>\n","      <td>-7.166558</td>\n","      <td>4.294190</td>\n","      <td>0.453027</td>\n","      <td>0.190876</td>\n","      <td>6.090877</td>\n","      <td>1.327769</td>\n","      <td>...</td>\n","      <td>1341.930166</td>\n","      <td>0.288382</td>\n","      <td>4.671318</td>\n","      <td>1.619370</td>\n","      <td>-1.575834</td>\n","      <td>1.591902</td>\n","      <td>-1.013965</td>\n","      <td>0.378527</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>0.855077</td>\n","      <td>0.705780</td>\n","      <td>0.498126</td>\n","      <td>0.684581</td>\n","      <td>-2.963326</td>\n","      <td>16.674097</td>\n","      <td>0.498126</td>\n","      <td>0.117301</td>\n","      <td>10.614548</td>\n","      <td>1.285143</td>\n","      <td>...</td>\n","      <td>2125.336360</td>\n","      <td>0.194158</td>\n","      <td>6.114867</td>\n","      <td>1.799081</td>\n","      <td>-1.684543</td>\n","      <td>1.536058</td>\n","      <td>-0.908229</td>\n","      <td>0.257632</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>1.761846</td>\n","      <td>0.449221</td>\n","      <td>0.201799</td>\n","      <td>1.766506</td>\n","      <td>-3.710142</td>\n","      <td>6.534637</td>\n","      <td>0.201799</td>\n","      <td>0.241573</td>\n","      <td>5.045190</td>\n","      <td>1.340544</td>\n","      <td>...</td>\n","      <td>4823.841089</td>\n","      <td>0.127178</td>\n","      <td>9.549253</td>\n","      <td>1.850852</td>\n","      <td>-1.822298</td>\n","      <td>1.738571</td>\n","      <td>-1.141967</td>\n","      <td>0.374842</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>-0.530926</td>\n","      <td>1.917458</td>\n","      <td>3.676647</td>\n","      <td>-0.694156</td>\n","      <td>-11.762347</td>\n","      <td>10.220843</td>\n","      <td>3.676647</td>\n","      <td>0.049494</td>\n","      <td>22.914340</td>\n","      <td>1.349513</td>\n","      <td>...</td>\n","      <td>1804.680486</td>\n","      <td>0.212828</td>\n","      <td>5.879350</td>\n","      <td>1.683692</td>\n","      <td>-1.604122</td>\n","      <td>1.484709</td>\n","      <td>-0.874587</td>\n","      <td>0.310306</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>0.666244</td>\n","      <td>0.960139</td>\n","      <td>0.921866</td>\n","      <td>1.144160</td>\n","      <td>-5.213348</td>\n","      <td>5.682502</td>\n","      <td>0.921866</td>\n","      <td>0.092335</td>\n","      <td>12.092435</td>\n","      <td>1.449848</td>\n","      <td>...</td>\n","      <td>778.759752</td>\n","      <td>0.278193</td>\n","      <td>4.402478</td>\n","      <td>1.824404</td>\n","      <td>-1.814688</td>\n","      <td>1.714828</td>\n","      <td>-1.095232</td>\n","      <td>0.370687</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 350 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cfc8175-9a85-474f-a10d-cd419926c412')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3cfc8175-9a85-474f-a10d-cd419926c412 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3cfc8175-9a85-474f-a10d-cd419926c412');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9aa5e378-aac1-4185-8064-5354df4bbc23\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9aa5e378-aac1-4185-8064-5354df4bbc23')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9aa5e378-aac1-4185-8064-5354df4bbc23 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9d89a042-3139-4711-b51a-4b38c23b541a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9d89a042-3139-4711-b51a-4b38c23b541a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_filtered"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# to make sure the same fold is use as train and test for different model\n","import random\n","folder_names = [i for i in range(1, 27)]\n","\n","# Shuffle the folder names to ensure random distribution\n","random.shuffle(folder_names)\n","\n","# Calculate the indices for the 80-20 split\n","train_split = int(0.8 * len(folder_names))  # 80% for training\n","\n","# Split the folders into training, validation, and testing sets\n","train_folders = folder_names[:train_split]\n","# valid_folders = folder_names[train_split:valid_split]\n","test_folders = folder_names[train_split:]\n","\n","print(train_folders)\n","print(test_folders)"],"metadata":{"id":"5mb1IS2BLSxs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713878912891,"user_tz":240,"elapsed":5,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"26d436c3-afb8-48d0-a824-4b04340316bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 11, 24, 19, 9, 16, 20, 17, 12, 18, 22, 6, 2, 21, 13, 26, 7, 14, 15, 8]\n","[10, 23, 4, 1, 5, 25]\n"]}]},{"cell_type":"code","source":["train_time = df_time_filtered[df_time_filtered['Folder'].isin(train_folders)]\n","X_train_time =train_time.iloc[:,:-2]\n","y_train_time=train_time.iloc[:,-2]\n","\n","test_time = df_time_filtered[df_time_filtered['Folder'].isin(test_folders)]\n","X_test_time =test_time.iloc[:,:-2]\n","y_test_time=test_time.iloc[:,-2]\n","\n","# val = df_time_filtered[df_time_filtered['Folder'].isin(valid_folders)]\n","# X_val =val.iloc[:,:-2]\n","# y_val=val.iloc[:,-2]"],"metadata":{"id":"Mxc1Hz21zArD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## DNN model + Cross Validation"],"metadata":{"id":"eO5N8iqsydZu"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import accuracy_score\n","from tensorflow.keras.callbacks import LambdaCallback\n","\n","\n","# First, let's create a function to define the neural network\n","def create_model(input_shape):\n","    # Define the model\n","    model = Sequential()\n","    model.add(Dense(64, input_shape=(input_shape,), activation='relu'))\n","    model.add(Dense(32, activation='relu'))\n","    model.add(Dense(1, activation='sigmoid'))\n","    # Compile the model\n","    model.compile(optimizer=Adam(learning_rate=0.001),\n","                  loss='binary_crossentropy',\n","                  metrics=['accuracy'])\n","    return model\n","\n","batch_size=64\n","fold=5"],"metadata":{"id":"HDUZQ9465vyp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Now we will perform cross-validation\n","# # Prepare full dataset\n","# X_full = df_time_filtered.iloc[:, :-2]\n","# y_full = df_time_filtered.iloc[:, -2]\n","\n","# # Initialize KFold\n","# kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# To store scores\n","cv_scores = []\n","best_model_time = 0\n","best_accuracy_time = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders\n","\n","# for train_index, val_index in kf.split(X_full, y_full):\n","#     # Create data for this fold\n","#     X_train_fold, X_val_fold = X_full.iloc[train_index], X_full.iloc[val_index]\n","#     y_train_fold, y_val_fold = y_full.iloc[train_index], y_full.iloc[val_index]\n","for i in range(fold): # No.of fold cross validation\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_time[train_time['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_time[train_time['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_time = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_time.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_time.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_time:\n","        best_accuracy_time = val_accuracy\n","        best_model_time = model_time\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_time * 100:.2f}%\")\n"],"metadata":{"id":"yuYTv6L1ycN1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713878999795,"user_tz":240,"elapsed":74056,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"a5a88fad-c174-4a46-925c-e02d4a242af1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 28.3027, Accuracy: 0.7708\n","Epoch: 40, Loss: 8.5322, Accuracy: 0.8542\n","Epoch: 60, Loss: 2.7561, Accuracy: 0.8958\n","Epoch: 80, Loss: 11.7299, Accuracy: 0.8264\n","Epoch: 100, Loss: 3.2313, Accuracy: 0.9028\n","1/1 [==============================] - 0s 255ms/step\n","Fold completed. Validation accuracy: 25.00%\n","Epoch: 20, Loss: 27.2749, Accuracy: 0.8015\n","Epoch: 40, Loss: 10.2779, Accuracy: 0.8824\n","Epoch: 60, Loss: 6.9557, Accuracy: 0.8824\n","Epoch: 80, Loss: 10.4904, Accuracy: 0.8382\n","Epoch: 100, Loss: 4.7998, Accuracy: 0.8897\n","1/1 [==============================] - 0s 105ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Epoch: 20, Loss: 29.1272, Accuracy: 0.8382\n","Epoch: 40, Loss: 19.0728, Accuracy: 0.8529\n","Epoch: 60, Loss: 11.5269, Accuracy: 0.8824\n","Epoch: 80, Loss: 3.2992, Accuracy: 0.9265\n","Epoch: 100, Loss: 4.3782, Accuracy: 0.9265\n","1/1 [==============================] - 0s 251ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Epoch: 20, Loss: 36.8286, Accuracy: 0.7353\n","Epoch: 40, Loss: 20.7850, Accuracy: 0.7721\n","Epoch: 60, Loss: 2.7420, Accuracy: 0.9338\n","Epoch: 80, Loss: 0.4023, Accuracy: 0.9706\n","Epoch: 100, Loss: 3.4729, Accuracy: 0.8971\n","1/1 [==============================] - 0s 98ms/step\n","Fold completed. Validation accuracy: 87.50%\n","Epoch: 20, Loss: 27.9298, Accuracy: 0.7500\n","Epoch: 40, Loss: 10.9380, Accuracy: 0.8529\n","Epoch: 60, Loss: 6.9761, Accuracy: 0.8897\n","Epoch: 80, Loss: 15.0580, Accuracy: 0.8603\n","Epoch: 100, Loss: 16.3612, Accuracy: 0.8676\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7d4622d28310> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 62ms/step\n","Fold completed. Validation accuracy: 75.00%\n","Best validation accuracy: 87.50%\n"]}]},{"cell_type":"markdown","source":["# Frequency Domain Data"],"metadata":{"id":"AITEbGtc9LeP"}},{"cell_type":"markdown","source":["## Load Data"],"metadata":{"id":"sCvlTL6N9QO_"}},{"cell_type":"code","source":["df_frequency=pd.read_csv(\"/content/drive/MyDrive/JHU/MLMA/MLMA Project/BS-HMS-Dataset/frequency_domain_features\")"],"metadata":{"id":"bYk5wPAn9OTg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rows_to_drop = ['Test20', 'Test21', 'Test27']\n","df_frequency_filtered = df_frequency[~df_frequency['Test'].str.contains('|'.join(rows_to_drop))]\n","df_frequency_filtered.head()"],"metadata":{"id":"YL_L4NyK9U6B","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1713879030947,"user_tz":240,"elapsed":383,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"0cd16a87-2188-4055-f6ec-e96ce5ec2164"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0  AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  \\\n","0           0       742.183654        91.890818        29.103071   \n","1           1       814.217772       115.616427        33.692698   \n","2           2       333.443681        56.892036        17.542342   \n","3           3       972.444483        96.292971        21.770639   \n","4           4       679.511986       114.487260        25.583073   \n","\n","   AF3_Beta_power  AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  \\\n","0       39.086906        14.159668              3.392576    19380.110107   \n","1       52.126272        22.004420              3.517422     2473.146474   \n","2       37.008188        18.740256              4.115038     1400.052844   \n","3       34.067561        19.333383              2.063286    15797.879384   \n","4       32.942404        14.063132              3.881328      292.466213   \n","\n","   F7_Theta_power  F7_Alpha_power  ...  F8_Beta_power  F8_Gamma_power  \\\n","0     1675.854975      993.004181  ...    1827.793507      372.815243   \n","1      137.999940       28.948250  ...      50.502736       18.238877   \n","2      297.329986      160.979736  ...     246.406774       58.009400   \n","3     1250.494293      492.593757  ...     173.137554       37.285689   \n","4       38.358567       10.211787  ...      36.050785       14.784819   \n","\n","   F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  \\\n","0             2.927640       722.066811        73.374318        26.934085   \n","1             3.321144       988.999364       104.930425        34.668521   \n","2             3.251759       439.611659        62.292803        21.426163   \n","3             2.788485      6092.273632       235.566933        47.641229   \n","4             3.466234      2339.739461       143.981679        26.881912   \n","\n","   AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy         Test  \n","0       39.510158        12.868163              3.228577  EEG_Test0_1  \n","1       50.649449        20.801604              2.722334  EEG_Test0_2  \n","2       42.629270        21.327653              3.976593  EEG_Test0_3  \n","3       44.089441        18.788212              2.098816  EEG_Test0_4  \n","4       31.913806        12.180580              2.435904  EEG_Test0_5  \n","\n","[5 rows x 86 columns]"],"text/html":["\n","  <div id=\"df-97ece7b3-e8e2-45fc-a27f-3239e3c1fa57\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>...</th>\n","      <th>F8_Beta_power</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>...</td>\n","      <td>1827.793507</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>EEG_Test0_1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>...</td>\n","      <td>50.502736</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>EEG_Test0_2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>...</td>\n","      <td>246.406774</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>EEG_Test0_3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>...</td>\n","      <td>173.137554</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>EEG_Test0_4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>...</td>\n","      <td>36.050785</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>EEG_Test0_5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 86 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97ece7b3-e8e2-45fc-a27f-3239e3c1fa57')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-97ece7b3-e8e2-45fc-a27f-3239e3c1fa57 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-97ece7b3-e8e2-45fc-a27f-3239e3c1fa57');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2e591bf6-97e9-41da-9e6e-1ee4a9aa4558\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2e591bf6-97e9-41da-9e6e-1ee4a9aa4558')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2e591bf6-97e9-41da-9e6e-1ee4a9aa4558 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# add Emotion column\n","df_frequency_filtered[\"Emotion\"]=metadata_video_id_list\n","# Drop \"Unnamed: 0\",\"Test\" columns\n","df_frequency_filtered=df_frequency_filtered.drop(columns=[\"Unnamed: 0\",\"Test\"])\n","df_frequency_filtered"],"metadata":{"id":"seLQLjhK-My_","colab":{"base_uri":"https://localhost:8080/","height":547},"executionInfo":{"status":"ok","timestamp":1713879030947,"user_tz":240,"elapsed":23,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"850fc350-81fa-4dfe-e3d2-bbf174fa3f2d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-23-dfb13a3777e7>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_frequency_filtered[\"Emotion\"]=metadata_video_id_list\n"]},{"output_type":"execute_result","data":{"text/plain":["     AF3_Delta_power  AF3_Theta_power  AF3_Alpha_power  AF3_Beta_power  \\\n","0         742.183654        91.890818        29.103071       39.086906   \n","1         814.217772       115.616427        33.692698       52.126272   \n","2         333.443681        56.892036        17.542342       37.008188   \n","3         972.444483        96.292971        21.770639       34.067561   \n","4         679.511986       114.487260        25.583073       32.942404   \n","..               ...              ...              ...             ...   \n","211      3988.090799        66.729897        26.714639       52.603418   \n","212       328.027554        24.065557        12.305281       11.390863   \n","213       196.552634        22.197301        10.330547       11.698973   \n","214       125.616279        14.811609        14.844813       13.978226   \n","215       178.529334        19.035797         8.773452       10.335400   \n","\n","     AF3_Gamma_power  AF3_spectral_entropy  F7_Delta_power  F7_Theta_power  \\\n","0          14.159668              3.392576    19380.110107     1675.854975   \n","1          22.004420              3.517422     2473.146474      137.999940   \n","2          18.740256              4.115038     1400.052844      297.329986   \n","3          19.333383              2.063286    15797.879384     1250.494293   \n","4          14.063132              3.881328      292.466213       38.358567   \n","..               ...                   ...             ...             ...   \n","211        17.757124              2.581967     1128.316705      100.116058   \n","212         4.855920              2.003684     1214.553582       67.621555   \n","213         5.910977              2.469211     2412.923177       94.241990   \n","214         6.082713              3.141940     1198.985129       74.641414   \n","215         5.122136              3.436121      859.856118       52.064562   \n","\n","     F7_Alpha_power  F7_Beta_power  ...  F8_Beta_power  F8_Gamma_power  \\\n","0        993.004181    1200.003919  ...    1827.793507      372.815243   \n","1         28.948250      35.874422  ...      50.502736       18.238877   \n","2        160.979736     296.967472  ...     246.406774       58.009400   \n","3        492.593757     492.119875  ...     173.137554       37.285689   \n","4         10.211787      19.628216  ...      36.050785       14.784819   \n","..              ...            ...  ...            ...             ...   \n","211       25.147104      78.176664  ...     101.401419       55.028680   \n","212       24.157729      25.644321  ...      23.522324       10.241707   \n","213       34.393498      61.537160  ...      33.520476       14.401712   \n","214       33.214891      36.852710  ...      22.146428       11.727418   \n","215       17.522062      24.804552  ...      17.242093        9.168454   \n","\n","     F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  AF4_Alpha_power  \\\n","0               2.927640       722.066811        73.374318        26.934085   \n","1               3.321144       988.999364       104.930425        34.668521   \n","2               3.251759       439.611659        62.292803        21.426163   \n","3               2.788485      6092.273632       235.566933        47.641229   \n","4               3.466234      2339.739461       143.981679        26.881912   \n","..                   ...              ...              ...              ...   \n","211             2.829569       549.013560        50.597313        19.869369   \n","212             3.310003       806.514682        67.316092        34.419324   \n","213             2.614483       929.661063        66.896045        27.174102   \n","214             2.334435       346.849914        31.735962        34.137930   \n","215             3.958936       429.863409        47.130917        20.924372   \n","\n","     AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy  Emotion  \n","0         39.510158        12.868163              3.228577        1  \n","1         50.649449        20.801604              2.722334        1  \n","2         42.629270        21.327653              3.976593        0  \n","3         44.089441        18.788212              2.098816        0  \n","4         31.913806        12.180580              2.435904        1  \n","..              ...              ...                   ...      ...  \n","211       32.719328        26.388016              3.308674        1  \n","212       31.208080        14.308119              3.121754        0  \n","213       28.494446        13.939820              2.230978        0  \n","214       32.800019        15.050338              2.446117        1  \n","215       23.692223        11.364165              3.710480        1  \n","\n","[200 rows x 85 columns]"],"text/html":["\n","  <div id=\"df-c12fab87-3cea-433b-ae6b-cf9d8bfd03cf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_Delta_power</th>\n","      <th>AF3_Theta_power</th>\n","      <th>AF3_Alpha_power</th>\n","      <th>AF3_Beta_power</th>\n","      <th>AF3_Gamma_power</th>\n","      <th>AF3_spectral_entropy</th>\n","      <th>F7_Delta_power</th>\n","      <th>F7_Theta_power</th>\n","      <th>F7_Alpha_power</th>\n","      <th>F7_Beta_power</th>\n","      <th>...</th>\n","      <th>F8_Beta_power</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>742.183654</td>\n","      <td>91.890818</td>\n","      <td>29.103071</td>\n","      <td>39.086906</td>\n","      <td>14.159668</td>\n","      <td>3.392576</td>\n","      <td>19380.110107</td>\n","      <td>1675.854975</td>\n","      <td>993.004181</td>\n","      <td>1200.003919</td>\n","      <td>...</td>\n","      <td>1827.793507</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>814.217772</td>\n","      <td>115.616427</td>\n","      <td>33.692698</td>\n","      <td>52.126272</td>\n","      <td>22.004420</td>\n","      <td>3.517422</td>\n","      <td>2473.146474</td>\n","      <td>137.999940</td>\n","      <td>28.948250</td>\n","      <td>35.874422</td>\n","      <td>...</td>\n","      <td>50.502736</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>333.443681</td>\n","      <td>56.892036</td>\n","      <td>17.542342</td>\n","      <td>37.008188</td>\n","      <td>18.740256</td>\n","      <td>4.115038</td>\n","      <td>1400.052844</td>\n","      <td>297.329986</td>\n","      <td>160.979736</td>\n","      <td>296.967472</td>\n","      <td>...</td>\n","      <td>246.406774</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>972.444483</td>\n","      <td>96.292971</td>\n","      <td>21.770639</td>\n","      <td>34.067561</td>\n","      <td>19.333383</td>\n","      <td>2.063286</td>\n","      <td>15797.879384</td>\n","      <td>1250.494293</td>\n","      <td>492.593757</td>\n","      <td>492.119875</td>\n","      <td>...</td>\n","      <td>173.137554</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>679.511986</td>\n","      <td>114.487260</td>\n","      <td>25.583073</td>\n","      <td>32.942404</td>\n","      <td>14.063132</td>\n","      <td>3.881328</td>\n","      <td>292.466213</td>\n","      <td>38.358567</td>\n","      <td>10.211787</td>\n","      <td>19.628216</td>\n","      <td>...</td>\n","      <td>36.050785</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>3988.090799</td>\n","      <td>66.729897</td>\n","      <td>26.714639</td>\n","      <td>52.603418</td>\n","      <td>17.757124</td>\n","      <td>2.581967</td>\n","      <td>1128.316705</td>\n","      <td>100.116058</td>\n","      <td>25.147104</td>\n","      <td>78.176664</td>\n","      <td>...</td>\n","      <td>101.401419</td>\n","      <td>55.028680</td>\n","      <td>2.829569</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>328.027554</td>\n","      <td>24.065557</td>\n","      <td>12.305281</td>\n","      <td>11.390863</td>\n","      <td>4.855920</td>\n","      <td>2.003684</td>\n","      <td>1214.553582</td>\n","      <td>67.621555</td>\n","      <td>24.157729</td>\n","      <td>25.644321</td>\n","      <td>...</td>\n","      <td>23.522324</td>\n","      <td>10.241707</td>\n","      <td>3.310003</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>213</th>\n","      <td>196.552634</td>\n","      <td>22.197301</td>\n","      <td>10.330547</td>\n","      <td>11.698973</td>\n","      <td>5.910977</td>\n","      <td>2.469211</td>\n","      <td>2412.923177</td>\n","      <td>94.241990</td>\n","      <td>34.393498</td>\n","      <td>61.537160</td>\n","      <td>...</td>\n","      <td>33.520476</td>\n","      <td>14.401712</td>\n","      <td>2.614483</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>125.616279</td>\n","      <td>14.811609</td>\n","      <td>14.844813</td>\n","      <td>13.978226</td>\n","      <td>6.082713</td>\n","      <td>3.141940</td>\n","      <td>1198.985129</td>\n","      <td>74.641414</td>\n","      <td>33.214891</td>\n","      <td>36.852710</td>\n","      <td>...</td>\n","      <td>22.146428</td>\n","      <td>11.727418</td>\n","      <td>2.334435</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>178.529334</td>\n","      <td>19.035797</td>\n","      <td>8.773452</td>\n","      <td>10.335400</td>\n","      <td>5.122136</td>\n","      <td>3.436121</td>\n","      <td>859.856118</td>\n","      <td>52.064562</td>\n","      <td>17.522062</td>\n","      <td>24.804552</td>\n","      <td>...</td>\n","      <td>17.242093</td>\n","      <td>9.168454</td>\n","      <td>3.958936</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 85 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c12fab87-3cea-433b-ae6b-cf9d8bfd03cf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c12fab87-3cea-433b-ae6b-cf9d8bfd03cf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c12fab87-3cea-433b-ae6b-cf9d8bfd03cf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c2c3b4c3-f7c6-4943-ada0-d1b2c56c0aa7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c2c3b4c3-f7c6-4943-ada0-d1b2c56c0aa7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c2c3b4c3-f7c6-4943-ada0-d1b2c56c0aa7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_33fc67fd-cb25-4f83-946e-e66a8918c096\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_frequency_filtered')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_33fc67fd-cb25-4f83-946e-e66a8918c096 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_frequency_filtered');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# concate eeg and hm data\n","df_frequency_filtered=df_frequency_filtered.reset_index(drop=True)\n","df_frequency_filtered=pd.concat([df_rhm, df_frequency_filtered],axis=1)"],"metadata":{"id":"ytkO2naFIWbL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train Test Split"],"metadata":{"id":"eH5eSZ58-nMC"}},{"cell_type":"code","source":["# Assign Folder\n","df_frequency_filtered[\"Folder\"]=folder\n","df_frequency_filtered.head()"],"metadata":{"id":"1_VzOgLz-pdF","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1713879030947,"user_tz":240,"elapsed":18,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"465bff2d-03c6-4693-91ed-8f548f729f65"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   X_mean_acc  X_std_acc  X_var_acc  X_median_acc  X_min_acc  X_max_acc  \\\n","0   -6.846076   1.127397   1.271024     -7.291028  -9.866585   3.020774   \n","1    2.378614   0.445303   0.198294      2.427151 -15.984729  19.594337   \n","2   -4.600323   1.208001   1.459265     -4.332489  -8.411251   2.436726   \n","3    2.307475   0.842399   0.709637      2.494173  -5.548458   6.352721   \n","4   -0.876954   0.603183   0.363829     -1.010116  -5.711226   2.800559   \n","\n","   X_activity_acc  X_mobility_acc  X_complexity_acc  X_ar_coeff_0_acc  ...  \\\n","0        1.271024        0.033221         41.360217          1.039849  ...   \n","1        0.198294        0.283186          3.950224          1.344210  ...   \n","2        1.459265        0.029166         48.092388          1.015230  ...   \n","3        0.709637        0.108667         10.930011          1.282584  ...   \n","4        0.363829        0.072352         16.832129          1.235047  ...   \n","\n","   F8_Gamma_power  F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  \\\n","0      372.815243             2.927640       722.066811        73.374318   \n","1       18.238877             3.321144       988.999364       104.930425   \n","2       58.009400             3.251759       439.611659        62.292803   \n","3       37.285689             2.788485      6092.273632       235.566933   \n","4       14.784819             3.466234      2339.739461       143.981679   \n","\n","   AF4_Alpha_power  AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy  \\\n","0        26.934085       39.510158        12.868163              3.228577   \n","1        34.668521       50.649449        20.801604              2.722334   \n","2        21.426163       42.629270        21.327653              3.976593   \n","3        47.641229       44.089441        18.788212              2.098816   \n","4        26.881912       31.913806        12.180580              2.435904   \n","\n","   Emotion  Folder  \n","0        1       1  \n","1        1       1  \n","2        0       1  \n","3        0       1  \n","4        1       1  \n","\n","[5 rows x 238 columns]"],"text/html":["\n","  <div id=\"df-d4f3778e-2fd4-4781-987d-3ff254e72f2a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X_mean_acc</th>\n","      <th>X_std_acc</th>\n","      <th>X_var_acc</th>\n","      <th>X_median_acc</th>\n","      <th>X_min_acc</th>\n","      <th>X_max_acc</th>\n","      <th>X_activity_acc</th>\n","      <th>X_mobility_acc</th>\n","      <th>X_complexity_acc</th>\n","      <th>X_ar_coeff_0_acc</th>\n","      <th>...</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-6.846076</td>\n","      <td>1.127397</td>\n","      <td>1.271024</td>\n","      <td>-7.291028</td>\n","      <td>-9.866585</td>\n","      <td>3.020774</td>\n","      <td>1.271024</td>\n","      <td>0.033221</td>\n","      <td>41.360217</td>\n","      <td>1.039849</td>\n","      <td>...</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.378614</td>\n","      <td>0.445303</td>\n","      <td>0.198294</td>\n","      <td>2.427151</td>\n","      <td>-15.984729</td>\n","      <td>19.594337</td>\n","      <td>0.198294</td>\n","      <td>0.283186</td>\n","      <td>3.950224</td>\n","      <td>1.344210</td>\n","      <td>...</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-4.600323</td>\n","      <td>1.208001</td>\n","      <td>1.459265</td>\n","      <td>-4.332489</td>\n","      <td>-8.411251</td>\n","      <td>2.436726</td>\n","      <td>1.459265</td>\n","      <td>0.029166</td>\n","      <td>48.092388</td>\n","      <td>1.015230</td>\n","      <td>...</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.307475</td>\n","      <td>0.842399</td>\n","      <td>0.709637</td>\n","      <td>2.494173</td>\n","      <td>-5.548458</td>\n","      <td>6.352721</td>\n","      <td>0.709637</td>\n","      <td>0.108667</td>\n","      <td>10.930011</td>\n","      <td>1.282584</td>\n","      <td>...</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.876954</td>\n","      <td>0.603183</td>\n","      <td>0.363829</td>\n","      <td>-1.010116</td>\n","      <td>-5.711226</td>\n","      <td>2.800559</td>\n","      <td>0.363829</td>\n","      <td>0.072352</td>\n","      <td>16.832129</td>\n","      <td>1.235047</td>\n","      <td>...</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 238 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4f3778e-2fd4-4781-987d-3ff254e72f2a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d4f3778e-2fd4-4781-987d-3ff254e72f2a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d4f3778e-2fd4-4781-987d-3ff254e72f2a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6a473101-133b-4367-98e8-ee434bcbd91c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a473101-133b-4367-98e8-ee434bcbd91c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6a473101-133b-4367-98e8-ee434bcbd91c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_frequency_filtered"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["train_frequency = df_frequency_filtered[df_frequency_filtered['Folder'].isin(train_folders)]\n","X_train_frequency =train_frequency.iloc[:,:-2]\n","y_train_frequency=train_frequency.iloc[:,-2]\n","\n","test_frequency = df_frequency_filtered[df_frequency_filtered['Folder'].isin(test_folders)]\n","X_test_frequency =test_frequency.iloc[:,:-2]\n","y_test_frequency=test_frequency.iloc[:,-2]\n","# X_test_frequency"],"metadata":{"id":"WYqquE1U-6mN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## DNN model + Cross Validation"],"metadata":{"id":"L2J6YWXp_JFS"}},{"cell_type":"code","source":["# To store scores and keep track of the best model\n","cv_scores_frequency = []\n","best_model_frequency = None\n","best_accuracy_frequency = 0  # Initialize best accuracy to zero\n","train_folders_name = train_folders.copy()  # Create a copy to shuffle and split\n","\n","for i in range(fold):\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","\n","    # Split the folders into training and validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","\n","    # Filter data for training and validation sets\n","    train_cv = df_frequency_filtered[df_frequency_filtered['Folder'].isin(train_folders_cv)]\n","    X_train_cv = train_cv.iloc[:, :-2]\n","    y_train_cv = train_cv.iloc[:, -2]\n","\n","    val_cv = df_frequency_filtered[df_frequency_filtered['Folder'].isin(val_folders_cv)]\n","    X_val_cv = val_cv.iloc[:, :-2]\n","    y_val_cv = val_cv.iloc[:, -2]\n","\n","    # Define the model\n","    model_frequency = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_frequency.fit(X_train_cv, y_train_cv,\n","                                  epochs=100,  # Consider increasing epochs\n","                                  batch_size=batch_size,\n","                                  verbose=0,\n","                                  callbacks=[print_callback],\n","                                  validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_frequency.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores_frequency.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_frequency:\n","        best_accuracy_frequency = val_accuracy\n","        best_model_frequency = model_frequency\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_frequency * 100:.2f}%\")\n","\n","# Optionally, save the best model\n","if best_model_frequency:\n","    best_model_frequency.save('best_model_frequency.h5')\n"],"metadata":{"id":"E08HRLZYOPDj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879062500,"user_tz":240,"elapsed":31570,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"441b772f-c5ee-4134-831e-7ef24c280791"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 7.6372, Accuracy: 0.7279\n","Epoch: 40, Loss: 1.7739, Accuracy: 0.8603\n","Epoch: 60, Loss: 0.8507, Accuracy: 0.8897\n","Epoch: 80, Loss: 0.3142, Accuracy: 0.9485\n","Epoch: 100, Loss: 0.0621, Accuracy: 0.9779\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7d4622d2ae60> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 61ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Epoch: 20, Loss: 4.7060, Accuracy: 0.8015\n","Epoch: 40, Loss: 1.7633, Accuracy: 0.8897\n","Epoch: 60, Loss: 0.5041, Accuracy: 0.9485\n","Epoch: 80, Loss: 0.0573, Accuracy: 0.9779\n","Epoch: 100, Loss: 0.0063, Accuracy: 1.0000\n","1/1 [==============================] - 0s 93ms/step\n","Fold completed. Validation accuracy: 50.00%\n","Epoch: 20, Loss: 7.9126, Accuracy: 0.7941\n","Epoch: 40, Loss: 0.6928, Accuracy: 0.9118\n","Epoch: 60, Loss: 1.6628, Accuracy: 0.8897\n","Epoch: 80, Loss: 0.0813, Accuracy: 0.9853\n","Epoch: 100, Loss: 0.0066, Accuracy: 1.0000\n","1/1 [==============================] - 0s 65ms/step\n","Fold completed. Validation accuracy: 25.00%\n","Epoch: 20, Loss: 9.4496, Accuracy: 0.7500\n","Epoch: 40, Loss: 1.7008, Accuracy: 0.8603\n","Epoch: 60, Loss: 1.2025, Accuracy: 0.9044\n","Epoch: 80, Loss: 0.0832, Accuracy: 0.9853\n","Epoch: 100, Loss: 0.0458, Accuracy: 0.9853\n","1/1 [==============================] - 0s 83ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 6.9785, Accuracy: 0.7647\n","Epoch: 40, Loss: 1.5881, Accuracy: 0.8676\n","Epoch: 60, Loss: 0.1951, Accuracy: 0.9559\n","Epoch: 80, Loss: 0.0470, Accuracy: 0.9853\n","Epoch: 100, Loss: 0.1599, Accuracy: 0.9926\n","1/1 [==============================] - 0s 59ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Best validation accuracy: 56.25%\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"markdown","source":["# Time Frequency Together"],"metadata":{"id":"yNwkLR--TjAY"}},{"cell_type":"markdown","source":["## Concatenate Data"],"metadata":{"id":"KZRYW7_6Y2X6"}},{"cell_type":"code","source":["df_time_filtered_incomplete=df_time_filtered.iloc[:,:-2]\n","df_time_frequency=pd.concat([df_time_filtered_incomplete, df_frequency_filtered], axis=1)\n","df_time_frequency"],"metadata":{"id":"6kZ6R5FKUKEA","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1713879062501,"user_tz":240,"elapsed":33,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"8e913d17-3a32-4b5f-997b-ea78954db7a6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     X_mean_acc  X_std_acc  X_var_acc  X_median_acc  X_min_acc  X_max_acc  \\\n","0     -6.846076   1.127397   1.271024     -7.291028  -9.866585   3.020774   \n","1      2.378614   0.445303   0.198294      2.427151 -15.984729  19.594337   \n","2     -4.600323   1.208001   1.459265     -4.332489  -8.411251   2.436726   \n","3      2.307475   0.842399   0.709637      2.494173  -5.548458   6.352721   \n","4     -0.876954   0.603183   0.363829     -1.010116  -5.711226   2.800559   \n","..          ...        ...        ...           ...        ...        ...   \n","195   -1.026608   0.673073   0.453027     -0.895221  -7.166558   4.294190   \n","196    0.855077   0.705780   0.498126      0.684581  -2.963326  16.674097   \n","197    1.761846   0.449221   0.201799      1.766506  -3.710142   6.534637   \n","198   -0.530926   1.917458   3.676647     -0.694156 -11.762347  10.220843   \n","199    0.666244   0.960139   0.921866      1.144160  -5.213348   5.682502   \n","\n","     X_activity_acc  X_mobility_acc  X_complexity_acc  X_ar_coeff_0_acc  ...  \\\n","0          1.271024        0.033221         41.360217          1.039849  ...   \n","1          0.198294        0.283186          3.950224          1.344210  ...   \n","2          1.459265        0.029166         48.092388          1.015230  ...   \n","3          0.709637        0.108667         10.930011          1.282584  ...   \n","4          0.363829        0.072352         16.832129          1.235047  ...   \n","..              ...             ...               ...               ...  ...   \n","195        0.453027        0.190876          6.090877          1.327769  ...   \n","196        0.498126        0.117301         10.614548          1.285143  ...   \n","197        0.201799        0.241573          5.045190          1.340544  ...   \n","198        3.676647        0.049494         22.914340          1.349513  ...   \n","199        0.921866        0.092335         12.092435          1.449848  ...   \n","\n","     F8_Gamma_power  F8_spectral_entropy  AF4_Delta_power  AF4_Theta_power  \\\n","0        372.815243             2.927640       722.066811        73.374318   \n","1         18.238877             3.321144       988.999364       104.930425   \n","2         58.009400             3.251759       439.611659        62.292803   \n","3         37.285689             2.788485      6092.273632       235.566933   \n","4         14.784819             3.466234      2339.739461       143.981679   \n","..              ...                  ...              ...              ...   \n","195       55.028680             2.829569       549.013560        50.597313   \n","196       10.241707             3.310003       806.514682        67.316092   \n","197       14.401712             2.614483       929.661063        66.896045   \n","198       11.727418             2.334435       346.849914        31.735962   \n","199        9.168454             3.958936       429.863409        47.130917   \n","\n","     AF4_Alpha_power  AF4_Beta_power  AF4_Gamma_power  AF4_spectral_entropy  \\\n","0          26.934085       39.510158        12.868163              3.228577   \n","1          34.668521       50.649449        20.801604              2.722334   \n","2          21.426163       42.629270        21.327653              3.976593   \n","3          47.641229       44.089441        18.788212              2.098816   \n","4          26.881912       31.913806        12.180580              2.435904   \n","..               ...             ...              ...                   ...   \n","195        19.869369       32.719328        26.388016              3.308674   \n","196        34.419324       31.208080        14.308119              3.121754   \n","197        27.174102       28.494446        13.939820              2.230978   \n","198        34.137930       32.800019        15.050338              2.446117   \n","199        20.924372       23.692223        11.364165              3.710480   \n","\n","     Emotion  Folder  \n","0          1       1  \n","1          1       1  \n","2          0       1  \n","3          0       1  \n","4          1       1  \n","..       ...     ...  \n","195        1      25  \n","196        0      25  \n","197        0      25  \n","198        1      25  \n","199        1      25  \n","\n","[200 rows x 586 columns]"],"text/html":["\n","  <div id=\"df-c45a7a9e-47c6-4956-8735-95ad46fb6a5e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X_mean_acc</th>\n","      <th>X_std_acc</th>\n","      <th>X_var_acc</th>\n","      <th>X_median_acc</th>\n","      <th>X_min_acc</th>\n","      <th>X_max_acc</th>\n","      <th>X_activity_acc</th>\n","      <th>X_mobility_acc</th>\n","      <th>X_complexity_acc</th>\n","      <th>X_ar_coeff_0_acc</th>\n","      <th>...</th>\n","      <th>F8_Gamma_power</th>\n","      <th>F8_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-6.846076</td>\n","      <td>1.127397</td>\n","      <td>1.271024</td>\n","      <td>-7.291028</td>\n","      <td>-9.866585</td>\n","      <td>3.020774</td>\n","      <td>1.271024</td>\n","      <td>0.033221</td>\n","      <td>41.360217</td>\n","      <td>1.039849</td>\n","      <td>...</td>\n","      <td>372.815243</td>\n","      <td>2.927640</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.378614</td>\n","      <td>0.445303</td>\n","      <td>0.198294</td>\n","      <td>2.427151</td>\n","      <td>-15.984729</td>\n","      <td>19.594337</td>\n","      <td>0.198294</td>\n","      <td>0.283186</td>\n","      <td>3.950224</td>\n","      <td>1.344210</td>\n","      <td>...</td>\n","      <td>18.238877</td>\n","      <td>3.321144</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-4.600323</td>\n","      <td>1.208001</td>\n","      <td>1.459265</td>\n","      <td>-4.332489</td>\n","      <td>-8.411251</td>\n","      <td>2.436726</td>\n","      <td>1.459265</td>\n","      <td>0.029166</td>\n","      <td>48.092388</td>\n","      <td>1.015230</td>\n","      <td>...</td>\n","      <td>58.009400</td>\n","      <td>3.251759</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.307475</td>\n","      <td>0.842399</td>\n","      <td>0.709637</td>\n","      <td>2.494173</td>\n","      <td>-5.548458</td>\n","      <td>6.352721</td>\n","      <td>0.709637</td>\n","      <td>0.108667</td>\n","      <td>10.930011</td>\n","      <td>1.282584</td>\n","      <td>...</td>\n","      <td>37.285689</td>\n","      <td>2.788485</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.876954</td>\n","      <td>0.603183</td>\n","      <td>0.363829</td>\n","      <td>-1.010116</td>\n","      <td>-5.711226</td>\n","      <td>2.800559</td>\n","      <td>0.363829</td>\n","      <td>0.072352</td>\n","      <td>16.832129</td>\n","      <td>1.235047</td>\n","      <td>...</td>\n","      <td>14.784819</td>\n","      <td>3.466234</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>-1.026608</td>\n","      <td>0.673073</td>\n","      <td>0.453027</td>\n","      <td>-0.895221</td>\n","      <td>-7.166558</td>\n","      <td>4.294190</td>\n","      <td>0.453027</td>\n","      <td>0.190876</td>\n","      <td>6.090877</td>\n","      <td>1.327769</td>\n","      <td>...</td>\n","      <td>55.028680</td>\n","      <td>2.829569</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>0.855077</td>\n","      <td>0.705780</td>\n","      <td>0.498126</td>\n","      <td>0.684581</td>\n","      <td>-2.963326</td>\n","      <td>16.674097</td>\n","      <td>0.498126</td>\n","      <td>0.117301</td>\n","      <td>10.614548</td>\n","      <td>1.285143</td>\n","      <td>...</td>\n","      <td>10.241707</td>\n","      <td>3.310003</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>1.761846</td>\n","      <td>0.449221</td>\n","      <td>0.201799</td>\n","      <td>1.766506</td>\n","      <td>-3.710142</td>\n","      <td>6.534637</td>\n","      <td>0.201799</td>\n","      <td>0.241573</td>\n","      <td>5.045190</td>\n","      <td>1.340544</td>\n","      <td>...</td>\n","      <td>14.401712</td>\n","      <td>2.614483</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>-0.530926</td>\n","      <td>1.917458</td>\n","      <td>3.676647</td>\n","      <td>-0.694156</td>\n","      <td>-11.762347</td>\n","      <td>10.220843</td>\n","      <td>3.676647</td>\n","      <td>0.049494</td>\n","      <td>22.914340</td>\n","      <td>1.349513</td>\n","      <td>...</td>\n","      <td>11.727418</td>\n","      <td>2.334435</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>0.666244</td>\n","      <td>0.960139</td>\n","      <td>0.921866</td>\n","      <td>1.144160</td>\n","      <td>-5.213348</td>\n","      <td>5.682502</td>\n","      <td>0.921866</td>\n","      <td>0.092335</td>\n","      <td>12.092435</td>\n","      <td>1.449848</td>\n","      <td>...</td>\n","      <td>9.168454</td>\n","      <td>3.958936</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 586 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c45a7a9e-47c6-4956-8735-95ad46fb6a5e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c45a7a9e-47c6-4956-8735-95ad46fb6a5e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c45a7a9e-47c6-4956-8735-95ad46fb6a5e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-78b31900-644b-4a77-8ecf-7660e4b4bbcc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-78b31900-644b-4a77-8ecf-7660e4b4bbcc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-78b31900-644b-4a77-8ecf-7660e4b4bbcc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9f2dd62b-ee71-41c1-b346-579a9588df53\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_time_frequency')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9f2dd62b-ee71-41c1-b346-579a9588df53 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_time_frequency');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_time_frequency"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# concate eeg and hm data\n","df_time_frequency=df_time_frequency.reset_index(drop=True)\n","df_time_frequency=pd.concat([df_rhm, df_time_frequency],axis=1)"],"metadata":{"id":"Ze3OQDnxJSWz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train test split"],"metadata":{"id":"B2qpOAqvUo2E"}},{"cell_type":"code","source":["train_time_frequency = df_time_frequency[df_time_frequency['Folder'].isin(train_folders)]\n","X_train_time_frequency =train_time_frequency.iloc[:,:-2]\n","y_train_time_frequency=train_time_frequency.iloc[:,-2]\n","\n","test_time_frequency = df_time_frequency[df_time_frequency['Folder'].isin(test_folders)]\n","X_test_time_frequency =test_time_frequency.iloc[:,:-2]\n","y_test_time_frequency=test_time_frequency.iloc[:,-2]"],"metadata":{"id":"yFcbe_CmUoCe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## DNN and CV"],"metadata":{"id":"x0pXAbDtU_pA"}},{"cell_type":"code","source":["# # Now we will perform cross-validation\n","# # Prepare full dataset\n","# X_full = df_time_filtered.iloc[:, :-2]\n","# y_full = df_time_filtered.iloc[:, -2]\n","\n","# # Initialize KFold\n","# kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# To store scores\n","cv_scores = []\n","best_model_time_frequency = 0\n","best_accuracy_time_frequency = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders.copy()\n","\n","\n","for i in range(fold): #5 fold cross validation\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_time_frequency[train_time_frequency['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_time_frequency[train_time_frequency['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_time_frequency = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_time_frequency.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_time_frequency.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_time_frequency:\n","        best_accuracy_time_frequency = val_accuracy\n","        best_model_time_frequency = model_time_frequency\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_time_frequency * 100:.2f}%\")\n"],"metadata":{"id":"MgnZbbiPVBfY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713879095481,"user_tz":240,"elapsed":32682,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"93736acc-be5c-48a5-c8d5-f78d22e22f33"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 15.2434, Accuracy: 0.8162\n","Epoch: 40, Loss: 3.4441, Accuracy: 0.8971\n","Epoch: 60, Loss: 14.1039, Accuracy: 0.8162\n","Epoch: 80, Loss: 7.7744, Accuracy: 0.8676\n","Epoch: 100, Loss: 2.6968, Accuracy: 0.9559\n","1/1 [==============================] - 0s 91ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Epoch: 20, Loss: 43.1173, Accuracy: 0.7574\n","Epoch: 40, Loss: 35.8133, Accuracy: 0.7132\n","Epoch: 60, Loss: 7.3043, Accuracy: 0.8971\n","Epoch: 80, Loss: 0.7586, Accuracy: 0.9632\n","Epoch: 100, Loss: 1.3787, Accuracy: 0.9632\n","1/1 [==============================] - 0s 69ms/step\n","Fold completed. Validation accuracy: 56.25%\n","Epoch: 20, Loss: 28.4248, Accuracy: 0.8088\n","Epoch: 40, Loss: 17.0068, Accuracy: 0.8456\n","Epoch: 60, Loss: 1.9308, Accuracy: 0.9338\n","Epoch: 80, Loss: 5.6747, Accuracy: 0.9044\n","Epoch: 100, Loss: 0.0081, Accuracy: 0.9926\n","1/1 [==============================] - 0s 89ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Epoch: 20, Loss: 11.2569, Accuracy: 0.7794\n","Epoch: 40, Loss: 14.6385, Accuracy: 0.8088\n","Epoch: 60, Loss: 4.1056, Accuracy: 0.9044\n","Epoch: 80, Loss: 2.0388, Accuracy: 0.9265\n","Epoch: 100, Loss: 12.2032, Accuracy: 0.8382\n","1/1 [==============================] - 0s 66ms/step\n","Fold completed. Validation accuracy: 37.50%\n","Epoch: 20, Loss: 59.4847, Accuracy: 0.7353\n","Epoch: 40, Loss: 11.9831, Accuracy: 0.8162\n","Epoch: 60, Loss: 7.6808, Accuracy: 0.8603\n","Epoch: 80, Loss: 1.2355, Accuracy: 0.9338\n","Epoch: 100, Loss: 2.3658, Accuracy: 0.9559\n","1/1 [==============================] - 0s 96ms/step\n","Fold completed. Validation accuracy: 43.75%\n","Best validation accuracy: 56.25%\n"]}]},{"cell_type":"markdown","source":["# Theoretically Important Position only"],"metadata":{"id":"FzcnhyT6XOlA"}},{"cell_type":"markdown","source":["## Extract Data"],"metadata":{"id":"c64LIHlfXTiG"}},{"cell_type":"code","source":["df_time_frequency.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKxzkTZhXS2x","executionInfo":{"status":"ok","timestamp":1713879095481,"user_tz":240,"elapsed":28,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"50e169bd-b50c-449c-d277-c53a925ce0ab"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['X_mean_acc', 'X_std_acc', 'X_var_acc', 'X_median_acc', 'X_min_acc',\n","       'X_max_acc', 'X_activity_acc', 'X_mobility_acc', 'X_complexity_acc',\n","       'X_ar_coeff_0_acc',\n","       ...\n","       'F8_Gamma_power', 'F8_spectral_entropy', 'AF4_Delta_power',\n","       'AF4_Theta_power', 'AF4_Alpha_power', 'AF4_Beta_power',\n","       'AF4_Gamma_power', 'AF4_spectral_entropy', 'Emotion', 'Folder'],\n","      dtype='object', length=738)"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# Assuming df_time_frequency is your DataFrame\n","selected_columns = [col for col in df_time_frequency.columns if any(feature in col for feature in ['F3', 'F4', 'FC5', 'FC6', 'O1', 'O2', 'Emotion','Folder'])]\n","\n","# Creating a new DataFrame with the selected columns\n","df_important_positions = df_time_frequency[selected_columns]\n","df_important_positions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"N2K-j_ssXXmY","executionInfo":{"status":"ok","timestamp":1713879095481,"user_tz":240,"elapsed":24,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"d27d6baf-626a-41b5-b315-032d1a1b6ea9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        AF3_mean    AF3_std      AF3_var   AF3_median      AF3_min  \\\n","0    4233.422687  43.471805  1889.797801  4231.794922  3241.025635   \n","1    4231.008787  44.189663  1952.726344  4229.743652  3387.692139   \n","2    4235.494381  25.175706   633.816192  4233.846191  3968.205078   \n","3    4237.481215  86.477155  7478.298389  4236.922852  3529.743408   \n","4    4233.419821  34.626376  1198.985906  4230.769043  3809.230713   \n","..           ...        ...          ...          ...          ...   \n","195  4239.671983  97.882280  9580.940701  4237.948730   759.487183   \n","196  4229.912101  50.426474  2542.829266  4228.205078  3890.256348   \n","197  4234.076193  32.293637  1042.878960  4234.871582  4091.281982   \n","198  4236.514296  21.179939   448.589826  4236.410156  4070.769043   \n","199  4237.631749  19.933718   397.353096  4237.436035  4154.871582   \n","\n","         AF3_max  AF3_activity  AF3_mobility  AF3_complexity  AF3_ar_coeff_0  \\\n","0    4429.230469   1889.797801      0.212561        5.546035        1.886056   \n","1    5505.127930   1952.726344      0.269354        4.519996        1.854385   \n","2    4438.974121    633.816192      0.379098        3.379011        1.709990   \n","3    5739.486816   7478.298389      0.111843       11.086097        1.798939   \n","4    4543.589844   1198.985906      0.264964        4.459335        1.864686   \n","..           ...           ...           ...             ...             ...   \n","195  4835.384277   9580.940701      0.106721       10.789804        1.931506   \n","196  4543.076660   2542.829266      0.105597       11.185909        1.850163   \n","197  4401.025391   1042.878960      0.171739        7.219231        1.768337   \n","198  4437.435547    448.589826      0.276163        4.529806        1.562347   \n","199  4365.641113    397.353096      0.257500        4.828735        1.731316   \n","\n","     ...  F4_Gamma_power  F4_spectral_entropy  AF4_Delta_power  \\\n","0    ...       12.029786             3.181718       722.066811   \n","1    ...       12.436428             3.171125       988.999364   \n","2    ...       14.274776             3.909695       439.611659   \n","3    ...       15.984435             2.310437      6092.273632   \n","4    ...       14.544876             3.747753      2339.739461   \n","..   ...             ...                  ...              ...   \n","195  ...       28.791751             4.099605       549.013560   \n","196  ...        6.217567             2.119598       806.514682   \n","197  ...        6.597051             1.864852       929.661063   \n","198  ...        7.239505             3.359720       346.849914   \n","199  ...        5.487111             3.543667       429.863409   \n","\n","     AF4_Theta_power  AF4_Alpha_power  AF4_Beta_power  AF4_Gamma_power  \\\n","0          73.374318        26.934085       39.510158        12.868163   \n","1         104.930425        34.668521       50.649449        20.801604   \n","2          62.292803        21.426163       42.629270        21.327653   \n","3         235.566933        47.641229       44.089441        18.788212   \n","4         143.981679        26.881912       31.913806        12.180580   \n","..               ...              ...             ...              ...   \n","195        50.597313        19.869369       32.719328        26.388016   \n","196        67.316092        34.419324       31.208080        14.308119   \n","197        66.896045        27.174102       28.494446        13.939820   \n","198        31.735962        34.137930       32.800019        15.050338   \n","199        47.130917        20.924372       23.692223        11.364165   \n","\n","     AF4_spectral_entropy  Emotion  Folder  \n","0                3.228577        1       1  \n","1                2.722334        1       1  \n","2                3.976593        0       1  \n","3                2.098816        0       1  \n","4                2.435904        1       1  \n","..                    ...      ...     ...  \n","195              3.308674        1      25  \n","196              3.121754        0      25  \n","197              2.230978        0      25  \n","198              2.446117        1      25  \n","199              3.710480        1      25  \n","\n","[200 rows x 162 columns]"],"text/html":["\n","  <div id=\"df-757b92a9-137d-477f-abb7-307ff5cab79b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AF3_mean</th>\n","      <th>AF3_std</th>\n","      <th>AF3_var</th>\n","      <th>AF3_median</th>\n","      <th>AF3_min</th>\n","      <th>AF3_max</th>\n","      <th>AF3_activity</th>\n","      <th>AF3_mobility</th>\n","      <th>AF3_complexity</th>\n","      <th>AF3_ar_coeff_0</th>\n","      <th>...</th>\n","      <th>F4_Gamma_power</th>\n","      <th>F4_spectral_entropy</th>\n","      <th>AF4_Delta_power</th>\n","      <th>AF4_Theta_power</th>\n","      <th>AF4_Alpha_power</th>\n","      <th>AF4_Beta_power</th>\n","      <th>AF4_Gamma_power</th>\n","      <th>AF4_spectral_entropy</th>\n","      <th>Emotion</th>\n","      <th>Folder</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4233.422687</td>\n","      <td>43.471805</td>\n","      <td>1889.797801</td>\n","      <td>4231.794922</td>\n","      <td>3241.025635</td>\n","      <td>4429.230469</td>\n","      <td>1889.797801</td>\n","      <td>0.212561</td>\n","      <td>5.546035</td>\n","      <td>1.886056</td>\n","      <td>...</td>\n","      <td>12.029786</td>\n","      <td>3.181718</td>\n","      <td>722.066811</td>\n","      <td>73.374318</td>\n","      <td>26.934085</td>\n","      <td>39.510158</td>\n","      <td>12.868163</td>\n","      <td>3.228577</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4231.008787</td>\n","      <td>44.189663</td>\n","      <td>1952.726344</td>\n","      <td>4229.743652</td>\n","      <td>3387.692139</td>\n","      <td>5505.127930</td>\n","      <td>1952.726344</td>\n","      <td>0.269354</td>\n","      <td>4.519996</td>\n","      <td>1.854385</td>\n","      <td>...</td>\n","      <td>12.436428</td>\n","      <td>3.171125</td>\n","      <td>988.999364</td>\n","      <td>104.930425</td>\n","      <td>34.668521</td>\n","      <td>50.649449</td>\n","      <td>20.801604</td>\n","      <td>2.722334</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4235.494381</td>\n","      <td>25.175706</td>\n","      <td>633.816192</td>\n","      <td>4233.846191</td>\n","      <td>3968.205078</td>\n","      <td>4438.974121</td>\n","      <td>633.816192</td>\n","      <td>0.379098</td>\n","      <td>3.379011</td>\n","      <td>1.709990</td>\n","      <td>...</td>\n","      <td>14.274776</td>\n","      <td>3.909695</td>\n","      <td>439.611659</td>\n","      <td>62.292803</td>\n","      <td>21.426163</td>\n","      <td>42.629270</td>\n","      <td>21.327653</td>\n","      <td>3.976593</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4237.481215</td>\n","      <td>86.477155</td>\n","      <td>7478.298389</td>\n","      <td>4236.922852</td>\n","      <td>3529.743408</td>\n","      <td>5739.486816</td>\n","      <td>7478.298389</td>\n","      <td>0.111843</td>\n","      <td>11.086097</td>\n","      <td>1.798939</td>\n","      <td>...</td>\n","      <td>15.984435</td>\n","      <td>2.310437</td>\n","      <td>6092.273632</td>\n","      <td>235.566933</td>\n","      <td>47.641229</td>\n","      <td>44.089441</td>\n","      <td>18.788212</td>\n","      <td>2.098816</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4233.419821</td>\n","      <td>34.626376</td>\n","      <td>1198.985906</td>\n","      <td>4230.769043</td>\n","      <td>3809.230713</td>\n","      <td>4543.589844</td>\n","      <td>1198.985906</td>\n","      <td>0.264964</td>\n","      <td>4.459335</td>\n","      <td>1.864686</td>\n","      <td>...</td>\n","      <td>14.544876</td>\n","      <td>3.747753</td>\n","      <td>2339.739461</td>\n","      <td>143.981679</td>\n","      <td>26.881912</td>\n","      <td>31.913806</td>\n","      <td>12.180580</td>\n","      <td>2.435904</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>4239.671983</td>\n","      <td>97.882280</td>\n","      <td>9580.940701</td>\n","      <td>4237.948730</td>\n","      <td>759.487183</td>\n","      <td>4835.384277</td>\n","      <td>9580.940701</td>\n","      <td>0.106721</td>\n","      <td>10.789804</td>\n","      <td>1.931506</td>\n","      <td>...</td>\n","      <td>28.791751</td>\n","      <td>4.099605</td>\n","      <td>549.013560</td>\n","      <td>50.597313</td>\n","      <td>19.869369</td>\n","      <td>32.719328</td>\n","      <td>26.388016</td>\n","      <td>3.308674</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>4229.912101</td>\n","      <td>50.426474</td>\n","      <td>2542.829266</td>\n","      <td>4228.205078</td>\n","      <td>3890.256348</td>\n","      <td>4543.076660</td>\n","      <td>2542.829266</td>\n","      <td>0.105597</td>\n","      <td>11.185909</td>\n","      <td>1.850163</td>\n","      <td>...</td>\n","      <td>6.217567</td>\n","      <td>2.119598</td>\n","      <td>806.514682</td>\n","      <td>67.316092</td>\n","      <td>34.419324</td>\n","      <td>31.208080</td>\n","      <td>14.308119</td>\n","      <td>3.121754</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>4234.076193</td>\n","      <td>32.293637</td>\n","      <td>1042.878960</td>\n","      <td>4234.871582</td>\n","      <td>4091.281982</td>\n","      <td>4401.025391</td>\n","      <td>1042.878960</td>\n","      <td>0.171739</td>\n","      <td>7.219231</td>\n","      <td>1.768337</td>\n","      <td>...</td>\n","      <td>6.597051</td>\n","      <td>1.864852</td>\n","      <td>929.661063</td>\n","      <td>66.896045</td>\n","      <td>27.174102</td>\n","      <td>28.494446</td>\n","      <td>13.939820</td>\n","      <td>2.230978</td>\n","      <td>0</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>4236.514296</td>\n","      <td>21.179939</td>\n","      <td>448.589826</td>\n","      <td>4236.410156</td>\n","      <td>4070.769043</td>\n","      <td>4437.435547</td>\n","      <td>448.589826</td>\n","      <td>0.276163</td>\n","      <td>4.529806</td>\n","      <td>1.562347</td>\n","      <td>...</td>\n","      <td>7.239505</td>\n","      <td>3.359720</td>\n","      <td>346.849914</td>\n","      <td>31.735962</td>\n","      <td>34.137930</td>\n","      <td>32.800019</td>\n","      <td>15.050338</td>\n","      <td>2.446117</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>4237.631749</td>\n","      <td>19.933718</td>\n","      <td>397.353096</td>\n","      <td>4237.436035</td>\n","      <td>4154.871582</td>\n","      <td>4365.641113</td>\n","      <td>397.353096</td>\n","      <td>0.257500</td>\n","      <td>4.828735</td>\n","      <td>1.731316</td>\n","      <td>...</td>\n","      <td>5.487111</td>\n","      <td>3.543667</td>\n","      <td>429.863409</td>\n","      <td>47.130917</td>\n","      <td>20.924372</td>\n","      <td>23.692223</td>\n","      <td>11.364165</td>\n","      <td>3.710480</td>\n","      <td>1</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 162 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-757b92a9-137d-477f-abb7-307ff5cab79b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-757b92a9-137d-477f-abb7-307ff5cab79b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-757b92a9-137d-477f-abb7-307ff5cab79b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7f7faa3d-4e78-4f38-99bf-d6197a222d9b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f7faa3d-4e78-4f38-99bf-d6197a222d9b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7f7faa3d-4e78-4f38-99bf-d6197a222d9b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2db46369-31f8-47b6-912b-84669cb8fa48\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_important_positions')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2db46369-31f8-47b6-912b-84669cb8fa48 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_important_positions');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_important_positions"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# concate eeg and hm data\n","df_important_positions=df_important_positions.reset_index(drop=True)\n","df_important_positions=pd.concat([df_rhm, df_important_positions],axis=1)"],"metadata":{"id":"WbGkPDNzJck1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train test split"],"metadata":{"id":"-F1ZeiW6d_gv"}},{"cell_type":"code","source":["train_important_positions = df_important_positions[df_important_positions['Folder'].isin(train_folders)]\n","X_train_important_positions =train_important_positions.iloc[:,:-2]\n","y_train_important_positions=train_important_positions.iloc[:,-2]\n","\n","test_important_positions = df_important_positions[df_important_positions['Folder'].isin(test_folders)]\n","X_test_important_positions =test_important_positions.iloc[:,:-2]\n","y_test_important_positions=test_important_positions.iloc[:,-2]"],"metadata":{"id":"kq7JoWo5eXhM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## DNN model +CV"],"metadata":{"id":"WS5bY3VEeCCA"}},{"cell_type":"code","source":["# To store scores\n","cv_scores = []\n","best_model_important_positions = 0\n","best_accuracy_important_positions = 0  # Initialize best accuracy to zero\n","train_folders_name=train_folders.copy()\n","\n","\n","for i in range(fold):\n","    # Shuffle the folder names to ensure random distribution\n","    random.shuffle(train_folders_name)\n","    # print(train_folders_name)\n","\n","    # Calculate the indices for the 90-10 split\n","    train_split_cv = int(0.9 * len(train_folders_name))  # 90% for training\n","    # valid_split = train_split + int(0.1 * len(folder_names))  # 10% for validation\n","\n","    # Split the folders into training, validation\n","    train_folders_cv = train_folders_name[:train_split_cv]\n","    # valid_folders = folder_names[train_split:valid_split]\n","    val_folders_cv = train_folders_name[train_split_cv:]\n","    # print(\"train_folders_cv\",len(train_folders_cv))\n","    # print(\"val_folders_cv\",val_folders_cv)\n","\n","    train_cv = train_important_positions[train_important_positions['Folder'].isin(train_folders_cv)]\n","    X_train_cv =train_cv.iloc[:,:-2]\n","    y_train_cv=train_cv.iloc[:,-2]\n","    # display(val_cv)\n","\n","    val_cv = train_important_positions[train_important_positions['Folder'].isin(val_folders_cv)]\n","    X_val_cv =val_cv.iloc[:,:-2]\n","    y_val_cv=val_cv.iloc[:,-2]\n","\n","    # Define the model\n","    model_important_positions = create_model(X_train_cv.shape[1])\n","\n","    # Create a custom callback to print loss and accuracy every 20 epochs\n","    print_callback = LambdaCallback(on_epoch_end=lambda epoch, logs:\n","                                    print(f\"Epoch: {epoch+1}, Loss: {logs['loss']:.4f}, Accuracy: {logs['accuracy']:.4f}\")\n","                                    if (epoch+1) % 20 == 0 else None)\n","\n","    # Train the model\n","    history = model_important_positions.fit(X_train_cv, y_train_cv,\n","                             epochs=100,\n","                             batch_size=batch_size,\n","                             verbose=0,\n","                             callbacks=[print_callback],\n","                             validation_data=(X_val_cv, y_val_cv))\n","\n","    # Evaluate the model on the validation set\n","    val_predictions = (model_important_positions.predict(X_val_cv) > 0.5).astype(\"int32\")\n","    val_accuracy = accuracy_score(y_val_cv, val_predictions)\n","    cv_scores.append(val_accuracy)\n","    print(f\"Fold completed. Validation accuracy: {val_accuracy * 100:.2f}%\")\n","\n","    # Check if the current model has the best accuracy\n","    if val_accuracy > best_accuracy_important_positions:\n","        best_accuracy_important_positions = val_accuracy\n","        best_model_important_positions = model_important_positions\n","\n","# Report the best accuracy found\n","print(f\"Best validation accuracy: {best_accuracy_important_positions * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GFllnm1HZmCC","outputId":"c3668b8a-aac9-4a06-f17b-2e6aeeb4584f","executionInfo":{"status":"ok","timestamp":1713879136804,"user_tz":240,"elapsed":41344,"user":{"displayName":"Wang","userId":"06822780026042244845"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 20, Loss: 26.7667, Accuracy: 0.6912\n","Epoch: 40, Loss: 6.3406, Accuracy: 0.7647\n","Epoch: 60, Loss: 10.2532, Accuracy: 0.7132\n","Epoch: 80, Loss: 1.2919, Accuracy: 0.8971\n","Epoch: 100, Loss: 1.2371, Accuracy: 0.9118\n","1/1 [==============================] - 0s 67ms/step\n","Fold completed. Validation accuracy: 87.50%\n","Epoch: 20, Loss: 19.8681, Accuracy: 0.7132\n","Epoch: 40, Loss: 11.3869, Accuracy: 0.8235\n","Epoch: 60, Loss: 9.3216, Accuracy: 0.8382\n","Epoch: 80, Loss: 18.2915, Accuracy: 0.7500\n","Epoch: 100, Loss: 2.0864, Accuracy: 0.9338\n","1/1 [==============================] - 0s 61ms/step\n","Fold completed. Validation accuracy: 31.25%\n","Epoch: 20, Loss: 28.2826, Accuracy: 0.7426\n","Epoch: 40, Loss: 9.6770, Accuracy: 0.8309\n","Epoch: 60, Loss: 4.3286, Accuracy: 0.8309\n","Epoch: 80, Loss: 4.2832, Accuracy: 0.8676\n","Epoch: 100, Loss: 5.6108, Accuracy: 0.8309\n","1/1 [==============================] - 0s 60ms/step\n","Fold completed. Validation accuracy: 62.50%\n","Epoch: 20, Loss: 21.9060, Accuracy: 0.7574\n","Epoch: 40, Loss: 9.4950, Accuracy: 0.8603\n","Epoch: 60, Loss: 9.1860, Accuracy: 0.8382\n","Epoch: 80, Loss: 3.7256, Accuracy: 0.8971\n","Epoch: 100, Loss: 3.5328, Accuracy: 0.8897\n","1/1 [==============================] - 0s 60ms/step\n","Fold completed. Validation accuracy: 62.50%\n","Epoch: 20, Loss: 27.6784, Accuracy: 0.6838\n","Epoch: 40, Loss: 5.6410, Accuracy: 0.8088\n","Epoch: 60, Loss: 5.6557, Accuracy: 0.8309\n","Epoch: 80, Loss: 2.0497, Accuracy: 0.9118\n","Epoch: 100, Loss: 2.6702, Accuracy: 0.8382\n","1/1 [==============================] - 0s 87ms/step\n","Fold completed. Validation accuracy: 62.50%\n","Best validation accuracy: 87.50%\n"]}]},{"cell_type":"markdown","source":["# Evaluation"],"metadata":{"id":"rWfzCo3i9osr"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Predict on the test set\n","y_pred_time = (best_model_time.predict(X_test_time) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_time = accuracy_score(y_test_time, y_pred_time)\n","print(f\"Test Accuracy: {test_accuracy_time * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_time = confusion_matrix(y_test_time, y_pred_time)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_time).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_time = classification_report(y_test_time, y_pred_time)\n","print(\"Classification Report:\")\n","print(report_time)\n"],"metadata":{"id":"zyNacevWbcUG","colab":{"base_uri":"https://localhost:8080/","height":680},"executionInfo":{"status":"ok","timestamp":1713879137254,"user_tz":240,"elapsed":459,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"7a279231-c0e9-4af5-f0d4-834695510e11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step\n","Test Accuracy: 58.33%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.46      0.67      0.55        18\n","           1       0.73      0.53      0.62        30\n","\n","    accuracy                           0.58        48\n","   macro avg       0.59      0.60      0.58        48\n","weighted avg       0.63      0.58      0.59        48\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Assume we have a trained model, and the X_test and y_test sets as per your previous code.\n","\n","# Predict on the test set\n","y_pred_frequency = (best_model_frequency.predict(X_test_frequency) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_frequency = accuracy_score(y_test_frequency, y_pred_frequency)\n","print(f\"Test Accuracy: {test_accuracy_frequency * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_frequency = confusion_matrix(y_test_frequency, y_pred_frequency)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_frequency).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_frequency = classification_report(y_test_frequency, y_pred_frequency)\n","print(\"Classification Report:\")\n","print(report_frequency)\n"],"metadata":{"id":"Z2q05UU4bYs1","colab":{"base_uri":"https://localhost:8080/","height":680},"executionInfo":{"status":"ok","timestamp":1713879137901,"user_tz":240,"elapsed":652,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"0487dd19-f6c9-40db-87a1-fa341d196cb4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 8ms/step\n","Test Accuracy: 62.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.72      0.59        18\n","           1       0.77      0.57      0.65        30\n","\n","    accuracy                           0.62        48\n","   macro avg       0.64      0.64      0.62        48\n","weighted avg       0.67      0.62      0.63        48\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","import matplotlib.pyplot as plt\n","\n","# Predict on the test set\n","y_pred_time_frequency = (best_model_time_frequency.predict(X_test_time_frequency) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_time_frequency = accuracy_score(y_test_time_frequency, y_pred_time_frequency)\n","print(f\"Test Accuracy: {test_accuracy_time_frequency * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_time_frequency = confusion_matrix(y_test_time_frequency, y_pred_time_frequency)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_time_frequency).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_time_frequency = classification_report(y_test_time_frequency, y_pred_time_frequency)\n","print(\"Classification Report:\")\n","print(report_time_frequency)\n"],"metadata":{"id":"fBno1H7YbTu9","colab":{"base_uri":"https://localhost:8080/","height":680},"executionInfo":{"status":"ok","timestamp":1713879138339,"user_tz":240,"elapsed":442,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"5a38f034-6707-4dbe-89f3-32365cdd9e84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 5ms/step\n","Test Accuracy: 56.25%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.45      0.78      0.57        18\n","           1       0.76      0.43      0.55        30\n","\n","    accuracy                           0.56        48\n","   macro avg       0.61      0.61      0.56        48\n","weighted avg       0.65      0.56      0.56        48\n","\n"]}]},{"cell_type":"code","source":["# Predict on the test set\n","y_pred_important_positions = (best_model_important_positions.predict(X_test_important_positions) > 0.5).astype(\"int32\")\n","\n","# Calculate test accuracy\n","test_accuracy_important_positions = accuracy_score(y_test_important_positions, y_pred_important_positions)\n","print(f\"Test Accuracy: {test_accuracy_important_positions * 100:.2f}%\")\n","\n","# Generate the confusion matrix\n","conf_matrix_important_positions = confusion_matrix(y_test_important_positions, y_pred_important_positions)\n","\n","# Plot the confusion matrix\n","ConfusionMatrixDisplay(conf_matrix_important_positions).plot(values_format='d')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print classification report\n","report_important_positions = classification_report(y_test_important_positions, y_pred_important_positions)\n","print(\"Classification Report:\")\n","print(report_important_positions)\n"],"metadata":{"id":"vA1bwz2YfjIk","colab":{"base_uri":"https://localhost:8080/","height":680},"executionInfo":{"status":"ok","timestamp":1713879139032,"user_tz":240,"elapsed":700,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"bf129798-54e4-4b12-fff4-67902aac2fa2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 7ms/step\n","Test Accuracy: 62.50%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.56      0.53        18\n","           1       0.71      0.67      0.69        30\n","\n","    accuracy                           0.62        48\n","   macro avg       0.61      0.61      0.61        48\n","weighted avg       0.63      0.62      0.63        48\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Assume models and test datasets are defined for each type\n","# Predict probabilities for the positive class for all models\n","y_pred_probs_time = best_model_time.predict(X_test_time).ravel()\n","y_pred_probs_frequency = best_model_frequency.predict(X_test_frequency).ravel()\n","y_pred_probs_time_frequency = best_model_time_frequency.predict(X_test_time_frequency).ravel()\n","y_pred_probs_important_positions = best_model_important_positions.predict(X_test_important_positions).ravel()  # New model\n","\n","# Compute the ROC curve for each model\n","fpr_time, tpr_time, thresholds_time = roc_curve(y_test_time, y_pred_probs_time)\n","roc_auc_time = auc(fpr_time, tpr_time)\n","\n","fpr_frequency, tpr_frequency, thresholds_frequency = roc_curve(y_test_frequency, y_pred_probs_frequency)\n","roc_auc_frequency = auc(fpr_frequency, tpr_frequency)\n","\n","fpr_time_frequency, tpr_time_frequency, thresholds_time_frequency = roc_curve(y_test_time_frequency, y_pred_probs_time_frequency)\n","roc_auc_time_frequency = auc(fpr_time_frequency, tpr_time_frequency)\n","\n","fpr_important_positions, tpr_important_positions, thresholds_important_positions = roc_curve(y_test_important_positions, y_pred_probs_important_positions)  # New ROC computation\n","roc_auc_important_positions = auc(fpr_important_positions, tpr_important_positions)  # New AUC computation\n","\n","# Plot the ROC curves\n","plt.figure(figsize=(10, 8))\n","plt.plot(fpr_time, tpr_time, color='darkorange', lw=2, label='Time ROC curve (area = %0.2f)' % roc_auc_time)\n","plt.plot(fpr_frequency, tpr_frequency, color='blue', lw=2, label='Frequency ROC curve (area = %0.2f)' % roc_auc_frequency)\n","plt.plot(fpr_time_frequency, tpr_time_frequency, color='yellow', lw=2, label='Time&Frequency ROC curve (area = %0.2f)' % roc_auc_time_frequency)\n","plt.plot(fpr_important_positions, tpr_important_positions, color='green', lw=2, label='Important Positions ROC curve (area = %0.2f)' % roc_auc_important_positions)  # New curve\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()\n"],"metadata":{"id":"B9EsUlfy9i4d","colab":{"base_uri":"https://localhost:8080/","height":787},"executionInfo":{"status":"ok","timestamp":1713879139884,"user_tz":240,"elapsed":858,"user":{"displayName":"Wang","userId":"06822780026042244845"}},"outputId":"749b6a80-f2a9-4041-fe21-7d62bc9f0cad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 5ms/step\n","2/2 [==============================] - 0s 6ms/step\n","2/2 [==============================] - 0s 7ms/step\n","2/2 [==============================] - 0s 5ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"uTAYXQYiRf1U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yY2wY8OhTlZH"},"execution_count":null,"outputs":[]}]}